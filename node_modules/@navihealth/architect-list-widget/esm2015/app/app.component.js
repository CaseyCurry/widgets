/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef } from '@angular/core';
import { BusFactory } from '@navihealth/browser-bus';
export class AppComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.title = 'architects';
        this.architects = [
            'Seshan',
            'Aneesh',
            'Nijil'
        ];
        this.bus = (/** @type {?} */ (BusFactory)).create();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    newArchitectOnKeyUp(event) {
        this.newArchitectName = event.target.value;
    }
    /**
     * @return {?}
     */
    addOnClick() {
        if (this.newArchitectName) {
            this.architects.push(this.newArchitectName);
            this.notifyArchitectSelected(this.newArchitectName);
        }
    }
    /**
     * @param {?} architect
     * @return {?}
     */
    architectOnClick(architect) {
        this.notifyArchitectSelected(architect);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.elementRef.nativeElement.classList.add('architect-list-widget');
    }
    /**
     * @param {?} architect
     * @return {?}
     */
    notifyArchitectSelected(architect) {
        this.bus.notify({
            eventName: 'architect-selected',
            message: {
                name: architect
            }
        });
    }
}
AppComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-architect-list-widget',
                template: `<div class='col-xs-12'>
  <input (keyup)='newArchitectOnKeyUp($event)' placeholder='enter name' />
  <button (click)='addOnClick()' class='btn btn-primary'>Add Architect</button>
  <ul>
    <li *ngFor='let architect of architects' (click)='architectOnClick(architect)'>{{ architect }}</li>
  </ul>
</div>`,
                styles: [`:host.architect-list-widget ul{margin-top:10px;padding:0}:host.architect-list-widget li{list-style:none;color:green}`]
            },] },
];
/** @nocollapse */
AppComponent.ctorParameters = () => [
    { type: ElementRef, },
];
function AppComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AppComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AppComponent.ctorParameters;
    /** @type {?} */
    AppComponent.prototype.title;
    /** @type {?} */
    AppComponent.prototype.architects;
    /** @type {?} */
    AppComponent.prototype.newArchitectName;
    /** @type {?} */
    AppComponent.prototype.bus;
    /** @type {?} */
    AppComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuYXZpaGVhbHRoL2FyY2hpdGVjdC1saXN0LXdpZGdldC8iLCJzb3VyY2VzIjpbImFwcC9hcHAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBYXJELE1BQU07Ozs7SUFNSixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUc7WUFDaEIsUUFBUTtZQUNSLFFBQVE7WUFDUixPQUFPO1NBQ1IsQ0FBQztRQUNGLElBQUksQ0FBQyxHQUFHLEdBQUcsbUJBQUMsVUFBaUIsRUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3pDOzs7OztJQUVELG1CQUFtQixDQUFDLEtBQUs7UUFDdkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQzVDOzs7O0lBRUQsVUFBVTtRQUNSLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3JEO0tBQ0Y7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsU0FBUztRQUN4QixJQUFJLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDekM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ3RFOzs7OztJQUVPLHVCQUF1QixDQUFDLFNBQVM7UUFDdkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDZCxTQUFTLEVBQUUsb0JBQW9CO1lBQy9CLE9BQU8sRUFBRTtnQkFDUCxJQUFJLEVBQUUsU0FBUzthQUNoQjtTQUNGLENBQUMsQ0FBQzs7OztZQXBETixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsUUFBUSxFQUFFOzs7Ozs7T0FNTDtnQkFDTCxNQUFNLEVBQUUsQ0FBQyxzSEFBc0gsQ0FBQzthQUNqSTs7OztZQWJtQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJ1c0ZhY3RvcnkgfSBmcm9tICdAbmF2aWhlYWx0aC9icm93c2VyLWJ1cyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1hcmNoaXRlY3QtbGlzdC13aWRnZXQnLFxyXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz0nY29sLXhzLTEyJz5cclxuICA8aW5wdXQgKGtleXVwKT0nbmV3QXJjaGl0ZWN0T25LZXlVcCgkZXZlbnQpJyBwbGFjZWhvbGRlcj0nZW50ZXIgbmFtZScgLz5cclxuICA8YnV0dG9uIChjbGljayk9J2FkZE9uQ2xpY2soKScgY2xhc3M9J2J0biBidG4tcHJpbWFyeSc+QWRkIEFyY2hpdGVjdDwvYnV0dG9uPlxyXG4gIDx1bD5cclxuICAgIDxsaSAqbmdGb3I9J2xldCBhcmNoaXRlY3Qgb2YgYXJjaGl0ZWN0cycgKGNsaWNrKT0nYXJjaGl0ZWN0T25DbGljayhhcmNoaXRlY3QpJz57eyBhcmNoaXRlY3QgfX08L2xpPlxyXG4gIDwvdWw+XHJcbjwvZGl2PmAsXHJcbiAgc3R5bGVzOiBbYDpob3N0LmFyY2hpdGVjdC1saXN0LXdpZGdldCB1bHttYXJnaW4tdG9wOjEwcHg7cGFkZGluZzowfTpob3N0LmFyY2hpdGVjdC1saXN0LXdpZGdldCBsaXtsaXN0LXN0eWxlOm5vbmU7Y29sb3I6Z3JlZW59YF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgYXJjaGl0ZWN0czogc3RyaW5nW107XHJcbiAgbmV3QXJjaGl0ZWN0TmFtZTogc3RyaW5nO1xyXG4gIGJ1czogYW55O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIHRoaXMudGl0bGUgPSAnYXJjaGl0ZWN0cyc7XHJcbiAgICB0aGlzLmFyY2hpdGVjdHMgPSBbXHJcbiAgICAgICdTZXNoYW4nLFxyXG4gICAgICAnQW5lZXNoJyxcclxuICAgICAgJ05pamlsJ1xyXG4gICAgXTtcclxuICAgIHRoaXMuYnVzID0gKEJ1c0ZhY3RvcnkgYXMgYW55KS5jcmVhdGUoKTtcclxuICB9XHJcblxyXG4gIG5ld0FyY2hpdGVjdE9uS2V5VXAoZXZlbnQpIHtcclxuICAgIHRoaXMubmV3QXJjaGl0ZWN0TmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICB9XHJcblxyXG4gIGFkZE9uQ2xpY2soKSB7XHJcbiAgICBpZiAodGhpcy5uZXdBcmNoaXRlY3ROYW1lKSB7XHJcbiAgICAgIHRoaXMuYXJjaGl0ZWN0cy5wdXNoKHRoaXMubmV3QXJjaGl0ZWN0TmFtZSk7XHJcbiAgICAgIHRoaXMubm90aWZ5QXJjaGl0ZWN0U2VsZWN0ZWQodGhpcy5uZXdBcmNoaXRlY3ROYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFyY2hpdGVjdE9uQ2xpY2soYXJjaGl0ZWN0KSB7XHJcbiAgICB0aGlzLm5vdGlmeUFyY2hpdGVjdFNlbGVjdGVkKGFyY2hpdGVjdCk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhcmNoaXRlY3QtbGlzdC13aWRnZXQnKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbm90aWZ5QXJjaGl0ZWN0U2VsZWN0ZWQoYXJjaGl0ZWN0KSB7XHJcbiAgICB0aGlzLmJ1cy5ub3RpZnkoe1xyXG4gICAgICBldmVudE5hbWU6ICdhcmNoaXRlY3Qtc2VsZWN0ZWQnLFxyXG4gICAgICBtZXNzYWdlOiB7XHJcbiAgICAgICAgbmFtZTogYXJjaGl0ZWN0XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=