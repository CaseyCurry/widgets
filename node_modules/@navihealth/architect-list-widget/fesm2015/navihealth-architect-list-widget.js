import { Component, ElementRef, NgModule } from '@angular/core';
import { BusFactory } from '@navihealth/browser-bus';
import { BrowserModule } from '@angular/platform-browser';
import { __awaiter } from 'tslib';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AppComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.title = 'architects';
        this.architects = [
            'Seshan',
            'Aneesh',
            'Nijil'
        ];
        this.bus = (/** @type {?} */ (BusFactory)).create();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    newArchitectOnKeyUp(event) {
        this.newArchitectName = event.target.value;
    }
    /**
     * @return {?}
     */
    addOnClick() {
        if (this.newArchitectName) {
            this.architects.push(this.newArchitectName);
            this.notifyArchitectSelected(this.newArchitectName);
        }
    }
    /**
     * @param {?} architect
     * @return {?}
     */
    architectOnClick(architect) {
        this.notifyArchitectSelected(architect);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.elementRef.nativeElement.classList.add('architect-list-widget');
    }
    /**
     * @param {?} architect
     * @return {?}
     */
    notifyArchitectSelected(architect) {
        this.bus.notify({
            eventName: 'architect-selected',
            message: {
                name: architect
            }
        });
    }
}
AppComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-architect-list-widget',
                template: `<div class='col-xs-12'>
  <input (keyup)='newArchitectOnKeyUp($event)' placeholder='enter name' />
  <button (click)='addOnClick()' class='btn btn-primary'>Add Architect</button>
  <ul>
    <li *ngFor='let architect of architects' (click)='architectOnClick(architect)'>{{ architect }}</li>
  </ul>
</div>`,
                styles: [`:host.architect-list-widget ul{margin-top:10px;padding:0}:host.architect-list-widget li{list-style:none;color:green}`]
            },] },
];
/** @nocollapse */
AppComponent.ctorParameters = () => [
    { type: ElementRef, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AppModule {
}
AppModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    AppComponent
                ],
                imports: [
                    BrowserModule
                ],
                providers: [],
                bootstrap: [AppComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ id = 'd4181c23-4c1f-4c2a-910a-7d383afb9cd9';
const /** @type {?} */ title = 'Architect List (Angular 5)';
const /** @type {?} */ width = {
    xs: 12,
    sm: 8,
    md: 6,
    lg: 5,
    xl: 4
};
const /** @type {?} */ initialHeight = '250px';
const /** @type {?} */ render = function (container) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const /** @type {?} */ appRoot = document.createElement('app-architect-list-widget');
                container.appendChild(appRoot);
                yield platformBrowserDynamic().bootstrapModule(AppModule);
                resolve();
            }
            catch (/** @type {?} */ error) {
                reject(error);
            }
        }));
    });
};
var widget = {
    id,
    title,
    width,
    initialHeight,
    render
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export default widget;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWhlYWx0aC1hcmNoaXRlY3QtbGlzdC13aWRnZXQuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuYXZpaGVhbHRoL2FyY2hpdGVjdC1saXN0LXdpZGdldC9hcHAvYXBwLmNvbXBvbmVudC50cyIsIm5nOi8vQG5hdmloZWFsdGgvYXJjaGl0ZWN0LWxpc3Qtd2lkZ2V0L2FwcC9hcHAubW9kdWxlLnRzIiwibmc6Ly9AbmF2aWhlYWx0aC9hcmNoaXRlY3QtbGlzdC13aWRnZXQvd2lkZ2V0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCdXNGYWN0b3J5IH0gZnJvbSAnQG5hdmloZWFsdGgvYnJvd3Nlci1idXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtYXJjaGl0ZWN0LWxpc3Qtd2lkZ2V0JyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9J2NvbC14cy0xMic+XHJcbiAgPGlucHV0IChrZXl1cCk9J25ld0FyY2hpdGVjdE9uS2V5VXAoJGV2ZW50KScgcGxhY2Vob2xkZXI9J2VudGVyIG5hbWUnIC8+XHJcbiAgPGJ1dHRvbiAoY2xpY2spPSdhZGRPbkNsaWNrKCknIGNsYXNzPSdidG4gYnRuLXByaW1hcnknPkFkZCBBcmNoaXRlY3Q8L2J1dHRvbj5cclxuICA8dWw+XHJcbiAgICA8bGkgKm5nRm9yPSdsZXQgYXJjaGl0ZWN0IG9mIGFyY2hpdGVjdHMnIChjbGljayk9J2FyY2hpdGVjdE9uQ2xpY2soYXJjaGl0ZWN0KSc+e3sgYXJjaGl0ZWN0IH19PC9saT5cclxuICA8L3VsPlxyXG48L2Rpdj5gLFxyXG4gIHN0eWxlczogW2A6aG9zdC5hcmNoaXRlY3QtbGlzdC13aWRnZXQgdWx7bWFyZ2luLXRvcDoxMHB4O3BhZGRpbmc6MH06aG9zdC5hcmNoaXRlY3QtbGlzdC13aWRnZXQgbGl7bGlzdC1zdHlsZTpub25lO2NvbG9yOmdyZWVufWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGFyY2hpdGVjdHM6IHN0cmluZ1tdO1xyXG4gIG5ld0FyY2hpdGVjdE5hbWU6IHN0cmluZztcclxuICBidXM6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLnRpdGxlID0gJ2FyY2hpdGVjdHMnO1xyXG4gICAgdGhpcy5hcmNoaXRlY3RzID0gW1xyXG4gICAgICAnU2VzaGFuJyxcclxuICAgICAgJ0FuZWVzaCcsXHJcbiAgICAgICdOaWppbCdcclxuICAgIF07XHJcbiAgICB0aGlzLmJ1cyA9IChCdXNGYWN0b3J5IGFzIGFueSkuY3JlYXRlKCk7XHJcbiAgfVxyXG5cclxuICBuZXdBcmNoaXRlY3RPbktleVVwKGV2ZW50KSB7XHJcbiAgICB0aGlzLm5ld0FyY2hpdGVjdE5hbWUgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgfVxyXG5cclxuICBhZGRPbkNsaWNrKCkge1xyXG4gICAgaWYgKHRoaXMubmV3QXJjaGl0ZWN0TmFtZSkge1xyXG4gICAgICB0aGlzLmFyY2hpdGVjdHMucHVzaCh0aGlzLm5ld0FyY2hpdGVjdE5hbWUpO1xyXG4gICAgICB0aGlzLm5vdGlmeUFyY2hpdGVjdFNlbGVjdGVkKHRoaXMubmV3QXJjaGl0ZWN0TmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhcmNoaXRlY3RPbkNsaWNrKGFyY2hpdGVjdCkge1xyXG4gICAgdGhpcy5ub3RpZnlBcmNoaXRlY3RTZWxlY3RlZChhcmNoaXRlY3QpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYXJjaGl0ZWN0LWxpc3Qtd2lkZ2V0Jyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG5vdGlmeUFyY2hpdGVjdFNlbGVjdGVkKGFyY2hpdGVjdCkge1xyXG4gICAgdGhpcy5idXMubm90aWZ5KHtcclxuICAgICAgZXZlbnROYW1lOiAnYXJjaGl0ZWN0LXNlbGVjdGVkJyxcclxuICAgICAgbWVzc2FnZToge1xyXG4gICAgICAgIG5hbWU6IGFyY2hpdGVjdFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcbmltcG9ydCB7IEFwcENvbXBvbmVudCB9IGZyb20gJy4vYXBwLmNvbXBvbmVudCc7XHJcblxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIEFwcENvbXBvbmVudFxyXG4gIF0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgQnJvd3Nlck1vZHVsZVxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXSxcclxuICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBcHBNb2R1bGUgeyB9XHJcbiIsImltcG9ydCB7IGVuYWJsZVByb2RNb2RlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XHJcblxyXG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcclxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7XHJcblxyXG5pZiAoZW52aXJvbm1lbnQucHJvZHVjdGlvbikge1xyXG4gIGVuYWJsZVByb2RNb2RlKCk7XHJcbn1cclxuXHJcbmNvbnN0IGlkID0gJ2Q0MTgxYzIzLTRjMWYtNGMyYS05MTBhLTdkMzgzYWZiOWNkOSc7XHJcbmNvbnN0IHRpdGxlID0gJ0FyY2hpdGVjdCBMaXN0IChBbmd1bGFyIDUpJztcclxuY29uc3Qgd2lkdGggPSB7XHJcbiAgeHM6IDEyLFxyXG4gIHNtOiA4LFxyXG4gIG1kOiA2LFxyXG4gIGxnOiA1LFxyXG4gIHhsOiA0XHJcbn07XHJcbmNvbnN0IGluaXRpYWxIZWlnaHQgPSAnMjUwcHgnO1xyXG5jb25zdCByZW5kZXIgPSBhc3luYyBmdW5jdGlvbihjb250YWluZXI6IEVsZW1lbnQpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgYXBwUm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2FwcC1hcmNoaXRlY3QtbGlzdC13aWRnZXQnKTtcclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGFwcFJvb3QpO1xyXG4gICAgICBhd2FpdCBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljKCkuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSk7XHJcbiAgICAgIHJlc29sdmUoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaWQsXHJcbiAgdGl0bGUsXHJcbiAgd2lkdGgsXHJcbiAgaW5pdGlhbEhlaWdodCxcclxuICByZW5kZXJcclxufTtcclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztJQW9CRSxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUc7WUFDaEIs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