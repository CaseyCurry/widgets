(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/Observable'), require('rxjs/add/observable/of'), require('rxjs/add/operator/delay'), require('rxjs/add/observable/fromEvent'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('@navihealth/widget-dashboard-ng5', ['exports', '@angular/core', '@angular/common', 'rxjs/Observable', 'rxjs/add/observable/of', 'rxjs/add/operator/delay', 'rxjs/add/observable/fromEvent', '@angular/platform-browser'], factory) :
    (factory((global.navihealth = global.navihealth || {}, global.navihealth['widget-dashboard-ng5'] = {}),global.ng.core,global.ng.common,global.rxjs.Observable,global.rxjs['add/observable/of'],global.rxjs['add/operator/delay'],global.rxjs['add/observable/fromEvent'],global.ng.platformBrowser));
}(this, (function (exports,core,common,Observable,of,delay,fromEvent,platformBrowser) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BootstrapService = (function () {
        function BootstrapService() {
            this.maxColumns = 12;
            this.columnPrefix = 'col-';
            this.breakpoints = {
                xl: 'd-xl-none',
                lg: 'd-lg-none',
                md: 'd-md-none',
                sm: 'd-sm-none',
                xs: 'd-none'
            };
        }
        /**
         * @return {?}
         */
        BootstrapService.prototype.getCurrentBreakpoint = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ breakpoint = '';
                var /** @type {?} */ marker = document.createElement('div');
                marker.style.visibility = 'hidden';
                document.body.appendChild(marker);
                var /** @type {?} */ breakpointKeys = Object.keys(this.breakpoints);
                for (var /** @type {?} */ i = 0; i < breakpointKeys.length; i++) {
                    breakpoint = breakpointKeys[i];
                    marker.classList.add(this.breakpoints[breakpoint]);
                    var /** @type {?} */ style = window.getComputedStyle(marker);
                    if (style.display === 'none') {
                        break;
                    }
                }
                marker.remove();
                return breakpoint;
            };
        /**
         * @return {?}
         */
        BootstrapService.prototype.hasBreakpointChanged = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
                if (breakpoint !== this.currentBreakpoint) {
                    this.currentBreakpoint = breakpoint;
                    return true;
                }
                return false;
            };
        /**
         * @param {?} getWidth
         * @return {?}
         */
        BootstrapService.prototype.getWidth = /**
         * @param {?} getWidth
         * @return {?}
         */
            function (getWidth) {
                var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
                var /** @type {?} */ width = getWidth(breakpoint);
                if (!width) {
                    // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
                    var /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
                    while (!width && smallerBreakpoints.length) {
                        breakpoint = smallerBreakpoints.shift();
                        width = getWidth(breakpoint);
                    }
                }
                return width;
            };
        /**
         * @param {?} makeFullWidth
         * @return {?}
         */
        BootstrapService.prototype.makeFullWidth = /**
         * @param {?} makeFullWidth
         * @return {?}
         */
            function (makeFullWidth) {
                var _this = this;
                var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
                // Make each breakpoint at the current size and smaller the full width of a row.
                this.getSmallerBreakpoints(breakpoint)
                    .concat([breakpoint])
                    .forEach(function (x) {
                    makeFullWidth(x, _this.maxColumns);
                });
            };
        /**
         * @param {?} widget
         * @param {?} targetWidthOfWidget
         * @return {?}
         */
        BootstrapService.prototype.resize = /**
         * @param {?} widget
         * @param {?} targetWidthOfWidget
         * @return {?}
         */
            function (widget, targetWidthOfWidget) {
                var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
                var /** @type {?} */ width = widget.getCurrentWidth(breakpoint);
                if (!width) {
                    // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
                    var /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
                    while (!width && smallerBreakpoints.length) {
                        breakpoint = smallerBreakpoints.shift();
                        width = widget.getCurrentWidth(breakpoint);
                    }
                }
                widget.resize(breakpoint, targetWidthOfWidget);
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        BootstrapService.prototype.getClasses = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var /** @type {?} */ widths = widget.getCurrentWidths();
                return Object.keys(widths)
                    .map(function (x) {
                    var /** @type {?} */ width = widths[x];
                    if (x === 'xs') {
                        return 'col-' + width;
                    }
                    return 'col-' + x + '-' + width;
                });
            };
        /**
         * @param {?} breakpoint
         * @return {?}
         */
        BootstrapService.prototype.getSmallerBreakpoints = /**
         * @param {?} breakpoint
         * @return {?}
         */
            function (breakpoint) {
                var /** @type {?} */ allBreakpoints = Object.keys(this.breakpoints);
                var /** @type {?} */ smallerBreakpoints = allBreakpoints.slice(allBreakpoints.indexOf(breakpoint) + 1, allBreakpoints.length);
                return smallerBreakpoints;
            };
        BootstrapService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        BootstrapService.ctorParameters = function () { return []; };
        return BootstrapService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DashboardComponent = (function () {
        function DashboardComponent() {
        }
        DashboardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-dashboard',
                        template: "<app-widgets-panel class='row'></app-widgets-panel>",
                        styles: [""]
                    },] },
        ];
        return DashboardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SpacerComponent = (function () {
        function SpacerComponent(elementRef) {
            this.elementRef = elementRef;
            this.spacerHovered = new core.EventEmitter();
            this.spacerUnhovered = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        SpacerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        SpacerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.classList.add('col-12');
            };
        /**
         * @return {?}
         */
        SpacerComponent.prototype.onMouseEnter = /**
         * @return {?}
         */
            function () {
                this.spacerHovered.emit(this);
            };
        /**
         * @return {?}
         */
        SpacerComponent.prototype.onTouchEnter = /**
         * @return {?}
         */
            function () {
                this.spacerHovered.emit(this);
            };
        /**
         * @return {?}
         */
        SpacerComponent.prototype.onMouseLeave = /**
         * @return {?}
         */
            function () {
                this.spacerUnhovered.emit();
            };
        /**
         * @return {?}
         */
        SpacerComponent.prototype.onTouchLeave = /**
         * @return {?}
         */
            function () {
                this.spacerUnhovered.emit();
            };
        SpacerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widgets-panel-spacer',
                        template: "<div (mouseenter)='onMouseEnter()' (touchenter)='onTouchEnter()' (mouseleave)='onMouseLeave()' (touchleave)='onTouchLeave()'>\n</div>",
                        styles: [":host{height:30px}:host>div{height:100%}"]
                    },] },
        ];
        /** @nocollapse */
        SpacerComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        SpacerComponent.propDecorators = {
            "spacer": [{ type: core.Input },],
            "spacerHovered": [{ type: core.Output },],
            "spacerUnhovered": [{ type: core.Output },],
        };
        return SpacerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Library = (function () {
        function Library(renderedWidgets, availableWidgets) {
            this.renderedWidgets = renderedWidgets;
            this.availableWidgets = availableWidgets;
            this.isDisplayed = false;
            this.buildLibrary();
        }
        /**
         * @param {?} widget
         * @return {?}
         */
        Library.prototype.isWidgetRendered = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                return this.renderedWidgets
                    .map(function (renderedWidget) { return renderedWidget.id; })
                    .indexOf(widget.id) >= 0;
            };
        /**
         * @return {?}
         */
        Library.prototype.buildLibrary = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.widgets = this.availableWidgets.map(function (widget) {
                    var /** @type {?} */ isRendered = _this.isWidgetRendered(widget);
                    return { isRendered: isRendered, widget: widget };
                });
            };
        /**
         * @param {?} xPosition
         * @param {?} yPosition
         * @return {?}
         */
        Library.prototype.edit = /**
         * @param {?} xPosition
         * @param {?} yPosition
         * @return {?}
         */
            function (xPosition, yPosition) {
                this.isDisplayed = true;
                this.xPosition = xPosition;
                this.yPosition = yPosition;
            };
        /**
         * @return {?}
         */
        Library.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.isDisplayed = false;
                this.xPosition = null;
                this.yPosition = null;
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        Library.prototype.renderWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.renderedWidgets.push(widget);
                this.buildLibrary();
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        Library.prototype.derenderWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var _this = this;
                this.renderedWidgets
                    .filter(function (x) { return x.id === widget.id; })
                    .forEach(function (x) {
                    _this.renderedWidgets.splice(_this.renderedWidgets.indexOf(x), 1);
                });
                this.buildLibrary();
            };
        return Library;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LayoutEditor = (function () {
        function LayoutEditor() {
            this.isDisplayed = false;
        }
        /**
         * @param {?} xPosition
         * @param {?} yPosition
         * @return {?}
         */
        LayoutEditor.prototype.edit = /**
         * @param {?} xPosition
         * @param {?} yPosition
         * @return {?}
         */
            function (xPosition, yPosition) {
                this.isDisplayed = true;
                this.xPosition = xPosition;
                this.yPosition = yPosition;
            };
        /**
         * @return {?}
         */
        LayoutEditor.prototype.hide = /**
         * @return {?}
         */
            function () {
                this.isDisplayed = false;
                this.xPosition = null;
                this.yPosition = null;
            };
        return LayoutEditor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PanelComponent = (function () {
        function PanelComponent(document, widgetsService, bootstrapService) {
            this.document = document;
            this.widgetsService = widgetsService;
            this.bootstrapService = bootstrapService;
            this.layoutEditor = new LayoutEditor();
            this.resizeGuidelines = [];
            this.isOverlayDisplayed = false;
        }
        /**
         * @return {?}
         */
        PanelComponent.prototype.onResize = /**
         * @return {?}
         */
            function () {
                if (this.bootstrapService.hasBreakpointChanged()) {
                    this.addHorizontalSpacers();
                }
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.preventHighlightingWhileMoving = /**
         * @return {?}
         */
            function () {
                this.document.body.classList.add('no-highlighting');
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.allowHighlighting = /**
         * @return {?}
         */
            function () {
                this.document.body.classList.remove('no-highlighting');
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.createSpacer = /**
         * @return {?}
         */
            function () {
                return {
                    spacer: {}
                };
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.clearSpacers = /**
         * @return {?}
         */
            function () {
                for (var /** @type {?} */ i = this.items.length - 1; i >= 0; i--) {
                    if (this.items[i].spacer) {
                        this.items.splice(i, 1);
                    }
                }
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.addHorizontalSpacers = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.clearSpacers();
                var /** @type {?} */ usedWidthOnRow = 0;
                var /** @type {?} */ indexesToInsertSpacer = [0];
                for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
                    var /** @type {?} */ widget = this.items[i].widget || this.items[i].dropTarget;
                    if (this.movingWidgetComponent && widget === this.movingWidgetComponent.widget) {
                        continue;
                    }
                    var /** @type {?} */ widgetWidth = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget));
                    usedWidthOnRow += widgetWidth;
                    if (usedWidthOnRow === this.bootstrapService.maxColumns) {
                        indexesToInsertSpacer.push(i + 1);
                        usedWidthOnRow = 0;
                    }
                    else if (usedWidthOnRow > this.bootstrapService.maxColumns) {
                        indexesToInsertSpacer.push(i);
                        usedWidthOnRow = widgetWidth;
                    }
                }
                indexesToInsertSpacer
                    .reverse()
                    .forEach(function (x) {
                    _this.items.splice(x, 0, _this.createSpacer());
                });
                if (!this.items[this.items.length - 1].spacer) {
                    this.items.push(this.createSpacer());
                }
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.toggleOverlay = /**
         * @return {?}
         */
            function () {
                this.isOverlayDisplayed = !this.isOverlayDisplayed;
                if (this.isOverlayDisplayed) {
                    document.getElementById('overlay').style.display = 'block';
                }
                else {
                    document.getElementById('overlay').style.display = 'none';
                }
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ renderedWidgets = this.widgetsService.getRenderedWidgets();
                this.items = renderedWidgets.map(function (x) {
                    return { widget: x };
                });
                this.addHorizontalSpacers();
                var /** @type {?} */ availableWidgets = this.widgetsService.getAvailableWidgets();
                this.library = new Library(renderedWidgets, availableWidgets);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PanelComponent.prototype.onEditLibrary = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.library.edit(event.pageX, event.pageY);
                this.toggleOverlay();
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.onHideLibrary = /**
         * @return {?}
         */
            function () {
                this.library.hide();
                this.toggleOverlay();
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.clearExistingDropTarget = /**
         * @return {?}
         */
            function () {
                for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
                    if (this.items[i].dropTarget) {
                        this.items.splice(i, 1);
                    }
                }
            };
        /**
         * @param {?} movingWidget
         * @param {?} indexOfDrop
         * @return {?}
         */
        PanelComponent.prototype.isWidgetMovingDown = /**
         * @param {?} movingWidget
         * @param {?} indexOfDrop
         * @return {?}
         */
            function (movingWidget, indexOfDrop) {
                var /** @type {?} */ indexOfWidgetBeforeMove = this.items
                    .map(function (x) { return x.widget; })
                    .indexOf(movingWidget);
                return indexOfDrop > indexOfWidgetBeforeMove;
            };
        /**
         * @param {?} currentResident
         * @param {?} newResident
         * @return {?}
         */
        PanelComponent.prototype.insertDropTarget = /**
         * @param {?} currentResident
         * @param {?} newResident
         * @return {?}
         */
            function (currentResident, newResident) {
                if (!newResident) {
                    newResident = currentResident;
                }
                this.clearExistingDropTarget();
                var /** @type {?} */ dropTarget = newResident.widget.clone();
                var /** @type {?} */ indexOfDrop;
                if (currentResident instanceof SpacerComponent) {
                    this.bootstrapService.makeFullWidth(dropTarget.makeFullWidth.bind(dropTarget));
                    indexOfDrop = this.items
                        .map(function (x) { return x.spacer; })
                        .indexOf(currentResident.spacer);
                }
                else {
                    indexOfDrop = this.items
                        .map(function (x) { return x.widget; })
                        .indexOf(currentResident.widget);
                    if (this.isWidgetMovingDown(newResident.widget, indexOfDrop)) {
                        indexOfDrop++;
                    }
                }
                var /** @type {?} */ height = newResident.getHeightInformation().height;
                this.items.splice(indexOfDrop, 0, { dropTarget: dropTarget, height: height });
            };
        /**
         * @param {?} widgetComponent
         * @return {?}
         */
        PanelComponent.prototype.onWidgetMove = /**
         * @param {?} widgetComponent
         * @return {?}
         */
            function (widgetComponent) {
                this.movingWidgetComponent = widgetComponent;
                this.preventHighlightingWhileMoving();
                this.insertDropTarget(widgetComponent, null);
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.onWidgetDropped = /**
         * @return {?}
         */
            function () {
                this.items.splice(this.items.map(function (x) { return x.widget; }).indexOf(this.movingWidgetComponent.widget), 1);
                for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
                    if (this.items[i].dropTarget) {
                        this.items.splice(i, 1, { widget: this.movingWidgetComponent.widget });
                        break;
                    }
                }
                this.allowHighlighting();
                this.movingWidgetComponent = null;
                this.addHorizontalSpacers();
            };
        /**
         * @param {?} widgetComponent
         * @return {?}
         */
        PanelComponent.prototype.onWidgetHovered = /**
         * @param {?} widgetComponent
         * @return {?}
         */
            function (widgetComponent) {
                var _this = this;
                if (!this.movingWidgetComponent) {
                    return;
                }
                console.log('test 0', new Date());
                this.moveHoverSubscription = Observable.Observable.of({})
                    .delay(30)
                    .subscribe(function () {
                    console.log('test', new Date());
                    if (!_this.movingWidgetComponent) {
                        return;
                    }
                    _this.insertDropTarget(widgetComponent, _this.movingWidgetComponent);
                    _this.addHorizontalSpacers();
                });
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.onWidgetUnhovered = /**
         * @return {?}
         */
            function () {
                if (this.moveHoverSubscription) {
                    this.moveHoverSubscription.unsubscribe();
                    this.moveHoverSubscription = null;
                }
            };
        /**
         * @param {?} spacerComponent
         * @return {?}
         */
        PanelComponent.prototype.onSpacerHovered = /**
         * @param {?} spacerComponent
         * @return {?}
         */
            function (spacerComponent) {
                var _this = this;
                if (!this.movingWidgetComponent) {
                    return;
                }
                this.moveHoverSubscription = Observable.Observable.of({})
                    .delay(300)
                    .subscribe(function () {
                    if (!_this.movingWidgetComponent) {
                        return;
                    }
                    _this.insertDropTarget(spacerComponent, _this.movingWidgetComponent);
                    _this.addHorizontalSpacers();
                });
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.onSpacerUnhovered = /**
         * @return {?}
         */
            function () {
                if (this.moveHoverSubscription) {
                    this.moveHoverSubscription.unsubscribe();
                    this.moveHoverSubscription = null;
                }
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.makeGrid = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ grid = [];
                grid.push([]);
                var /** @type {?} */ currentRowWidth = 0;
                var /** @type {?} */ widgets = this.items
                    .filter(function (x) { return x.widget; })
                    .map(function (x) { return x.widget; });
                for (var /** @type {?} */ i = 0; i < widgets.length; i++) {
                    var /** @type {?} */ widget = widgets[i];
                    var /** @type {?} */ width = this.bootstrapService
                        .getWidth(widget.getCurrentWidth.bind(widget));
                    grid[grid.length - 1].push(widget);
                    currentRowWidth += width;
                    var /** @type {?} */ isLastWidget = i === widgets.length - 1;
                    if (isLastWidget) {
                        break;
                    }
                    if (currentRowWidth === this.bootstrapService.maxColumns) {
                        grid.push([]);
                        currentRowWidth = 0;
                    }
                    else {
                        // Preview the next widget and see if a new row is needed due to lack of space.
                        var /** @type {?} */ nextWidget = widgets[i + 1];
                        var /** @type {?} */ nextWidgetWidth = this.bootstrapService
                            .getWidth(nextWidget.getCurrentWidth.bind(nextWidget));
                        var /** @type {?} */ spaceLeftOnCurrentRow = this.bootstrapService.maxColumns - currentRowWidth;
                        if (nextWidgetWidth > spaceLeftOnCurrentRow) {
                            grid.push([]);
                            currentRowWidth = 0;
                        }
                    }
                }
                return grid;
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        PanelComponent.prototype.findRowContainingWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                // I'm making a multi-dimensional array of the entire grid before trying to
                // find which row the widget is in. This is less efficient than building the
                // grid and simultaneously checking if the row has the widget, but it makes
                // the logic much more reasonable.
                var /** @type {?} */ grid = this.makeGrid();
                for (var /** @type {?} */ i = 0; i < grid.length; i++) {
                    var /** @type {?} */ widgetIndex = grid[i].indexOf(widget);
                    if (widgetIndex >= 0) {
                        return grid[i];
                    }
                }
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        PanelComponent.prototype.calculateBoundaries = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var _this = this;
                var /** @type {?} */ row = this.findRowContainingWidget(widget);
                console.log("row", row);
                var /** @type {?} */ currentPosition = row
                    .slice(0, row.indexOf(widget) + 1)
                    .map(function (x) { return _this.bootstrapService.getWidth(x.getCurrentWidth.bind(x)); })
                    .reduce(function (x, y) { return x + y; });
                var /** @type {?} */ minimumWidth = this.bootstrapService.getWidth(widget.getMinimumWidth.bind(widget));
                var /** @type {?} */ spaceToMinimize = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget)) - minimumWidth;
                // Don't go left far enough to exceed the minimum of the widget.
                var /** @type {?} */ left = currentPosition - spaceToMinimize;
                // Don't go right far enough to exceed the width of the row.
                var /** @type {?} */ right = this.bootstrapService.maxColumns;
                // This is used to determine at which column to start drawing guidelines.
                var /** @type {?} */ offset = minimumWidth - left;
                return { left: left, right: right, offset: offset };
            };
        /**
         * @param {?} widgetComponent
         * @return {?}
         */
        PanelComponent.prototype.drawResizeGuidelines = /**
         * @param {?} widgetComponent
         * @return {?}
         */
            function (widgetComponent) {
                var /** @type {?} */ heightInformation = widgetComponent.getHeightInformation();
                var /** @type {?} */ boundaries = this.calculateBoundaries(widgetComponent.widget);
                for (var /** @type {?} */ i = boundaries.left; i <= boundaries.right; i++) {
                    // unshift() which inserts at the beginning of the array instead of push()
                    // because we want to display the longest guideline first so that the shorter
                    // one is on top of the longer one. This will help when we hover over each one.
                    // If the longer one was on top it would be the only guideline raising events.
                    this.resizeGuidelines.unshift({
                        widthOfGuideline: i,
                        targetWidthOfWidget: i + boundaries.offset,
                        top: heightInformation.top,
                        height: heightInformation.height,
                        widget: widgetComponent.widget
                    });
                }
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        PanelComponent.prototype.onWidgetResized = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var /** @type {?} */ indexOfWidget = this.items
                    .map(function (x) { return x.widget; })
                    .indexOf(widget);
                this.items.splice(indexOfWidget, 1, { widget: widget });
                this.addHorizontalSpacers();
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.endWidgetResize = /**
         * @return {?}
         */
            function () {
                this.resizeGuidelines = [];
                this.allowHighlighting();
                if (this.mouseUpSubscription) {
                    this.mouseUpSubscription.unsubscribe();
                }
                if (this.touchEndSubscription) {
                    this.touchEndSubscription.unsubscribe();
                }
            };
        /**
         * @param {?} widgetComponent
         * @return {?}
         */
        PanelComponent.prototype.onWidgetResizeStarted = /**
         * @param {?} widgetComponent
         * @return {?}
         */
            function (widgetComponent) {
                var _this = this;
                this.drawResizeGuidelines(widgetComponent);
                this.preventHighlightingWhileMoving();
                this.mouseUpSubscription =
                    Observable.Observable.fromEvent(this.document, 'mouseup')
                        .subscribe(function () {
                        _this.endWidgetResize();
                        if (_this.mouseUpSubscription) {
                            _this.mouseUpSubscription.unsubscribe();
                        }
                    });
                this.touchEndSubscription =
                    Observable.Observable.fromEvent(this.document, 'touchend')
                        .subscribe(function () {
                        _this.endWidgetResize();
                        if (_this.touchEndSubscription) {
                            _this.touchEndSubscription.unsubscribe();
                        }
                    });
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        PanelComponent.prototype.onRenderWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.items.unshift({ widget: widget });
                this.addHorizontalSpacers();
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        PanelComponent.prototype.onDerenderWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var _this = this;
                this.items
                    .filter(function (x) { return x.widget && x.widget.id === widget.id; })
                    .forEach(function (x) {
                    _this.items.splice(_this.items.indexOf(x), 1);
                });
                this.addHorizontalSpacers();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PanelComponent.prototype.onEditLayout = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.layoutEditor.edit(event.pageX, event.pageY);
                this.toggleOverlay();
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.onHideLayoutEditor = /**
         * @return {?}
         */
            function () {
                this.layoutEditor.hide();
                this.toggleOverlay();
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        PanelComponent.prototype.onWidgetCloseClick = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                var _this = this;
                this.items
                    .filter(function (x) { return x.widget && x.widget === widget; })
                    .forEach(function (x) {
                    _this.items.splice(_this.items.indexOf(x), 1);
                });
                this.addHorizontalSpacers();
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.onWidgetToggleFullScreenClick = /**
         * @return {?}
         */
            function () {
                this.toggleOverlay();
            };
        /**
         * @return {?}
         */
        PanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.moveHoverSubscription) {
                    this.moveHoverSubscription.unsubscribe();
                }
                if (this.mouseUpSubscription) {
                    this.mouseUpSubscription.unsubscribe();
                }
                if (this.touchEndSubscription) {
                    this.touchEndSubscription.unsubscribe();
                }
            };
        PanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widgets-panel',
                        template: "<app-widgets-panel-controls (editLibrary)='onEditLibrary($event)' (editLayout)='onEditLayout($event)'></app-widgets-panel-controls>\n<app-widgets-library *ngIf='library.isDisplayed' [library]='library' (done)='onHideLibrary()' (renderWidget)='onRenderWidget($event)' (derenderWidget)='onDerenderWidget($event)'></app-widgets-library>\n<app-widgets-layout-editor *ngIf='layoutEditor.isDisplayed' [layoutEditor]='layoutEditor' (done)='onHideLayoutEditor()'></app-widgets-layout-editor>\n<ng-container *ngFor='let item of items'>\n  <app-widget *ngIf='item.widget; else drop' [widget]='item.widget' (widgetMoving)='onWidgetMove($event)' (widgetDropped)='onWidgetDropped()' (widgetHovered)='onWidgetHovered($event)' (widgetUnhovered)='onWidgetUnhovered()' (resizeStarted)='onWidgetResizeStarted($event)'\n    (close)='onWidgetCloseClick($event)' (fullscreen)='onWidgetToggleFullScreenClick()'></app-widget>\n  <ng-template #drop>\n    <app-widget-drop-target *ngIf='item.dropTarget; else spacer' [dropTarget]='item.dropTarget' [height]='item.height'></app-widget-drop-target>\n    <ng-template #spacer>\n      <app-widgets-panel-spacer [spacer]='item.spacer' (spacerHovered)='onSpacerHovered($event)' (spacerUnhovered)='onSpacerUnhovered()'></app-widgets-panel-spacer>\n    </ng-template>\n  </ng-template>\n</ng-container>\n<app-widget-resize-guideline *ngFor='let guideline of resizeGuidelines' [guideline]='guideline' (resized)='onWidgetResized($event)'></app-widget-resize-guideline>",
                        styles: [".moving-widget{position:absolute;pointer-events:none;z-index:100}"]
                    },] },
        ];
        /** @nocollapse */
        PanelComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },
                { type: undefined, decorators: [{ type: core.Inject, args: ['widgetsService',] },] },
                { type: BootstrapService, },
            ];
        };
        PanelComponent.propDecorators = {
            "onResize": [{ type: core.HostListener, args: ['window:resize',] },],
        };
        return PanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PanelControlsComponent = (function () {
        function PanelControlsComponent(elementRef) {
            this.elementRef = elementRef;
            this.editLibrary = new core.EventEmitter();
            this.editLayout = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        PanelControlsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        PanelControlsComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.classList.add('col-12');
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PanelControlsComponent.prototype.onLibraryClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.editLibrary.emit(event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PanelControlsComponent.prototype.onLayoutClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.editLayout.emit(event);
            };
        PanelControlsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widgets-panel-controls',
                        template: "<span class='no-highlighting'>\n  <span class='material-icons' (click)='onLibraryClick($event)'>add</span>\n<span class='material-icons' (click)='onLayoutClick($event)'>dashboard</span>\n</span>",
                        styles: [":host{margin-top:10px;margin-right:20px;text-align:right}"]
                    },] },
        ];
        /** @nocollapse */
        PanelControlsComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        PanelControlsComponent.propDecorators = {
            "editLibrary": [{ type: core.Output },],
            "editLayout": [{ type: core.Output },],
        };
        return PanelControlsComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WidgetComponent = (function () {
        function WidgetComponent(document, elementRef, zone, bootstrapService) {
            this.document = document;
            this.elementRef = elementRef;
            this.zone = zone;
            this.bootstrapService = bootstrapService;
            this.widgetMoving = new core.EventEmitter();
            this.widgetDropped = new core.EventEmitter();
            this.widgetHovered = new core.EventEmitter();
            this.widgetUnhovered = new core.EventEmitter();
            this.resizeStarted = new core.EventEmitter();
            this.close = new core.EventEmitter();
            this.fullscreen = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        WidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} e
         * @return {?}
         */
        WidgetComponent.prototype.getUserPosition = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return e.changedTouches ?
                    {
                        x: e.changedTouches[0].pageX,
                        y: e.changedTouches[0].pageY
                    } : {
                    x: e.pageX,
                    y: e.pageY
                };
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.notModifiable = /**
         * @return {?}
         */
            function () {
                if (this.widget.isFullScreen) {
                    return true;
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        WidgetComponent.prototype.notGrabbable = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.notModifiable()) {
                    return true;
                }
                if (!e) {
                    return true;
                }
                var /** @type {?} */ target = e.target || e.srcElement;
                if (!target) {
                    return true;
                }
                if (target.classList.contains('not-grabbable')) {
                    return true;
                }
                if (target.closest('.not-grabbable')) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        WidgetComponent.prototype.startMove = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.widgetMoving.emit(this);
                var /** @type {?} */ thisElement = this.elementRef.nativeElement;
                // We'll reset the style when we call endMove.
                this.initialPosition = {
                    y: thisElement.style.top,
                    x: thisElement.style.left
                };
                // Make the dragging widget follow the user's movement.
                var /** @type {?} */ userPosition = this.getUserPosition(e);
                this.moveStartPosition = {
                    x: e.touches ?
                        e.touches[0].pageX - thisElement.offsetLeft :
                        e.pageX - thisElement.offsetLeft,
                    y: e.touches ?
                        e.touches[0].pageY - thisElement.offsetTop :
                        e.pageY - thisElement.offsetTop
                };
                thisElement.style.left = (userPosition.x - this.moveStartPosition.x) + 'px';
                thisElement.style.top = (userPosition.y - this.moveStartPosition.y) + 'px';
                thisElement.classList.add('moving-widget');
            };
        /**
         * @param {?} e
         * @return {?}
         */
        WidgetComponent.prototype.move = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                // Make the widget follow the user's movement.
                var /** @type {?} */ userPosition = this.getUserPosition(e);
                this.elementRef.nativeElement.style.left = (userPosition.x - this.moveStartPosition.x) + 'px';
                this.elementRef.nativeElement.style.top = (userPosition.y - this.moveStartPosition.y) + 'px';
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.endMove = /**
         * @return {?}
         */
            function () {
                this.widgetDropped.emit();
                this.elementRef.nativeElement.classList.remove('moving-widget');
                this.elementRef.nativeElement.style.top = this.initialPosition.y;
                this.elementRef.nativeElement.style.left = this.initialPosition.x;
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.getHeightInformation = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ rect = this.elementRef.nativeElement
                    .getBoundingClientRect();
                return {
                    height: rect.height,
                    top: rect.top
                };
            };
        /**
         * @param {?} e
         * @return {?}
         */
        WidgetComponent.prototype.onWidgetMouseDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                if (this.notGrabbable(e)) {
                    return;
                }
                this.startMove(e);
                // Make sure these observers are removed in endMove.
                this.mouseMoveSubscription =
                    Observable.Observable.fromEvent(this.document, 'mousemove')
                        .subscribe(function (event) {
                        _this.zone.runOutsideAngular(function () {
                            _this.move(event);
                        });
                    });
                this.mouseUpSubscription =
                    Observable.Observable.fromEvent(this.document, 'mouseup')
                        .subscribe(function () {
                        _this.endMove();
                        if (_this.mouseMoveSubscription) {
                            _this.mouseMoveSubscription.unsubscribe();
                        }
                        if (_this.mouseUpSubscription) {
                            _this.mouseUpSubscription.unsubscribe();
                        }
                    });
            };
        /**
         * @param {?} e
         * @return {?}
         */
        WidgetComponent.prototype.onWidgetTouchStart = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                if (this.notGrabbable(e)) {
                    return;
                }
                e.preventDefault();
                this.startMove(e);
                // Make sure these observers are removed in endMove.
                this.touchMoveSubscription =
                    Observable.Observable.fromEvent(this.document, 'touchmove')
                        .subscribe(function (event) {
                        _this.zone.runOutsideAngular(function () {
                            _this.move(event);
                        });
                    });
                this.touchEndSubscription =
                    Observable.Observable.fromEvent(this.document, 'touchend')
                        .subscribe(function () {
                        _this.endMove();
                        if (_this.touchMoveSubscription) {
                            _this.touchMoveSubscription.unsubscribe();
                        }
                        if (_this.touchEndSubscription) {
                            _this.touchEndSubscription.unsubscribe();
                        }
                    });
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onWidgetMouseEnter = /**
         * @return {?}
         */
            function () {
                this.widgetHovered.emit(this);
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onWidgetTouchEnter = /**
         * @return {?}
         */
            function () {
                this.widgetHovered.emit(this);
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onWidgetMouseLeave = /**
         * @return {?}
         */
            function () {
                this.widgetUnhovered.emit();
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onWidgetTouchLeave = /**
         * @return {?}
         */
            function () {
                this.widgetUnhovered.emit();
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onResizerMouseDown = /**
         * @return {?}
         */
            function () {
                if (this.notModifiable()) {
                    return true;
                }
                this.resizeStarted.emit(this);
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onResizerTouchStart = /**
         * @return {?}
         */
            function () {
                if (this.notModifiable()) {
                    return true;
                }
                this.resizeStarted.emit(this);
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onCloseClick = /**
         * @return {?}
         */
            function () {
                this.close.emit(this.widget);
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.onToggleFullScreenClick = /**
         * @return {?}
         */
            function () {
                this.widget.toggleFullScreen();
                var /** @type {?} */ thisElement = this.elementRef.nativeElement;
                if (this.widget.isFullScreen) {
                    thisElement.classList.add('fullscreen');
                    // I would prefer to use document.body.scrollTop, but it is broken on
                    // chome/webkit and always returns 0.
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=157855
                    thisElement.style.top = (15 + window.scrollY) + 'px';
                    thisElement.style.bottom = (15 - window.scrollY) + 'px';
                    thisElement.style.left = (0 + window.scrollX) + 'px';
                    thisElement.style.right = (0 - window.scrollX) + 'px';
                }
                else {
                    thisElement.classList.remove('fullscreen');
                    thisElement.style.top = null;
                    thisElement.style.bottom = null;
                    thisElement.style.left = null;
                    thisElement.style.right = null;
                }
                this.fullscreen.emit();
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.classList.add('widget');
                var /** @type {?} */ classes = this.bootstrapService.getClasses(this.widget);
                (_a = this.elementRef.nativeElement.classList).add.apply(_a, __spread(classes));
                if (this.widget.isHidden) {
                    this.elementRef.nativeElement.style.visibility = 'hidden';
                }
                var _a;
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // If the widget is also Angular 2+, it's bootstrapping will cause Zone errors
                // in the console because Zone is loaded as a singleton. Fun. Run outside Angular.
                this.zone.runOutsideAngular(function () {
                    var /** @type {?} */ container = _this.elementRef.nativeElement.querySelector('.container');
                    _this.widget.render(container)
                        .then(function () {
                        // Remove the spinner.
                        container.children[0].remove();
                    })
                        .catch(function (error) { return console.log(error); });
                });
            };
        /**
         * @return {?}
         */
        WidgetComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.mouseMoveSubscription) {
                    this.mouseMoveSubscription.unsubscribe();
                }
                if (this.mouseUpSubscription) {
                    this.mouseUpSubscription.unsubscribe();
                }
                if (this.touchMoveSubscription) {
                    this.touchMoveSubscription.unsubscribe();
                }
                if (this.touchEndSubscription) {
                    this.touchEndSubscription.unsubscribe();
                }
            };
        WidgetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widget',
                        template: "<div class='card card-row' (mouseenter)='onWidgetMouseEnter()' (touchenter)='onWidgetTouchEnter()' (mouseleave)='onWidgetMouseLeave()' (touchleave)='onWidgetTouchLeave()'>\n  <app-widget-controls [widget]='widget' (mousedown)='onWidgetMouseDown($event)' (touchstart)='onWidgetTouchStart($event)' (close)='onCloseClick()' (fullscreen)='onToggleFullScreenClick()'></app-widget-controls>\n  <div [ngClass]='widget.isExpanded || widget.isFullScreen ? \"maximized\" : \"minimized\"'>\n    <div class='container'>\n      <div [style.height]='widget.initialHeight'>\n        <div class='loader'>Loading...</div>\n      </div>\n    </div>\n    <div class='resizer d-none d-sm-inline' (mousedown)='onResizerMouseDown()' (touchstart)='onResizerTouchStart()'></div>\n  </div>\n</div>",
                        styles: [":host{display:block}:host>div{height:100%;margin:0}.resizer{position:absolute;width:5px;height:98%;top:2px;right:2px;cursor:ew-resize}.maximized{opacity:1;transition-property:height,opacity;transition-duration:.2s,.5s}.minimized{opacity:0;transition-property:height,opacity;transition-duration:.5s,0;height:0!important}:host.fullscreen .resizer{cursor:default}:host.fullscreen{z-index:100;max-width:100%;position:absolute}.loader{color:gray;margin:auto;font-size:45px;top:calc(50% - 45px);text-indent:-9999em;overflow:hidden;width:1em;height:1em;border-radius:50%;position:relative;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:1.7s infinite load6,1.7s infinite round;animation:1.7s infinite load6,1.7s infinite round}@-webkit-keyframes load6{0%,100%,5%,95%{box-shadow:0 -.83em 0 -.4em,0 -.83em 0 -.42em,0 -.83em 0 -.44em,0 -.83em 0 -.46em,0 -.83em 0 -.477em}10%,59%{box-shadow:0 -.83em 0 -.4em,-.087em -.825em 0 -.42em,-.173em -.812em 0 -.44em,-.256em -.789em 0 -.46em,-.297em -.775em 0 -.477em}20%{box-shadow:0 -.83em 0 -.4em,-.338em -.758em 0 -.42em,-.555em -.617em 0 -.44em,-.671em -.488em 0 -.46em,-.749em -.34em 0 -.477em}38%{box-shadow:0 -.83em 0 -.4em,-.377em -.74em 0 -.42em,-.645em -.522em 0 -.44em,-.775em -.297em 0 -.46em,-.82em -.09em 0 -.477em}}@keyframes load6{0%,100%,5%,95%{box-shadow:0 -.83em 0 -.4em,0 -.83em 0 -.42em,0 -.83em 0 -.44em,0 -.83em 0 -.46em,0 -.83em 0 -.477em}10%,59%{box-shadow:0 -.83em 0 -.4em,-.087em -.825em 0 -.42em,-.173em -.812em 0 -.44em,-.256em -.789em 0 -.46em,-.297em -.775em 0 -.477em}20%{box-shadow:0 -.83em 0 -.4em,-.338em -.758em 0 -.42em,-.555em -.617em 0 -.44em,-.671em -.488em 0 -.46em,-.749em -.34em 0 -.477em}38%{box-shadow:0 -.83em 0 -.4em,-.377em -.74em 0 -.42em,-.645em -.522em 0 -.44em,-.775em -.297em 0 -.46em,-.82em -.09em 0 -.477em}}@-webkit-keyframes round{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes round{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
                    },] },
        ];
        /** @nocollapse */
        WidgetComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },
                { type: core.ElementRef, },
                { type: core.NgZone, },
                { type: BootstrapService, },
            ];
        };
        WidgetComponent.propDecorators = {
            "widget": [{ type: core.Input },],
            "widgetMoving": [{ type: core.Output },],
            "widgetDropped": [{ type: core.Output },],
            "widgetHovered": [{ type: core.Output },],
            "widgetUnhovered": [{ type: core.Output },],
            "resizeStarted": [{ type: core.Output },],
            "close": [{ type: core.Output },],
            "fullscreen": [{ type: core.Output },],
        };
        return WidgetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WidgetControlsComponent = (function () {
        function WidgetControlsComponent(elementRef) {
            this.elementRef = elementRef;
            this.close = new core.EventEmitter();
            this.fullscreen = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.classList.add('col-12');
            };
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // We'll set the width of the title based on the width left by the buttons.
                // This will make the overflow on the title work properly. But we won't
                // do this until the stack is empty. Without the setTime, the first page load
                // after a Hard Reload does not calculate the offsetWidths correctly.
                setTimeout(function () {
                    var /** @type {?} */ containerElement = _this.elementRef.nativeElement.children[0];
                    var /** @type {?} */ controlsWidth = containerElement.offsetWidth;
                    var /** @type {?} */ buttonsElement = containerElement.querySelector('.buttons');
                    var /** @type {?} */ buttonsWidth = buttonsElement.offsetWidth;
                    var /** @type {?} */ padding = 8;
                    var /** @type {?} */ titleElement = containerElement.querySelector('.title');
                    titleElement.style.width = (100 - padding - (buttonsWidth / controlsWidth * 100)) + '%';
                }, 0);
            };
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.onCollapseClick = /**
         * @return {?}
         */
            function () {
                this.widget.collapse();
            };
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.onExpandClick = /**
         * @return {?}
         */
            function () {
                this.widget.expand();
            };
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.onCloseClick = /**
         * @return {?}
         */
            function () {
                this.close.emit();
            };
        /**
         * @return {?}
         */
        WidgetControlsComponent.prototype.onToggleFullScreenClick = /**
         * @return {?}
         */
            function () {
                this.fullscreen.emit();
            };
        WidgetControlsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widget-controls',
                        template: "<div>\n  <div class='title'>{{widget.title}}</div>\n  <div *ngIf='!widget.isFullScreen; else fullscreen' class='buttons no-highlighting not-grabbable'>\n    <span *ngIf='widget.isExpanded; else expand' class='material-icons' (click)='onCollapseClick()'>expand_less</span>\n    <ng-template #expand>\n      <span class='material-icons' (click)='onExpandClick()'>expand_more</span>\n    </ng-template>\n    <span class='material-icons d-none d-sm-inline' (click)='onToggleFullScreenClick()'>fullscreen</span>\n    <span class='material-icons' (click)='onCloseClick()'>close</span>\n  </div>\n  <ng-template #fullscreen>\n    <div class='material-icons buttons no-highlighting not-grabbable' (click)='onToggleFullScreenClick()'>fullscreen_exit</div>\n  </ng-template>\n</div>",
                        styles: [":host{display:block;cursor:-webkit-grab;cursor:grab;overflow:hidden;margin-bottom:15px}:host>div>.title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host>div>div:first-of-type{float:left}:host>div>div:last-of-type{float:right;cursor:default}.fullscreen :host{cursor:default}"]
                    },] },
        ];
        /** @nocollapse */
        WidgetControlsComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        WidgetControlsComponent.propDecorators = {
            "widget": [{ type: core.Input },],
            "close": [{ type: core.Output },],
            "fullscreen": [{ type: core.Output },],
        };
        return WidgetControlsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LibraryComponent = (function () {
        function LibraryComponent(elementRef) {
            this.elementRef = elementRef;
            this.done = new core.EventEmitter();
            this.renderWidget = new core.EventEmitter();
            this.derenderWidget = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        LibraryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        LibraryComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.classList.add('card', 'card-row', 'popup');
            };
        /**
         * @return {?}
         */
        LibraryComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ width = this.elementRef.nativeElement
                    .getBoundingClientRect()
                    .width;
                this.elementRef.nativeElement.style.top = (this.library.yPosition - 20) + 'px';
                this.elementRef.nativeElement.style.left = (this.library.xPosition - width + 20) + 'px';
            };
        /**
         * @return {?}
         */
        LibraryComponent.prototype.onDoneClick = /**
         * @return {?}
         */
            function () {
                this.done.emit();
            };
        /**
         * @param {?} libraryWidget
         * @return {?}
         */
        LibraryComponent.prototype.onCheckboxChange = /**
         * @param {?} libraryWidget
         * @return {?}
         */
            function (libraryWidget) {
                if (libraryWidget.isRendered) {
                    this.library.derenderWidget(libraryWidget.widget);
                    this.derenderWidget.emit(libraryWidget.widget);
                }
                else {
                    this.library.renderWidget(libraryWidget.widget);
                    this.renderWidget.emit(libraryWidget.widget);
                }
            };
        LibraryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widgets-library',
                        template: "<div class='title'>Library</div>\n<ul class='list-group'>\n  <li *ngFor='let libraryWidget of library.widgets' class='list-group-item'>\n    <span>{{libraryWidget.widget.title}}</span>\n    <!-- <span *ngIf='libraryWidget.isRendered; else not' class='material-icons' (click)='onRemoveWidget(libraryWidget.widget)'>remove_circle_outline</span>\n    <ng-template #not>\n      <span class='material-icons' (click)='onAddWidget(libraryWidget.widget)'>add_circle_outline</span>\n    </ng-template> -->\n    <!-- <div class='pretty p-switch p-fill'>\n      <input id='libraryWidget.widget.id' type='checkbox' [checked]='libraryWidget.isRendered' (change)='onCheckboxChange(libraryWidget)' />\n    </div> -->\n    <span class='pretty p-switch p-fill'>\n      <input type='checkbox' [checked]='libraryWidget.isRendered' (change)='onCheckboxChange(libraryWidget)' />\n      <div class='state p-success'>\n        <label></label>\n      </div>\n    </span>\n  </li>\n</ul>\n<div class='button-container'>\n  <button class='btn btn-primary' (click)='onDoneClick()'>Done</button>\n</div>",
                        styles: [":host{position:absolute;z-index:100;background:#fff}ul{list-style:none;padding:0;margin-bottom:20px}ul>li{overflow:hidden;text-overflow:ellipsis}ul>li>span:first-of-type{float:left;margin-right:30px}ul>li>span:last-of-type{float:right;margin-top:5px}label:after{margin-top:-1px}.pretty input{width:200%}"]
                    },] },
        ];
        /** @nocollapse */
        LibraryComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        LibraryComponent.propDecorators = {
            "library": [{ type: core.Input },],
            "done": [{ type: core.Output },],
            "renderWidget": [{ type: core.Output },],
            "derenderWidget": [{ type: core.Output },],
        };
        return LibraryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DropTargetComponent = (function () {
        function DropTargetComponent(elementRef, bootstrapService) {
            this.elementRef = elementRef;
            this.bootstrapService = bootstrapService;
        }
        /**
         * @return {?}
         */
        DropTargetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        DropTargetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.style.height = this.height + 'px';
                var /** @type {?} */ classes = this.bootstrapService.getClasses(this.dropTarget);
                (_a = this.elementRef.nativeElement.classList).add.apply(_a, __spread(classes));
                var _a;
            };
        DropTargetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widget-drop-target',
                        template: "<div class='card card-row'></div>",
                        styles: [":host>div{background:#d3d3d3;height:100%;margin:0}"]
                    },] },
        ];
        /** @nocollapse */
        DropTargetComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: BootstrapService, },
            ];
        };
        DropTargetComponent.propDecorators = {
            "dropTarget": [{ type: core.Input },],
            "height": [{ type: core.Input },],
        };
        return DropTargetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ResizeGuidelineComponent = (function () {
        function ResizeGuidelineComponent(elementRef, bootstrapService) {
            this.elementRef = elementRef;
            this.bootstrapService = bootstrapService;
            this.resized = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ResizeGuidelineComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        ResizeGuidelineComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ thisElement = this.elementRef.nativeElement;
                thisElement.classList.add(this.bootstrapService.columnPrefix + this.guideline.widthOfGuideline);
                thisElement.style.top = (this.guideline.top + window.scrollY) + 'px';
                thisElement.style.height = this.guideline.height + 'px';
            };
        /**
         * @return {?}
         */
        ResizeGuidelineComponent.prototype.onHover = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ widget = this.guideline.widget;
                if (this.guideline.targetWidthOfWidget !== this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget))) {
                    this.bootstrapService.resize(this.guideline.widget, this.guideline.targetWidthOfWidget);
                    this.resized.emit(this.guideline.widget);
                }
            };
        ResizeGuidelineComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widget-resize-guideline',
                        template: "<div (mouseenter)='onHover()' (touchenter)='onHover()'></div>",
                        styles: [":host{position:absolute}:host>div{border-right:1px dotted green;height:100%}"]
                    },] },
        ];
        /** @nocollapse */
        ResizeGuidelineComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: BootstrapService, },
            ];
        };
        ResizeGuidelineComponent.propDecorators = {
            "guideline": [{ type: core.Input },],
            "resized": [{ type: core.Output },],
        };
        return ResizeGuidelineComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LayoutEditorComponent = (function () {
        function LayoutEditorComponent(elementRef) {
            this.elementRef = elementRef;
            this.done = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        LayoutEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        LayoutEditorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.classList.add('card', 'card-row', 'col-8', 'col-sm-6', 'popup');
            };
        /**
         * @return {?}
         */
        LayoutEditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ width = this.elementRef.nativeElement
                    .getBoundingClientRect()
                    .width;
                this.elementRef.nativeElement.style.top = (this.layoutEditor.yPosition - 20) + 'px';
                this.elementRef.nativeElement.style.left = (this.layoutEditor.xPosition - width + 20) + 'px';
            };
        /**
         * @return {?}
         */
        LayoutEditorComponent.prototype.onDoneClick = /**
         * @return {?}
         */
            function () {
                this.done.emit();
            };
        LayoutEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-widgets-layout-editor',
                        template: "<div class='title'>Layout Editor</div>\n<p>\n  <b>Coming Soon!</b>\n</p>\n<p>\n  This will allow some users to edit pages and make custom layouts targeted for specific roles in your organization.\n</p>\n<p>\n  For now, changes made will not be saved.\n</p>\n<div class='button-container'>\n  <button class='btn btn-primary' (click)='onDoneClick()'>Done</button>\n</div>",
                        styles: [":host{position:absolute;z-index:100;background:#fff}"]
                    },] },
        ];
        /** @nocollapse */
        LayoutEditorComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        LayoutEditorComponent.propDecorators = {
            "layoutEditor": [{ type: core.Input },],
            "done": [{ type: core.Output },],
        };
        return LayoutEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DashboardModule = (function () {
        function DashboardModule() {
        }
        /**
         * @param {?} WidgetsService
         * @return {?}
         */
        DashboardModule.forRoot = /**
         * @param {?} WidgetsService
         * @return {?}
         */
            function (WidgetsService) {
                return {
                    ngModule: DashboardModule,
                    providers: [
                        { provide: 'widgetsService', useClass: WidgetsService }
                    ]
                };
            };
        DashboardModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DashboardComponent,
                            PanelComponent,
                            SpacerComponent,
                            PanelControlsComponent,
                            WidgetComponent,
                            WidgetControlsComponent,
                            LibraryComponent,
                            DropTargetComponent,
                            ResizeGuidelineComponent,
                            LayoutEditorComponent
                        ],
                        imports: [platformBrowser.BrowserModule],
                        exports: [
                            DashboardComponent,
                            PanelComponent,
                            SpacerComponent,
                            PanelControlsComponent,
                            WidgetComponent,
                            WidgetControlsComponent,
                            LibraryComponent,
                            DropTargetComponent,
                            ResizeGuidelineComponent,
                            LayoutEditorComponent
                        ],
                        providers: [BootstrapService],
                        bootstrap: [DashboardComponent]
                    },] },
        ];
        return DashboardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Widget = (function () {
        function Widget(id, title, currentWidth, minimumWidth, initialHeight, render, isHidden) {
            this.currentWidth = currentWidth;
            this.minimumWidth = minimumWidth;
            this.isExpanded = true;
            this.isFullScreen = false;
            this.id = id;
            this.title = title;
            this.initialHeight = initialHeight;
            this.render = ((render)).bind(this);
            this.isHidden = isHidden;
            this.currentWidth = currentWidth;
            // This uses Object.assign to create a new object from the one passed in.
            // This is to prevent the instantiator from passing in one object to both
            // currentWidth and minimumWidth and then having that object ref assigned
            // to both properties. If that were to happen, then updating the
            // currentWidth would also update the minimumWidth. The minimumWidth
            // should never be changed once set.
            this.minimumWidth = Object.assign({}, minimumWidth);
            Object.freeze(this.minimumWidth);
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        Widget.createAvailableWidget = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var id = _a.id, title = _a.title, width = _a.width, initialHeight = _a.initialHeight, render = _a.render;
                return new Widget(id, title, width, width, initialHeight, render, false);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        Widget.createRenderedWidget = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var id = _a.id, title = _a.title, currentWidth = _a.currentWidth, minimumWidth = _a.minimumWidth, initialHeight = _a.initialHeight, render = _a.render;
                return new Widget(id, title, currentWidth, minimumWidth, initialHeight, render, false);
            };
        /**
         * @param {?} breakpoint
         * @return {?}
         */
        Widget.prototype.getCurrentWidth = /**
         * @param {?} breakpoint
         * @return {?}
         */
            function (breakpoint) {
                return this.currentWidth[breakpoint];
            };
        /**
         * @return {?}
         */
        Widget.prototype.getCurrentWidths = /**
         * @return {?}
         */
            function () {
                return this.currentWidth;
            };
        /**
         * @param {?} breakpoint
         * @return {?}
         */
        Widget.prototype.getMinimumWidth = /**
         * @param {?} breakpoint
         * @return {?}
         */
            function (breakpoint) {
                return this.minimumWidth[breakpoint];
            };
        /**
         * @param {?} breakpoint
         * @param {?} width
         * @return {?}
         */
        Widget.prototype.makeFullWidth = /**
         * @param {?} breakpoint
         * @param {?} width
         * @return {?}
         */
            function (breakpoint, width) {
                if (this.currentWidth[breakpoint]) {
                    this.currentWidth[breakpoint] = width;
                }
            };
        /**
         * @param {?} breakpoint
         * @param {?} width
         * @return {?}
         */
        Widget.prototype.resize = /**
         * @param {?} breakpoint
         * @param {?} width
         * @return {?}
         */
            function (breakpoint, width) {
                this.currentWidth[breakpoint] = width;
            };
        /**
         * @return {?}
         */
        Widget.prototype.expand = /**
         * @return {?}
         */
            function () {
                this.isExpanded = true;
            };
        /**
         * @return {?}
         */
        Widget.prototype.collapse = /**
         * @return {?}
         */
            function () {
                this.isExpanded = false;
            };
        /**
         * @return {?}
         */
        Widget.prototype.toggleFullScreen = /**
         * @return {?}
         */
            function () {
                this.isFullScreen = !this.isFullScreen;
            };
        /**
         * @return {?}
         */
        Widget.prototype.clone = /**
         * @return {?}
         */
            function () {
                return new Widget(this.id, this.title, this.currentWidth, this.minimumWidth, this.initialHeight, this.render, this.isHidden);
            };
        return Widget;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.DashboardModule = DashboardModule;
    exports.Widget = Widget;
    exports.ɵa = DashboardComponent;
    exports.ɵc = BootstrapService;
    exports.ɵi = DropTargetComponent;
    exports.ɵk = LayoutEditorComponent;
    exports.ɵh = LibraryComponent;
    exports.ɵe = PanelControlsComponent;
    exports.ɵb = PanelComponent;
    exports.ɵj = ResizeGuidelineComponent;
    exports.ɵd = SpacerComponent;
    exports.ɵg = WidgetControlsComponent;
    exports.ɵf = WidgetComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWhlYWx0aC13aWRnZXQtZGFzaGJvYXJkLW5nNS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1L3NyYy9kYXNoYm9hcmQvd2lkZ2V0cy9ib290c3RyYXAuc2VydmljZS50cyIsIm5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvc3JjL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnRzIiwibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS9zcmMvZGFzaGJvYXJkL3dpZGdldHMvc3BhY2VyL3NwYWNlci5jb21wb25lbnQudHMiLCJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1L3NyYy9kYXNoYm9hcmQvd2lkZ2V0cy9saWJyYXJ5Lm1vZGVsLnRzIiwibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS9zcmMvZGFzaGJvYXJkL3dpZGdldHMvbGF5b3V0LWVkaXRvci5tb2RlbC50cyIsIm5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvc3JjL2Rhc2hib2FyZC93aWRnZXRzL3BhbmVsL3BhbmVsLmNvbXBvbmVudC50cyIsIm5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvc3JjL2Rhc2hib2FyZC93aWRnZXRzL3BhbmVsLWNvbnRyb2xzL3BhbmVsLWNvbnRyb2xzLmNvbXBvbmVudC50cyIsbnVsbCwibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS9zcmMvZGFzaGJvYXJkL3dpZGdldHMvd2lkZ2V0L3dpZGdldC5jb21wb25lbnQudHMiLCJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1L3NyYy9kYXNoYm9hcmQvd2lkZ2V0cy93aWRnZXQtY29udHJvbHMvd2lkZ2V0LWNvbnRyb2xzLmNvbXBvbmVudC50cyIsIm5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvc3JjL2Rhc2hib2FyZC93aWRnZXRzL2xpYnJhcnkvbGlicmFyeS5jb21wb25lbnQudHMiLCJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1L3NyYy9kYXNoYm9hcmQvd2lkZ2V0cy9kcm9wLXRhcmdldC9kcm9wLXRhcmdldC5jb21wb25lbnQudHMiLCJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1L3NyYy9kYXNoYm9hcmQvd2lkZ2V0cy9yZXNpemUtZ3VpZGVsaW5lL3Jlc2l6ZS1ndWlkZWxpbmUuY29tcG9uZW50LnRzIiwibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS9zcmMvZGFzaGJvYXJkL3dpZGdldHMvbGF5b3V0LWVkaXRvci9sYXlvdXQtZWRpdG9yLmNvbXBvbmVudC50cyIsIm5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvc3JjL2Rhc2hib2FyZC9kYXNoYm9hcmQubW9kdWxlLnRzIiwibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS9zcmMvZGFzaGJvYXJkL3dpZGdldHMvd2lkZ2V0Lm1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi93aWRnZXQubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQm9vdHN0cmFwU2VydmljZSB7XHJcbiAgcmVhZG9ubHkgbWF4Q29sdW1ucyA9IDEyO1xyXG4gIHJlYWRvbmx5IGNvbHVtblByZWZpeCA9ICdjb2wtJztcclxuXHJcbiAgLy8gVGhlc2UgbXVzdCByZW1haW4gaW4gb3JkZXIgZnJvbSBsYXJnZXN0IHRvIHNtYWxsZXN0LlxyXG4gIHByaXZhdGUgcmVhZG9ubHkgYnJlYWtwb2ludHMgPSB7XHJcbiAgICB4bDogJ2QteGwtbm9uZScsXHJcbiAgICBsZzogJ2QtbGctbm9uZScsXHJcbiAgICBtZDogJ2QtbWQtbm9uZScsXHJcbiAgICBzbTogJ2Qtc20tbm9uZScsXHJcbiAgICB4czogJ2Qtbm9uZSdcclxuICB9O1xyXG4gIHByaXZhdGUgY3VycmVudEJyZWFrcG9pbnQ6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgLy8gQWRkIGFuIGVsZW1lbnQgdG8gdGhlIERPTSBhbmQgc2V0IGl0J3MgY2xhc3MgdG8gcHJldmVudCBpdCBmcm9tIGRpc3BsYXlpbmdcclxuICAvLyBhdCBlYWNoIGJyZWFrcG9pbnQgdW50aWwgaXQgaXMsIGluIGZhY3QsIG5vdCBkaXNwbGF5ZWQuIFRoYXQgaXMgdGhlIHNpemUgb2ZcclxuICAvLyB0aGUgc2NyZWVuLlxyXG4gIHByaXZhdGUgZ2V0Q3VycmVudEJyZWFrcG9pbnQoKTogc3RyaW5nIHtcclxuICAgIGxldCBicmVha3BvaW50ID0gJyc7XHJcblxyXG4gICAgY29uc3QgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBtYXJrZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtYXJrZXIpO1xyXG4gICAgY29uc3QgYnJlYWtwb2ludEtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmJyZWFrcG9pbnRzKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJyZWFrcG9pbnRLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGJyZWFrcG9pbnQgPSBicmVha3BvaW50S2V5c1tpXTtcclxuICAgICAgbWFya2VyLmNsYXNzTGlzdC5hZGQodGhpcy5icmVha3BvaW50c1ticmVha3BvaW50XSk7XHJcbiAgICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobWFya2VyKTtcclxuICAgICAgaWYgKHN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbWFya2VyLnJlbW92ZSgpO1xyXG4gICAgcmV0dXJuIGJyZWFrcG9pbnQ7XHJcbiAgfVxyXG5cclxuICBoYXNCcmVha3BvaW50Q2hhbmdlZCgpIHtcclxuICAgIGNvbnN0IGJyZWFrcG9pbnQ6IHN0cmluZyA9IHRoaXMuZ2V0Q3VycmVudEJyZWFrcG9pbnQoKTtcclxuICAgIGlmIChicmVha3BvaW50ICE9PSB0aGlzLmN1cnJlbnRCcmVha3BvaW50KSB7XHJcbiAgICAgIHRoaXMuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoKGdldFdpZHRoOiAoc3RyaW5nKSA9PiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IGJyZWFrcG9pbnQgPSB0aGlzLmdldEN1cnJlbnRCcmVha3BvaW50KCk7XHJcbiAgICBsZXQgd2lkdGggPSBnZXRXaWR0aChicmVha3BvaW50KTtcclxuICAgIGlmICghd2lkdGgpIHtcclxuICAgICAgLy8gTG9vayBmb3IgdGhlIGxhcmdlc3QgYnJlYWtwb2ludCB3aXRoIGEgd2lkdGggdGhhdCBpcyBzbWFsbGVyIHRoYW4gdGhlIGN1cnJlbnQgYnJlYWtwb2ludC5cclxuICAgICAgY29uc3Qgc21hbGxlckJyZWFrcG9pbnRzID0gdGhpcy5nZXRTbWFsbGVyQnJlYWtwb2ludHMoYnJlYWtwb2ludCk7XHJcbiAgICAgIHdoaWxlICghd2lkdGggJiYgc21hbGxlckJyZWFrcG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGJyZWFrcG9pbnQgPSBzbWFsbGVyQnJlYWtwb2ludHMuc2hpZnQoKTtcclxuICAgICAgICB3aWR0aCA9IGdldFdpZHRoKGJyZWFrcG9pbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2lkdGg7XHJcbiAgfVxyXG5cclxuICBtYWtlRnVsbFdpZHRoKG1ha2VGdWxsV2lkdGg6IChzdHJpbmcsIG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgY29uc3QgYnJlYWtwb2ludCA9IHRoaXMuZ2V0Q3VycmVudEJyZWFrcG9pbnQoKTtcclxuICAgIC8vIE1ha2UgZWFjaCBicmVha3BvaW50IGF0IHRoZSBjdXJyZW50IHNpemUgYW5kIHNtYWxsZXIgdGhlIGZ1bGwgd2lkdGggb2YgYSByb3cuXHJcbiAgICB0aGlzLmdldFNtYWxsZXJCcmVha3BvaW50cyhicmVha3BvaW50KVxyXG4gICAgICAuY29uY2F0KFticmVha3BvaW50XSlcclxuICAgICAgLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgbWFrZUZ1bGxXaWR0aCh4LCB0aGlzLm1heENvbHVtbnMpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlc2l6ZSh3aWRnZXQ6IFdpZGdldCwgdGFyZ2V0V2lkdGhPZldpZGdldDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBsZXQgYnJlYWtwb2ludCA9IHRoaXMuZ2V0Q3VycmVudEJyZWFrcG9pbnQoKTtcclxuICAgIGxldCB3aWR0aCA9IHdpZGdldC5nZXRDdXJyZW50V2lkdGgoYnJlYWtwb2ludCk7XHJcbiAgICBpZiAoIXdpZHRoKSB7XHJcbiAgICAgIC8vIExvb2sgZm9yIHRoZSBsYXJnZXN0IGJyZWFrcG9pbnQgd2l0aCBhIHdpZHRoIHRoYXQgaXMgc21hbGxlciB0aGFuIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXHJcbiAgICAgIGNvbnN0IHNtYWxsZXJCcmVha3BvaW50cyA9IHRoaXMuZ2V0U21hbGxlckJyZWFrcG9pbnRzKGJyZWFrcG9pbnQpO1xyXG4gICAgICB3aGlsZSAoIXdpZHRoICYmIHNtYWxsZXJCcmVha3BvaW50cy5sZW5ndGgpIHtcclxuICAgICAgICBicmVha3BvaW50ID0gc21hbGxlckJyZWFrcG9pbnRzLnNoaWZ0KCk7XHJcbiAgICAgICAgd2lkdGggPSB3aWRnZXQuZ2V0Q3VycmVudFdpZHRoKGJyZWFrcG9pbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB3aWRnZXQucmVzaXplKGJyZWFrcG9pbnQsIHRhcmdldFdpZHRoT2ZXaWRnZXQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2xhc3Nlcyh3aWRnZXQ6IFdpZGdldCk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHdpZHRocyA9IHdpZGdldC5nZXRDdXJyZW50V2lkdGhzKCk7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMod2lkdGhzKVxyXG4gICAgICAubWFwKHggPT4ge1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gd2lkdGhzW3hdO1xyXG4gICAgICAgIGlmICh4ID09PSAneHMnKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ2NvbC0nICsgd2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnY29sLScgKyB4ICsgJy0nICsgd2lkdGg7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRTbWFsbGVyQnJlYWtwb2ludHMoYnJlYWtwb2ludCk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IGFsbEJyZWFrcG9pbnRzID0gT2JqZWN0LmtleXModGhpcy5icmVha3BvaW50cyk7XHJcbiAgICBjb25zdCBzbWFsbGVyQnJlYWtwb2ludHMgPSBhbGxCcmVha3BvaW50cy5zbGljZShcclxuICAgICAgYWxsQnJlYWtwb2ludHMuaW5kZXhPZihicmVha3BvaW50KSArIDEsXHJcbiAgICAgIGFsbEJyZWFrcG9pbnRzLmxlbmd0aCk7XHJcbiAgICByZXR1cm4gc21hbGxlckJyZWFrcG9pbnRzO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWRhc2hib2FyZCcsXHJcbiAgdGVtcGxhdGU6IGA8YXBwLXdpZGdldHMtcGFuZWwgY2xhc3M9J3Jvdyc+PC9hcHAtd2lkZ2V0cy1wYW5lbD5gLFxyXG4gIHN0eWxlczogW2BgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGFzaGJvYXJkQ29tcG9uZW50IHsgfVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRWxlbWVudFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC13aWRnZXRzLXBhbmVsLXNwYWNlcicsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IChtb3VzZWVudGVyKT0nb25Nb3VzZUVudGVyKCknICh0b3VjaGVudGVyKT0nb25Ub3VjaEVudGVyKCknIChtb3VzZWxlYXZlKT0nb25Nb3VzZUxlYXZlKCknICh0b3VjaGxlYXZlKT0nb25Ub3VjaExlYXZlKCknPlxyXG48L2Rpdj5gLFxyXG4gIHN0eWxlczogW2A6aG9zdHtoZWlnaHQ6MzBweH06aG9zdD5kaXZ7aGVpZ2h0OjEwMCV9YF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFNwYWNlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgQElucHV0KCkgc3BhY2VyOiBvYmplY3Q7XHJcbiAgQE91dHB1dCgpIHNwYWNlckhvdmVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFNwYWNlckNvbXBvbmVudD4oKTtcclxuICBAT3V0cHV0KCkgc3BhY2VyVW5ob3ZlcmVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2wtMTInKTtcclxuICB9XHJcblxyXG4gIG9uTW91c2VFbnRlcigpIHtcclxuICAgIHRoaXMuc3BhY2VySG92ZXJlZC5lbWl0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgb25Ub3VjaEVudGVyKCkge1xyXG4gICAgdGhpcy5zcGFjZXJIb3ZlcmVkLmVtaXQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTGVhdmUoKSB7XHJcbiAgICB0aGlzLnNwYWNlclVuaG92ZXJlZC5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBvblRvdWNoTGVhdmUoKSB7XHJcbiAgICB0aGlzLnNwYWNlclVuaG92ZXJlZC5lbWl0KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFdpZGdldCB9IGZyb20gJy4vd2lkZ2V0Lm1vZGVsJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxpYnJhcnlXaWRnZXQge1xyXG4gIGlzUmVuZGVyZWQ6IGJvb2xlYW47XHJcbiAgd2lkZ2V0OiBXaWRnZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaWJyYXJ5IHtcclxuICBpc0Rpc3BsYXllZCA9IGZhbHNlO1xyXG4gIHhQb3NpdGlvbjogbnVtYmVyO1xyXG4gIHlQb3NpdGlvbjogbnVtYmVyO1xyXG4gIHdpZGdldHM6IElMaWJyYXJ5V2lkZ2V0W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZWRXaWRnZXRzOiBXaWRnZXRbXSwgcHJpdmF0ZSBhdmFpbGFibGVXaWRnZXRzOiBXaWRnZXRbXSkge1xyXG4gICAgdGhpcy5idWlsZExpYnJhcnkoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNXaWRnZXRSZW5kZXJlZCh3aWRnZXQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnJlbmRlcmVkV2lkZ2V0c1xyXG4gICAgICAubWFwKHJlbmRlcmVkV2lkZ2V0ID0+IHJlbmRlcmVkV2lkZ2V0LmlkKVxyXG4gICAgICAuaW5kZXhPZih3aWRnZXQuaWQpID49IDA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkTGlicmFyeSgpIHtcclxuICAgIHRoaXMud2lkZ2V0cyA9IHRoaXMuYXZhaWxhYmxlV2lkZ2V0cy5tYXAod2lkZ2V0ID0+IHtcclxuICAgICAgY29uc3QgaXNSZW5kZXJlZCA9IHRoaXMuaXNXaWRnZXRSZW5kZXJlZCh3aWRnZXQpO1xyXG4gICAgICByZXR1cm4geyBpc1JlbmRlcmVkLCB3aWRnZXQgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZWRpdCh4UG9zaXRpb246IG51bWJlciwgeVBvc2l0aW9uOiBudW1iZXIpIHtcclxuICAgIHRoaXMuaXNEaXNwbGF5ZWQgPSB0cnVlO1xyXG4gICAgdGhpcy54UG9zaXRpb24gPSB4UG9zaXRpb247XHJcbiAgICB0aGlzLnlQb3NpdGlvbiA9IHlQb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICB0aGlzLmlzRGlzcGxheWVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnhQb3NpdGlvbiA9IG51bGw7XHJcbiAgICB0aGlzLnlQb3NpdGlvbiA9IG51bGw7XHJcbiAgfVxyXG5cclxuICByZW5kZXJXaWRnZXQod2lkZ2V0OiBXaWRnZXQpOiB2b2lkIHtcclxuICAgIHRoaXMucmVuZGVyZWRXaWRnZXRzLnB1c2god2lkZ2V0KTtcclxuICAgIHRoaXMuYnVpbGRMaWJyYXJ5KCk7XHJcbiAgfVxyXG5cclxuICBkZXJlbmRlcldpZGdldCh3aWRnZXQ6IFdpZGdldCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZW5kZXJlZFdpZGdldHNcclxuICAgICAgLmZpbHRlcih4ID0+IHguaWQgPT09IHdpZGdldC5pZClcclxuICAgICAgLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlZFdpZGdldHMuc3BsaWNlKHRoaXMucmVuZGVyZWRXaWRnZXRzLmluZGV4T2YoeCksIDEpO1xyXG4gICAgICB9KTtcclxuICAgIHRoaXMuYnVpbGRMaWJyYXJ5KCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBMYXlvdXRFZGl0b3Ige1xyXG4gIGlzRGlzcGxheWVkID0gZmFsc2U7XHJcbiAgeFBvc2l0aW9uOiBudW1iZXI7XHJcbiAgeVBvc2l0aW9uOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIGVkaXQoeFBvc2l0aW9uOiBudW1iZXIsIHlQb3NpdGlvbjogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmlzRGlzcGxheWVkID0gdHJ1ZTtcclxuICAgIHRoaXMueFBvc2l0aW9uID0geFBvc2l0aW9uO1xyXG4gICAgdGhpcy55UG9zaXRpb24gPSB5UG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy5pc0Rpc3BsYXllZCA9IGZhbHNlO1xyXG4gICAgdGhpcy54UG9zaXRpb24gPSBudWxsO1xyXG4gICAgdGhpcy55UG9zaXRpb24gPSBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0LCBIb3N0TGlzdGVuZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvb2YnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9kZWxheSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBXaWRnZXQgfSBmcm9tICcuLi93aWRnZXQubW9kZWwnO1xuaW1wb3J0IHsgV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi4vd2lkZ2V0L3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BhY2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vc3BhY2VyL3NwYWNlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGlicmFyeSB9IGZyb20gJy4uL2xpYnJhcnkubW9kZWwnO1xuaW1wb3J0IHsgTGF5b3V0RWRpdG9yIH0gZnJvbSAnLi4vbGF5b3V0LWVkaXRvci5tb2RlbCc7XG5pbXBvcnQgeyBCb290c3RyYXBTZXJ2aWNlIH0gZnJvbSAnLi4vYm9vdHN0cmFwLnNlcnZpY2UnO1xuaW1wb3J0IHsgSVdpZGdldHNTZXJ2aWNlIH0gZnJvbSAnLi4vd2lkZ2V0cy5zZXJ2aWNlLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC13aWRnZXRzLXBhbmVsJyxcbiAgdGVtcGxhdGU6IGA8YXBwLXdpZGdldHMtcGFuZWwtY29udHJvbHMgKGVkaXRMaWJyYXJ5KT0nb25FZGl0TGlicmFyeSgkZXZlbnQpJyAoZWRpdExheW91dCk9J29uRWRpdExheW91dCgkZXZlbnQpJz48L2FwcC13aWRnZXRzLXBhbmVsLWNvbnRyb2xzPlxyXG48YXBwLXdpZGdldHMtbGlicmFyeSAqbmdJZj0nbGlicmFyeS5pc0Rpc3BsYXllZCcgW2xpYnJhcnldPSdsaWJyYXJ5JyAoZG9uZSk9J29uSGlkZUxpYnJhcnkoKScgKHJlbmRlcldpZGdldCk9J29uUmVuZGVyV2lkZ2V0KCRldmVudCknIChkZXJlbmRlcldpZGdldCk9J29uRGVyZW5kZXJXaWRnZXQoJGV2ZW50KSc+PC9hcHAtd2lkZ2V0cy1saWJyYXJ5PlxyXG48YXBwLXdpZGdldHMtbGF5b3V0LWVkaXRvciAqbmdJZj0nbGF5b3V0RWRpdG9yLmlzRGlzcGxheWVkJyBbbGF5b3V0RWRpdG9yXT0nbGF5b3V0RWRpdG9yJyAoZG9uZSk9J29uSGlkZUxheW91dEVkaXRvcigpJz48L2FwcC13aWRnZXRzLWxheW91dC1lZGl0b3I+XHJcbjxuZy1jb250YWluZXIgKm5nRm9yPSdsZXQgaXRlbSBvZiBpdGVtcyc+XHJcbiAgPGFwcC13aWRnZXQgKm5nSWY9J2l0ZW0ud2lkZ2V0OyBlbHNlIGRyb3AnIFt3aWRnZXRdPSdpdGVtLndpZGdldCcgKHdpZGdldE1vdmluZyk9J29uV2lkZ2V0TW92ZSgkZXZlbnQpJyAod2lkZ2V0RHJvcHBlZCk9J29uV2lkZ2V0RHJvcHBlZCgpJyAod2lkZ2V0SG92ZXJlZCk9J29uV2lkZ2V0SG92ZXJlZCgkZXZlbnQpJyAod2lkZ2V0VW5ob3ZlcmVkKT0nb25XaWRnZXRVbmhvdmVyZWQoKScgKHJlc2l6ZVN0YXJ0ZWQpPSdvbldpZGdldFJlc2l6ZVN0YXJ0ZWQoJGV2ZW50KSdcclxuICAgIChjbG9zZSk9J29uV2lkZ2V0Q2xvc2VDbGljaygkZXZlbnQpJyAoZnVsbHNjcmVlbik9J29uV2lkZ2V0VG9nZ2xlRnVsbFNjcmVlbkNsaWNrKCknPjwvYXBwLXdpZGdldD5cclxuICA8bmctdGVtcGxhdGUgI2Ryb3A+XHJcbiAgICA8YXBwLXdpZGdldC1kcm9wLXRhcmdldCAqbmdJZj0naXRlbS5kcm9wVGFyZ2V0OyBlbHNlIHNwYWNlcicgW2Ryb3BUYXJnZXRdPSdpdGVtLmRyb3BUYXJnZXQnIFtoZWlnaHRdPSdpdGVtLmhlaWdodCc+PC9hcHAtd2lkZ2V0LWRyb3AtdGFyZ2V0PlxyXG4gICAgPG5nLXRlbXBsYXRlICNzcGFjZXI+XHJcbiAgICAgIDxhcHAtd2lkZ2V0cy1wYW5lbC1zcGFjZXIgW3NwYWNlcl09J2l0ZW0uc3BhY2VyJyAoc3BhY2VySG92ZXJlZCk9J29uU3BhY2VySG92ZXJlZCgkZXZlbnQpJyAoc3BhY2VyVW5ob3ZlcmVkKT0nb25TcGFjZXJVbmhvdmVyZWQoKSc+PC9hcHAtd2lkZ2V0cy1wYW5lbC1zcGFjZXI+XHJcbiAgICA8L25nLXRlbXBsYXRlPlxyXG4gIDwvbmctdGVtcGxhdGU+XHJcbjwvbmctY29udGFpbmVyPlxyXG48YXBwLXdpZGdldC1yZXNpemUtZ3VpZGVsaW5lICpuZ0Zvcj0nbGV0IGd1aWRlbGluZSBvZiByZXNpemVHdWlkZWxpbmVzJyBbZ3VpZGVsaW5lXT0nZ3VpZGVsaW5lJyAocmVzaXplZCk9J29uV2lkZ2V0UmVzaXplZCgkZXZlbnQpJz48L2FwcC13aWRnZXQtcmVzaXplLWd1aWRlbGluZT5gLFxuICBzdHlsZXM6IFtgLm1vdmluZy13aWRnZXR7cG9zaXRpb246YWJzb2x1dGU7cG9pbnRlci1ldmVudHM6bm9uZTt6LWluZGV4OjEwMH1gXVxufSlcbmV4cG9ydCBjbGFzcyBQYW5lbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgbGlicmFyeTogTGlicmFyeTtcbiAgbGF5b3V0RWRpdG9yID0gbmV3IExheW91dEVkaXRvcigpO1xuICBpdGVtczogYW55W107XG4gIHJlc2l6ZUd1aWRlbGluZXM6IGFueVtdID0gW107XG5cbiAgLy8gQWxsIHN1YnNjcmlwdGlvbnMgbXVzdCBiZSBjbGVhbmVkIHVwIHRvIHByZXZlbnQgbGVha3MuXG4gIHByaXZhdGUgbW92ZUhvdmVyU3Vic2NyaXB0aW9uOiBhbnk7XG4gIHByaXZhdGUgbW91c2VVcFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHRvdWNoRW5kU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJpdmF0ZSBpc092ZXJsYXlEaXNwbGF5ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBtb3ZpbmdXaWRnZXRDb21wb25lbnQ6IFdpZGdldENvbXBvbmVudDtcblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJykgb25SZXNpemUoKSB7XG4gICAgaWYgKHRoaXMuYm9vdHN0cmFwU2VydmljZS5oYXNCcmVha3BvaW50Q2hhbmdlZCgpKSB7XG4gICAgICB0aGlzLmFkZEhvcml6b250YWxTcGFjZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCxcbiAgICBASW5qZWN0KCd3aWRnZXRzU2VydmljZScpIHByaXZhdGUgd2lkZ2V0c1NlcnZpY2U6IElXaWRnZXRzU2VydmljZSxcbiAgICBwcml2YXRlIGJvb3RzdHJhcFNlcnZpY2U6IEJvb3RzdHJhcFNlcnZpY2UpIHtcbiAgfVxuXG4gIHByaXZhdGUgcHJldmVudEhpZ2hsaWdodGluZ1doaWxlTW92aW5nKCk6IHZvaWQge1xuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCduby1oaWdobGlnaHRpbmcnKTtcbiAgfVxuXG4gIHByaXZhdGUgYWxsb3dIaWdobGlnaHRpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ25vLWhpZ2hsaWdodGluZycpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVTcGFjZXIoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3BhY2VyOiB7fVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGNsZWFyU3BhY2VycygpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHRoaXMuaXRlbXNbaV0uc3BhY2VyKSB7XG4gICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkSG9yaXpvbnRhbFNwYWNlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhclNwYWNlcnMoKTtcblxuICAgIGxldCB1c2VkV2lkdGhPblJvdyA9IDA7XG4gICAgY29uc3QgaW5kZXhlc1RvSW5zZXJ0U3BhY2VyID0gWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB3aWRnZXQgPSB0aGlzLml0ZW1zW2ldLndpZGdldCB8fCB0aGlzLml0ZW1zW2ldLmRyb3BUYXJnZXQ7XG5cbiAgICAgIGlmICh0aGlzLm1vdmluZ1dpZGdldENvbXBvbmVudCAmJiB3aWRnZXQgPT09IHRoaXMubW92aW5nV2lkZ2V0Q29tcG9uZW50LndpZGdldCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgd2lkZ2V0V2lkdGggPSB0aGlzLmJvb3RzdHJhcFNlcnZpY2UuZ2V0V2lkdGgod2lkZ2V0LmdldEN1cnJlbnRXaWR0aC5iaW5kKHdpZGdldCkpO1xuICAgICAgdXNlZFdpZHRoT25Sb3cgKz0gd2lkZ2V0V2lkdGg7XG5cbiAgICAgIGlmICh1c2VkV2lkdGhPblJvdyA9PT0gdGhpcy5ib290c3RyYXBTZXJ2aWNlLm1heENvbHVtbnMpIHtcbiAgICAgICAgaW5kZXhlc1RvSW5zZXJ0U3BhY2VyLnB1c2goaSArIDEpO1xuICAgICAgICB1c2VkV2lkdGhPblJvdyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHVzZWRXaWR0aE9uUm93ID4gdGhpcy5ib290c3RyYXBTZXJ2aWNlLm1heENvbHVtbnMpIHtcbiAgICAgICAgaW5kZXhlc1RvSW5zZXJ0U3BhY2VyLnB1c2goaSk7XG4gICAgICAgIHVzZWRXaWR0aE9uUm93ID0gd2lkZ2V0V2lkdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXhlc1RvSW5zZXJ0U3BhY2VyXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoeCwgMCwgdGhpcy5jcmVhdGVTcGFjZXIoKSk7XG4gICAgICB9KTtcblxuICAgIGlmICghdGhpcy5pdGVtc1t0aGlzLml0ZW1zLmxlbmd0aCAtIDFdLnNwYWNlcikge1xuICAgICAgdGhpcy5pdGVtcy5wdXNoKHRoaXMuY3JlYXRlU3BhY2VyKCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlT3ZlcmxheSgpOiB2b2lkIHtcbiAgICB0aGlzLmlzT3ZlcmxheURpc3BsYXllZCA9ICF0aGlzLmlzT3ZlcmxheURpc3BsYXllZDtcblxuICAgIGlmICh0aGlzLmlzT3ZlcmxheURpc3BsYXllZCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXknKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IHJlbmRlcmVkV2lkZ2V0cyA9IHRoaXMud2lkZ2V0c1NlcnZpY2UuZ2V0UmVuZGVyZWRXaWRnZXRzKCk7XG4gICAgdGhpcy5pdGVtcyA9IHJlbmRlcmVkV2lkZ2V0cy5tYXAoeCA9PiB7XG4gICAgICByZXR1cm4geyB3aWRnZXQ6IHggfTtcbiAgICB9KTtcbiAgICB0aGlzLmFkZEhvcml6b250YWxTcGFjZXJzKCk7XG4gICAgY29uc3QgYXZhaWxhYmxlV2lkZ2V0cyA9IHRoaXMud2lkZ2V0c1NlcnZpY2UuZ2V0QXZhaWxhYmxlV2lkZ2V0cygpO1xuICAgIHRoaXMubGlicmFyeSA9IG5ldyBMaWJyYXJ5KHJlbmRlcmVkV2lkZ2V0cywgYXZhaWxhYmxlV2lkZ2V0cyk7XG4gIH1cblxuICBvbkVkaXRMaWJyYXJ5KGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmxpYnJhcnkuZWRpdChldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpO1xuICAgIHRoaXMudG9nZ2xlT3ZlcmxheSgpO1xuICB9XG5cbiAgb25IaWRlTGlicmFyeSgpOiB2b2lkIHtcbiAgICB0aGlzLmxpYnJhcnkuaGlkZSgpO1xuICAgIHRoaXMudG9nZ2xlT3ZlcmxheSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckV4aXN0aW5nRHJvcFRhcmdldCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLml0ZW1zW2ldLmRyb3BUYXJnZXQpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc1dpZGdldE1vdmluZ0Rvd24obW92aW5nV2lkZ2V0LCBpbmRleE9mRHJvcCkge1xuICAgIGNvbnN0IGluZGV4T2ZXaWRnZXRCZWZvcmVNb3ZlID0gdGhpcy5pdGVtc1xuICAgICAgLm1hcCh4ID0+IHgud2lkZ2V0KVxuICAgICAgLmluZGV4T2YobW92aW5nV2lkZ2V0KTtcbiAgICByZXR1cm4gaW5kZXhPZkRyb3AgPiBpbmRleE9mV2lkZ2V0QmVmb3JlTW92ZTtcbiAgfVxuXG4gIHByaXZhdGUgaW5zZXJ0RHJvcFRhcmdldChjdXJyZW50UmVzaWRlbnQ6IGFueSwgbmV3UmVzaWRlbnQ6IFdpZGdldENvbXBvbmVudCkge1xuICAgIGlmICghbmV3UmVzaWRlbnQpIHtcbiAgICAgIG5ld1Jlc2lkZW50ID0gY3VycmVudFJlc2lkZW50O1xuICAgIH1cbiAgICB0aGlzLmNsZWFyRXhpc3RpbmdEcm9wVGFyZ2V0KCk7XG4gICAgY29uc3QgZHJvcFRhcmdldCA9IG5ld1Jlc2lkZW50LndpZGdldC5jbG9uZSgpO1xuICAgIGxldCBpbmRleE9mRHJvcDogbnVtYmVyO1xuXG4gICAgaWYgKGN1cnJlbnRSZXNpZGVudCBpbnN0YW5jZW9mIFNwYWNlckNvbXBvbmVudCkge1xuICAgICAgdGhpcy5ib290c3RyYXBTZXJ2aWNlLm1ha2VGdWxsV2lkdGgoZHJvcFRhcmdldC5tYWtlRnVsbFdpZHRoLmJpbmQoZHJvcFRhcmdldCkpO1xuICAgICAgaW5kZXhPZkRyb3AgPSB0aGlzLml0ZW1zXG4gICAgICAgIC5tYXAoeCA9PiB4LnNwYWNlcilcbiAgICAgICAgLmluZGV4T2YoY3VycmVudFJlc2lkZW50LnNwYWNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4T2ZEcm9wID0gdGhpcy5pdGVtc1xuICAgICAgICAubWFwKHggPT4geC53aWRnZXQpXG4gICAgICAgIC5pbmRleE9mKGN1cnJlbnRSZXNpZGVudC53aWRnZXQpO1xuICAgICAgaWYgKHRoaXMuaXNXaWRnZXRNb3ZpbmdEb3duKG5ld1Jlc2lkZW50LndpZGdldCwgaW5kZXhPZkRyb3ApKSB7XG4gICAgICAgIGluZGV4T2ZEcm9wKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaGVpZ2h0ID0gbmV3UmVzaWRlbnQuZ2V0SGVpZ2h0SW5mb3JtYXRpb24oKS5oZWlnaHQ7XG4gICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXhPZkRyb3AsIDAsIHsgZHJvcFRhcmdldDogZHJvcFRhcmdldCwgaGVpZ2h0OiBoZWlnaHQgfSk7XG4gIH1cblxuICBvbldpZGdldE1vdmUod2lkZ2V0Q29tcG9uZW50OiBXaWRnZXRDb21wb25lbnQpOiB2b2lkIHtcbiAgICB0aGlzLm1vdmluZ1dpZGdldENvbXBvbmVudCA9IHdpZGdldENvbXBvbmVudDtcbiAgICB0aGlzLnByZXZlbnRIaWdobGlnaHRpbmdXaGlsZU1vdmluZygpO1xuICAgIHRoaXMuaW5zZXJ0RHJvcFRhcmdldCh3aWRnZXRDb21wb25lbnQsIG51bGwpO1xuICB9XG5cbiAgb25XaWRnZXREcm9wcGVkKCk6IHZvaWQge1xuICAgIHRoaXMuaXRlbXMuc3BsaWNlKFxuICAgICAgdGhpcy5pdGVtcy5tYXAoeCA9PiB4LndpZGdldCkuaW5kZXhPZih0aGlzLm1vdmluZ1dpZGdldENvbXBvbmVudC53aWRnZXQpLFxuICAgICAgMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5pdGVtc1tpXS5kcm9wVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGksIDEsIHsgd2lkZ2V0OiB0aGlzLm1vdmluZ1dpZGdldENvbXBvbmVudC53aWRnZXQgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFsbG93SGlnaGxpZ2h0aW5nKCk7XG4gICAgdGhpcy5tb3ZpbmdXaWRnZXRDb21wb25lbnQgPSBudWxsO1xuICAgIHRoaXMuYWRkSG9yaXpvbnRhbFNwYWNlcnMoKTtcbiAgfVxuXG4gIG9uV2lkZ2V0SG92ZXJlZCh3aWRnZXRDb21wb25lbnQ6IFdpZGdldENvbXBvbmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tb3ZpbmdXaWRnZXRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ3Rlc3QgMCcsIG5ldyBEYXRlKCkpO1xuICAgIHRoaXMubW92ZUhvdmVyU3Vic2NyaXB0aW9uID0gT2JzZXJ2YWJsZS5vZih7fSlcbiAgICAgIC5kZWxheSgzMClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygndGVzdCcsIG5ldyBEYXRlKCkpO1xuICAgICAgICBpZiAoIXRoaXMubW92aW5nV2lkZ2V0Q29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zZXJ0RHJvcFRhcmdldCh3aWRnZXRDb21wb25lbnQsIHRoaXMubW92aW5nV2lkZ2V0Q29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5hZGRIb3Jpem9udGFsU3BhY2VycygpO1xuICAgICAgfSk7XG4gIH1cblxuICBvbldpZGdldFVuaG92ZXJlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tb3ZlSG92ZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMubW92ZUhvdmVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLm1vdmVIb3ZlclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgb25TcGFjZXJIb3ZlcmVkKHNwYWNlckNvbXBvbmVudDogU3BhY2VyQ29tcG9uZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm1vdmluZ1dpZGdldENvbXBvbmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm1vdmVIb3ZlclN1YnNjcmlwdGlvbiA9IE9ic2VydmFibGUub2Yoe30pXG4gICAgICAuZGVsYXkoMzAwKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5tb3ZpbmdXaWRnZXRDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnNlcnREcm9wVGFyZ2V0KHNwYWNlckNvbXBvbmVudCwgdGhpcy5tb3ZpbmdXaWRnZXRDb21wb25lbnQpO1xuICAgICAgICB0aGlzLmFkZEhvcml6b250YWxTcGFjZXJzKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG9uU3BhY2VyVW5ob3ZlcmVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1vdmVIb3ZlclN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5tb3ZlSG92ZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMubW92ZUhvdmVyU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1ha2VHcmlkKCkge1xuICAgIGNvbnN0IGdyaWQgPSBbXTtcbiAgICBncmlkLnB1c2goW10pO1xuICAgIGxldCBjdXJyZW50Um93V2lkdGggPSAwO1xuICAgIGNvbnN0IHdpZGdldHMgPSB0aGlzLml0ZW1zXG4gICAgICAuZmlsdGVyKHggPT4geC53aWRnZXQpXG4gICAgICAubWFwKHggPT4geC53aWRnZXQpO1xuICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZGdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHdpZGdldCA9IHdpZGdldHNbaV07XG4gICAgICBjb25zdCB3aWR0aCA9IHRoaXMuYm9vdHN0cmFwU2VydmljZVxuICAgICAgICAuZ2V0V2lkdGgod2lkZ2V0LmdldEN1cnJlbnRXaWR0aC5iaW5kKHdpZGdldCkpO1xuICAgICAgZ3JpZFtncmlkLmxlbmd0aCAtIDFdLnB1c2god2lkZ2V0KTtcbiAgICAgIGN1cnJlbnRSb3dXaWR0aCArPSB3aWR0aDtcbiAgICAgIGNvbnN0IGlzTGFzdFdpZGdldCA9IGkgPT09IHdpZGdldHMubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpc0xhc3RXaWRnZXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFJvd1dpZHRoID09PSB0aGlzLmJvb3RzdHJhcFNlcnZpY2UubWF4Q29sdW1ucykge1xuICAgICAgICBncmlkLnB1c2goW10pO1xuICAgICAgICBjdXJyZW50Um93V2lkdGggPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUHJldmlldyB0aGUgbmV4dCB3aWRnZXQgYW5kIHNlZSBpZiBhIG5ldyByb3cgaXMgbmVlZGVkIGR1ZSB0byBsYWNrIG9mIHNwYWNlLlxuICAgICAgICBjb25zdCBuZXh0V2lkZ2V0ID0gd2lkZ2V0c1tpICsgMV07XG4gICAgICAgIGNvbnN0IG5leHRXaWRnZXRXaWR0aCA9IHRoaXMuYm9vdHN0cmFwU2VydmljZVxuICAgICAgICAgIC5nZXRXaWR0aChuZXh0V2lkZ2V0LmdldEN1cnJlbnRXaWR0aC5iaW5kKG5leHRXaWRnZXQpKTtcbiAgICAgICAgY29uc3Qgc3BhY2VMZWZ0T25DdXJyZW50Um93ID0gdGhpcy5ib290c3RyYXBTZXJ2aWNlLm1heENvbHVtbnMgLSBjdXJyZW50Um93V2lkdGg7XG4gICAgICAgIGlmIChuZXh0V2lkZ2V0V2lkdGggPiBzcGFjZUxlZnRPbkN1cnJlbnRSb3cpIHtcbiAgICAgICAgICBncmlkLnB1c2goW10pO1xuICAgICAgICAgIGN1cnJlbnRSb3dXaWR0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIHJldHVybiBncmlkO1xuICB9O1xuXG4gIHByaXZhdGUgZmluZFJvd0NvbnRhaW5pbmdXaWRnZXQod2lkZ2V0OiBXaWRnZXQpOiBXaWRnZXRbXSB7XG4gICAgLy8gSSdtIG1ha2luZyBhIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IG9mIHRoZSBlbnRpcmUgZ3JpZCBiZWZvcmUgdHJ5aW5nIHRvXG4gICAgLy8gZmluZCB3aGljaCByb3cgdGhlIHdpZGdldCBpcyBpbi4gVGhpcyBpcyBsZXNzIGVmZmljaWVudCB0aGFuIGJ1aWxkaW5nIHRoZVxuICAgIC8vIGdyaWQgYW5kIHNpbXVsdGFuZW91c2x5IGNoZWNraW5nIGlmIHRoZSByb3cgaGFzIHRoZSB3aWRnZXQsIGJ1dCBpdCBtYWtlc1xuICAgIC8vIHRoZSBsb2dpYyBtdWNoIG1vcmUgcmVhc29uYWJsZS5cbiAgICBjb25zdCBncmlkID0gdGhpcy5tYWtlR3JpZCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JpZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgd2lkZ2V0SW5kZXggPSBncmlkW2ldLmluZGV4T2Yod2lkZ2V0KTtcbiAgICAgIGlmICh3aWRnZXRJbmRleCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBncmlkW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGNhbGN1bGF0ZUJvdW5kYXJpZXMod2lkZ2V0OiBXaWRnZXQpOiBvYmplY3Qge1xuICAgIGNvbnN0IHJvdyA9IHRoaXMuZmluZFJvd0NvbnRhaW5pbmdXaWRnZXQod2lkZ2V0KTtcbiAgICBjb25zb2xlLmxvZyhcInJvd1wiLCByb3cpO1xuICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHJvd1xuICAgICAgLnNsaWNlKDAsIHJvdy5pbmRleE9mKHdpZGdldCkgKyAxKVxuICAgICAgLm1hcCh4ID0+IHRoaXMuYm9vdHN0cmFwU2VydmljZS5nZXRXaWR0aCh4LmdldEN1cnJlbnRXaWR0aC5iaW5kKHgpKSlcbiAgICAgIC5yZWR1Y2UoKHgsIHkpID0+IHggKyB5KTtcbiAgICBjb25zdCBtaW5pbXVtV2lkdGggPSB0aGlzLmJvb3RzdHJhcFNlcnZpY2UuZ2V0V2lkdGgod2lkZ2V0LmdldE1pbmltdW1XaWR0aC5iaW5kKHdpZGdldCkpO1xuICAgIGNvbnN0IHNwYWNlVG9NaW5pbWl6ZSA9IHRoaXMuYm9vdHN0cmFwU2VydmljZS5nZXRXaWR0aCh3aWRnZXQuZ2V0Q3VycmVudFdpZHRoLmJpbmQod2lkZ2V0KSkgLSBtaW5pbXVtV2lkdGg7XG4gICAgXG4gICAgLy8gRG9uJ3QgZ28gbGVmdCBmYXIgZW5vdWdoIHRvIGV4Y2VlZCB0aGUgbWluaW11bSBvZiB0aGUgd2lkZ2V0LlxuICAgIGNvbnN0IGxlZnQgPSBjdXJyZW50UG9zaXRpb24gLSBzcGFjZVRvTWluaW1pemU7XG4gICAgLy8gRG9uJ3QgZ28gcmlnaHQgZmFyIGVub3VnaCB0byBleGNlZWQgdGhlIHdpZHRoIG9mIHRoZSByb3cuXG4gICAgY29uc3QgcmlnaHQgPSB0aGlzLmJvb3RzdHJhcFNlcnZpY2UubWF4Q29sdW1ucztcbiAgICAvLyBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGF0IHdoaWNoIGNvbHVtbiB0byBzdGFydCBkcmF3aW5nIGd1aWRlbGluZXMuXG4gICAgY29uc3Qgb2Zmc2V0ID0gbWluaW11bVdpZHRoIC0gbGVmdDtcbiAgICByZXR1cm4geyBsZWZ0LCByaWdodCwgb2Zmc2V0IH07XG4gIH1cblxuICBwcml2YXRlIGRyYXdSZXNpemVHdWlkZWxpbmVzKHdpZGdldENvbXBvbmVudDogV2lkZ2V0Q29tcG9uZW50KTogdm9pZCB7XG4gICAgY29uc3QgaGVpZ2h0SW5mb3JtYXRpb24gPSB3aWRnZXRDb21wb25lbnQuZ2V0SGVpZ2h0SW5mb3JtYXRpb24oKTtcbiAgICBjb25zdCBib3VuZGFyaWVzOiBhbnkgPSB0aGlzLmNhbGN1bGF0ZUJvdW5kYXJpZXMod2lkZ2V0Q29tcG9uZW50LndpZGdldCk7XG4gICAgZm9yIChsZXQgaSA9IGJvdW5kYXJpZXMubGVmdDsgaSA8PSBib3VuZGFyaWVzLnJpZ2h0OyBpKyspIHtcbiAgICAgIC8vIHVuc2hpZnQoKSB3aGljaCBpbnNlcnRzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5IGluc3RlYWQgb2YgcHVzaCgpXG4gICAgICAvLyBiZWNhdXNlIHdlIHdhbnQgdG8gZGlzcGxheSB0aGUgbG9uZ2VzdCBndWlkZWxpbmUgZmlyc3Qgc28gdGhhdCB0aGUgc2hvcnRlclxuICAgICAgLy8gb25lIGlzIG9uIHRvcCBvZiB0aGUgbG9uZ2VyIG9uZS4gVGhpcyB3aWxsIGhlbHAgd2hlbiB3ZSBob3ZlciBvdmVyIGVhY2ggb25lLlxuICAgICAgLy8gSWYgdGhlIGxvbmdlciBvbmUgd2FzIG9uIHRvcCBpdCB3b3VsZCBiZSB0aGUgb25seSBndWlkZWxpbmUgcmFpc2luZyBldmVudHMuXG4gICAgICB0aGlzLnJlc2l6ZUd1aWRlbGluZXMudW5zaGlmdCh7XG4gICAgICAgIHdpZHRoT2ZHdWlkZWxpbmU6IGksXG4gICAgICAgIHRhcmdldFdpZHRoT2ZXaWRnZXQ6IGkgKyBib3VuZGFyaWVzLm9mZnNldCxcbiAgICAgICAgdG9wOiBoZWlnaHRJbmZvcm1hdGlvbi50b3AsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0SW5mb3JtYXRpb24uaGVpZ2h0LFxuICAgICAgICB3aWRnZXQ6IHdpZGdldENvbXBvbmVudC53aWRnZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uV2lkZ2V0UmVzaXplZCh3aWRnZXQ6IFdpZGdldCk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4T2ZXaWRnZXQgPSB0aGlzLml0ZW1zXG4gICAgICAubWFwKHggPT4geC53aWRnZXQpXG4gICAgICAuaW5kZXhPZih3aWRnZXQpO1xuICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4T2ZXaWRnZXQsIDEsIHsgd2lkZ2V0IH0pO1xuICAgIHRoaXMuYWRkSG9yaXpvbnRhbFNwYWNlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgZW5kV2lkZ2V0UmVzaXplKCkge1xuICAgIHRoaXMucmVzaXplR3VpZGVsaW5lcyA9IFtdO1xuICAgIHRoaXMuYWxsb3dIaWdobGlnaHRpbmcoKTtcbiAgICBpZiAodGhpcy5tb3VzZVVwU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLm1vdXNlVXBTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudG91Y2hFbmRTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMudG91Y2hFbmRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBvbldpZGdldFJlc2l6ZVN0YXJ0ZWQod2lkZ2V0Q29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy5kcmF3UmVzaXplR3VpZGVsaW5lcyh3aWRnZXRDb21wb25lbnQpO1xuICAgIHRoaXMucHJldmVudEhpZ2hsaWdodGluZ1doaWxlTW92aW5nKCk7XG4gICAgdGhpcy5tb3VzZVVwU3Vic2NyaXB0aW9uID1cbiAgICAgIE9ic2VydmFibGUuZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQsICdtb3VzZXVwJylcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbmRXaWRnZXRSZXNpemUoKTtcbiAgICAgICAgICBpZiAodGhpcy5tb3VzZVVwU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlVXBTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIHRoaXMudG91Y2hFbmRTdWJzY3JpcHRpb24gPVxuICAgICAgT2JzZXJ2YWJsZS5mcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ3RvdWNoZW5kJylcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5lbmRXaWRnZXRSZXNpemUoKTtcbiAgICAgICAgICBpZiAodGhpcy50b3VjaEVuZFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy50b3VjaEVuZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gIH1cblxuICBvblJlbmRlcldpZGdldCh3aWRnZXQ6IFdpZGdldCkge1xuICAgIHRoaXMuaXRlbXMudW5zaGlmdCh7IHdpZGdldCB9KTtcbiAgICB0aGlzLmFkZEhvcml6b250YWxTcGFjZXJzKCk7XG4gIH1cblxuICBvbkRlcmVuZGVyV2lkZ2V0KHdpZGdldDogV2lkZ2V0KSB7XG4gICAgdGhpcy5pdGVtc1xuICAgICAgLmZpbHRlcih4ID0+IHgud2lkZ2V0ICYmIHgud2lkZ2V0LmlkID09PSB3aWRnZXQuaWQpXG4gICAgICAuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UodGhpcy5pdGVtcy5pbmRleE9mKHgpLCAxKTtcbiAgICAgIH0pO1xuICAgIHRoaXMuYWRkSG9yaXpvbnRhbFNwYWNlcnMoKTtcbiAgfVxuXG4gIG9uRWRpdExheW91dChldmVudCkge1xuICAgIHRoaXMubGF5b3V0RWRpdG9yLmVkaXQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKTtcbiAgICB0aGlzLnRvZ2dsZU92ZXJsYXkoKTtcbiAgfVxuXG4gIG9uSGlkZUxheW91dEVkaXRvcigpIHtcbiAgICB0aGlzLmxheW91dEVkaXRvci5oaWRlKCk7XG4gICAgdGhpcy50b2dnbGVPdmVybGF5KCk7XG4gIH1cblxuICBvbldpZGdldENsb3NlQ2xpY2sod2lkZ2V0KSB7XG4gICAgdGhpcy5pdGVtc1xuICAgICAgLmZpbHRlcih4ID0+IHgud2lkZ2V0ICYmIHgud2lkZ2V0ID09PSB3aWRnZXQpXG4gICAgICAuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UodGhpcy5pdGVtcy5pbmRleE9mKHgpLCAxKTtcbiAgICAgIH0pO1xuICAgIHRoaXMuYWRkSG9yaXpvbnRhbFNwYWNlcnMoKTtcbiAgfVxuXG4gIG9uV2lkZ2V0VG9nZ2xlRnVsbFNjcmVlbkNsaWNrKCkge1xuICAgIHRoaXMudG9nZ2xlT3ZlcmxheSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubW92ZUhvdmVyU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLm1vdmVIb3ZlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5tb3VzZVVwU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLm1vdXNlVXBTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudG91Y2hFbmRTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMudG91Y2hFbmRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtd2lkZ2V0cy1wYW5lbC1jb250cm9scycsXHJcbiAgdGVtcGxhdGU6IGA8c3BhbiBjbGFzcz0nbm8taGlnaGxpZ2h0aW5nJz5cclxuICA8c3BhbiBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnIChjbGljayk9J29uTGlicmFyeUNsaWNrKCRldmVudCknPmFkZDwvc3Bhbj5cclxuPHNwYW4gY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvbkxheW91dENsaWNrKCRldmVudCknPmRhc2hib2FyZDwvc3Bhbj5cclxuPC9zcGFuPmAsXHJcbiAgc3R5bGVzOiBbYDpob3N0e21hcmdpbi10b3A6MTBweDttYXJnaW4tcmlnaHQ6MjBweDt0ZXh0LWFsaWduOnJpZ2h0fWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQYW5lbENvbnRyb2xzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcclxuICBAT3V0cHV0KCkgZWRpdExpYnJhcnkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgZWRpdExheW91dCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbC0xMicpO1xyXG4gIH1cclxuXHJcbiAgb25MaWJyYXJ5Q2xpY2soZXZlbnQpIHtcclxuICAgIHRoaXMuZWRpdExpYnJhcnkuZW1pdChldmVudCk7XHJcbiAgfVxyXG5cclxuICBvbkxheW91dENsaWNrKGV2ZW50KSB7XHJcbiAgICB0aGlzLmVkaXRMYXlvdXQuZW1pdChldmVudCk7XHJcbiAgfVxyXG59XHJcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBPbkluaXQsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEluamVjdCxcclxuICBOZ1pvbmUsXHJcbiAgT25EZXN0cm95LFxyXG4gIEFmdGVyQ29udGVudEluaXQsXHJcbiAgQWZ0ZXJWaWV3SW5pdFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFdpZGdldCB9IGZyb20gJy4uL3dpZGdldC5tb2RlbCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvZnJvbUV2ZW50JztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xyXG5pbXBvcnQgeyBCb290c3RyYXBTZXJ2aWNlIH0gZnJvbSAnLi4vYm9vdHN0cmFwLnNlcnZpY2UnO1xyXG5cclxuaW50ZXJmYWNlIElDb29yZGluYXRlcyB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtd2lkZ2V0JyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9J2NhcmQgY2FyZC1yb3cnIChtb3VzZWVudGVyKT0nb25XaWRnZXRNb3VzZUVudGVyKCknICh0b3VjaGVudGVyKT0nb25XaWRnZXRUb3VjaEVudGVyKCknIChtb3VzZWxlYXZlKT0nb25XaWRnZXRNb3VzZUxlYXZlKCknICh0b3VjaGxlYXZlKT0nb25XaWRnZXRUb3VjaExlYXZlKCknPlxyXG4gIDxhcHAtd2lkZ2V0LWNvbnRyb2xzIFt3aWRnZXRdPSd3aWRnZXQnIChtb3VzZWRvd24pPSdvbldpZGdldE1vdXNlRG93bigkZXZlbnQpJyAodG91Y2hzdGFydCk9J29uV2lkZ2V0VG91Y2hTdGFydCgkZXZlbnQpJyAoY2xvc2UpPSdvbkNsb3NlQ2xpY2soKScgKGZ1bGxzY3JlZW4pPSdvblRvZ2dsZUZ1bGxTY3JlZW5DbGljaygpJz48L2FwcC13aWRnZXQtY29udHJvbHM+XHJcbiAgPGRpdiBbbmdDbGFzc109J3dpZGdldC5pc0V4cGFuZGVkIHx8IHdpZGdldC5pc0Z1bGxTY3JlZW4gPyBcIm1heGltaXplZFwiIDogXCJtaW5pbWl6ZWRcIic+XHJcbiAgICA8ZGl2IGNsYXNzPSdjb250YWluZXInPlxyXG4gICAgICA8ZGl2IFtzdHlsZS5oZWlnaHRdPSd3aWRnZXQuaW5pdGlhbEhlaWdodCc+XHJcbiAgICAgICAgPGRpdiBjbGFzcz0nbG9hZGVyJz5Mb2FkaW5nLi4uPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPSdyZXNpemVyIGQtbm9uZSBkLXNtLWlubGluZScgKG1vdXNlZG93bik9J29uUmVzaXplck1vdXNlRG93bigpJyAodG91Y2hzdGFydCk9J29uUmVzaXplclRvdWNoU3RhcnQoKSc+PC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvZGl2PmAsXHJcbiAgc3R5bGVzOiBbYDpob3N0e2Rpc3BsYXk6YmxvY2t9Omhvc3Q+ZGl2e2hlaWdodDoxMDAlO21hcmdpbjowfS5yZXNpemVye3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjVweDtoZWlnaHQ6OTglO3RvcDoycHg7cmlnaHQ6MnB4O2N1cnNvcjpldy1yZXNpemV9Lm1heGltaXplZHtvcGFjaXR5OjE7dHJhbnNpdGlvbi1wcm9wZXJ0eTpoZWlnaHQsb3BhY2l0eTt0cmFuc2l0aW9uLWR1cmF0aW9uOi4ycywuNXN9Lm1pbmltaXplZHtvcGFjaXR5OjA7dHJhbnNpdGlvbi1wcm9wZXJ0eTpoZWlnaHQsb3BhY2l0eTt0cmFuc2l0aW9uLWR1cmF0aW9uOi41cywwO2hlaWdodDowIWltcG9ydGFudH06aG9zdC5mdWxsc2NyZWVuIC5yZXNpemVye2N1cnNvcjpkZWZhdWx0fTpob3N0LmZ1bGxzY3JlZW57ei1pbmRleDoxMDA7bWF4LXdpZHRoOjEwMCU7cG9zaXRpb246YWJzb2x1dGV9LmxvYWRlcntjb2xvcjpncmF5O21hcmdpbjphdXRvO2ZvbnQtc2l6ZTo0NXB4O3RvcDpjYWxjKDUwJSAtIDQ1cHgpO3RleHQtaW5kZW50Oi05OTk5ZW07b3ZlcmZsb3c6aGlkZGVuO3dpZHRoOjFlbTtoZWlnaHQ6MWVtO2JvcmRlci1yYWRpdXM6NTAlO3Bvc2l0aW9uOnJlbGF0aXZlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7LXdlYmtpdC1hbmltYXRpb246MS43cyBpbmZpbml0ZSBsb2FkNiwxLjdzIGluZmluaXRlIHJvdW5kO2FuaW1hdGlvbjoxLjdzIGluZmluaXRlIGxvYWQ2LDEuN3MgaW5maW5pdGUgcm91bmR9QC13ZWJraXQta2V5ZnJhbWVzIGxvYWQ2ezAlLDEwMCUsNSUsOTUle2JveC1zaGFkb3c6MCAtLjgzZW0gMCAtLjRlbSwwIC0uODNlbSAwIC0uNDJlbSwwIC0uODNlbSAwIC0uNDRlbSwwIC0uODNlbSAwIC0uNDZlbSwwIC0uODNlbSAwIC0uNDc3ZW19MTAlLDU5JXtib3gtc2hhZG93OjAgLS44M2VtIDAgLS40ZW0sLS4wODdlbSAtLjgyNWVtIDAgLS40MmVtLC0uMTczZW0gLS44MTJlbSAwIC0uNDRlbSwtLjI1NmVtIC0uNzg5ZW0gMCAtLjQ2ZW0sLS4yOTdlbSAtLjc3NWVtIDAgLS40NzdlbX0yMCV7Ym94LXNoYWRvdzowIC0uODNlbSAwIC0uNGVtLC0uMzM4ZW0gLS43NThlbSAwIC0uNDJlbSwtLjU1NWVtIC0uNjE3ZW0gMCAtLjQ0ZW0sLS42NzFlbSAtLjQ4OGVtIDAgLS40NmVtLC0uNzQ5ZW0gLS4zNGVtIDAgLS40NzdlbX0zOCV7Ym94LXNoYWRvdzowIC0uODNlbSAwIC0uNGVtLC0uMzc3ZW0gLS43NGVtIDAgLS40MmVtLC0uNjQ1ZW0gLS41MjJlbSAwIC0uNDRlbSwtLjc3NWVtIC0uMjk3ZW0gMCAtLjQ2ZW0sLS44MmVtIC0uMDllbSAwIC0uNDc3ZW19fUBrZXlmcmFtZXMgbG9hZDZ7MCUsMTAwJSw1JSw5NSV7Ym94LXNoYWRvdzowIC0uODNlbSAwIC0uNGVtLDAgLS44M2VtIDAgLS40MmVtLDAgLS44M2VtIDAgLS40NGVtLDAgLS44M2VtIDAgLS40NmVtLDAgLS44M2VtIDAgLS40NzdlbX0xMCUsNTkle2JveC1zaGFkb3c6MCAtLjgzZW0gMCAtLjRlbSwtLjA4N2VtIC0uODI1ZW0gMCAtLjQyZW0sLS4xNzNlbSAtLjgxMmVtIDAgLS40NGVtLC0uMjU2ZW0gLS43ODllbSAwIC0uNDZlbSwtLjI5N2VtIC0uNzc1ZW0gMCAtLjQ3N2VtfTIwJXtib3gtc2hhZG93OjAgLS44M2VtIDAgLS40ZW0sLS4zMzhlbSAtLjc1OGVtIDAgLS40MmVtLC0uNTU1ZW0gLS42MTdlbSAwIC0uNDRlbSwtLjY3MWVtIC0uNDg4ZW0gMCAtLjQ2ZW0sLS43NDllbSAtLjM0ZW0gMCAtLjQ3N2VtfTM4JXtib3gtc2hhZG93OjAgLS44M2VtIDAgLS40ZW0sLS4zNzdlbSAtLjc0ZW0gMCAtLjQyZW0sLS42NDVlbSAtLjUyMmVtIDAgLS40NGVtLC0uNzc1ZW0gLS4yOTdlbSAwIC0uNDZlbSwtLjgyZW0gLS4wOWVtIDAgLS40NzdlbX19QC13ZWJraXQta2V5ZnJhbWVzIHJvdW5kezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIHJvdW5kezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpIHdpZGdldDogV2lkZ2V0O1xyXG4gIEBPdXRwdXQoKSB3aWRnZXRNb3ZpbmcgPSBuZXcgRXZlbnRFbWl0dGVyPFdpZGdldENvbXBvbmVudD4oKTtcclxuICBAT3V0cHV0KCkgd2lkZ2V0RHJvcHBlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICBAT3V0cHV0KCkgd2lkZ2V0SG92ZXJlZCA9IG5ldyBFdmVudEVtaXR0ZXI8V2lkZ2V0Q29tcG9uZW50PigpO1xyXG4gIEBPdXRwdXQoKSB3aWRnZXRVbmhvdmVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgQE91dHB1dCgpIHJlc2l6ZVN0YXJ0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFdpZGdldENvbXBvbmVudD4oKTtcclxuICBAT3V0cHV0KCkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPFdpZGdldD4oKTtcclxuICBAT3V0cHV0KCkgZnVsbHNjcmVlbiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgLy8gQWxsIHN1YnNjcmlwdGlvbnMgbXVzdCBiZSBjbGVhbmVkIHVwIHRvIHByZXZlbnQgbGVha3MuXHJcbiAgcHJpdmF0ZSBtb3VzZU1vdmVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICBwcml2YXRlIG1vdXNlVXBTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICBwcml2YXRlIHRvdWNoTW92ZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gIHByaXZhdGUgdG91Y2hFbmRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgcHJpdmF0ZSBtb3ZlU3RhcnRQb3NpdGlvbjogSUNvb3JkaW5hdGVzO1xyXG4gIHByaXZhdGUgaW5pdGlhbFBvc2l0aW9uOiBJQ29vcmRpbmF0ZXM7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCxcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxyXG4gICAgcHJpdmF0ZSBib290c3RyYXBTZXJ2aWNlOiBCb290c3RyYXBTZXJ2aWNlKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7IH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRVc2VyUG9zaXRpb24oZSk6IElDb29yZGluYXRlcyB7XHJcbiAgICByZXR1cm4gZS5jaGFuZ2VkVG91Y2hlcyA/XHJcbiAgICAgIHtcclxuICAgICAgICB4OiBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYLFxyXG4gICAgICAgIHk6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVlcclxuICAgICAgfSA6IHtcclxuICAgICAgICB4OiBlLnBhZ2VYLFxyXG4gICAgICAgIHk6IGUucGFnZVlcclxuICAgICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbm90TW9kaWZpYWJsZSgpIHtcclxuICAgIGlmICh0aGlzLndpZGdldC5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG5vdEdyYWJiYWJsZShlKSB7XHJcbiAgICBpZiAodGhpcy5ub3RNb2RpZmlhYmxlKCkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIWUpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XHJcbiAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdub3QtZ3JhYmJhYmxlJykpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ub3QtZ3JhYmJhYmxlJykpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXJ0TW92ZShlKSB7XHJcbiAgICB0aGlzLndpZGdldE1vdmluZy5lbWl0KHRoaXMpO1xyXG5cclxuICAgIGNvbnN0IHRoaXNFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gICAgLy8gV2UnbGwgcmVzZXQgdGhlIHN0eWxlIHdoZW4gd2UgY2FsbCBlbmRNb3ZlLlxyXG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSB7XHJcbiAgICAgIHk6IHRoaXNFbGVtZW50LnN0eWxlLnRvcCxcclxuICAgICAgeDogdGhpc0VsZW1lbnQuc3R5bGUubGVmdFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNYWtlIHRoZSBkcmFnZ2luZyB3aWRnZXQgZm9sbG93IHRoZSB1c2VyJ3MgbW92ZW1lbnQuXHJcbiAgICBjb25zdCB1c2VyUG9zaXRpb24gPSB0aGlzLmdldFVzZXJQb3NpdGlvbihlKTtcclxuICAgIHRoaXMubW92ZVN0YXJ0UG9zaXRpb24gPSB7XHJcbiAgICAgIHg6IGUudG91Y2hlcyA/XHJcbiAgICAgICAgZS50b3VjaGVzWzBdLnBhZ2VYIC0gdGhpc0VsZW1lbnQub2Zmc2V0TGVmdCA6XHJcbiAgICAgICAgZS5wYWdlWCAtIHRoaXNFbGVtZW50Lm9mZnNldExlZnQsXHJcbiAgICAgIHk6IGUudG91Y2hlcyA/XHJcbiAgICAgICAgZS50b3VjaGVzWzBdLnBhZ2VZIC0gdGhpc0VsZW1lbnQub2Zmc2V0VG9wIDpcclxuICAgICAgICBlLnBhZ2VZIC0gdGhpc0VsZW1lbnQub2Zmc2V0VG9wXHJcbiAgICB9O1xyXG4gICAgdGhpc0VsZW1lbnQuc3R5bGUubGVmdCA9ICh1c2VyUG9zaXRpb24ueCAtIHRoaXMubW92ZVN0YXJ0UG9zaXRpb24ueCkgKyAncHgnO1xyXG4gICAgdGhpc0VsZW1lbnQuc3R5bGUudG9wID0gKHVzZXJQb3NpdGlvbi55IC0gdGhpcy5tb3ZlU3RhcnRQb3NpdGlvbi55KSArICdweCc7XHJcblxyXG4gICAgdGhpc0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbW92aW5nLXdpZGdldCcpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBtb3ZlKGUpIHtcclxuICAgIC8vIE1ha2UgdGhlIHdpZGdldCBmb2xsb3cgdGhlIHVzZXIncyBtb3ZlbWVudC5cclxuICAgIGNvbnN0IHVzZXJQb3NpdGlvbiA9IHRoaXMuZ2V0VXNlclBvc2l0aW9uKGUpO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUubGVmdCA9ICh1c2VyUG9zaXRpb24ueCAtIHRoaXMubW92ZVN0YXJ0UG9zaXRpb24ueCkgKyAncHgnO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gKHVzZXJQb3NpdGlvbi55IC0gdGhpcy5tb3ZlU3RhcnRQb3NpdGlvbi55KSArICdweCc7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVuZE1vdmUoKSB7XHJcbiAgICB0aGlzLndpZGdldERyb3BwZWQuZW1pdCgpO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbW92aW5nLXdpZGdldCcpO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gdGhpcy5pbml0aWFsUG9zaXRpb24ueTtcclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmxlZnQgPSB0aGlzLmluaXRpYWxQb3NpdGlvbi54O1xyXG4gIH1cclxuXHJcbiAgZ2V0SGVpZ2h0SW5mb3JtYXRpb24oKTogYW55IHtcclxuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudFxyXG4gICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxyXG4gICAgICB0b3A6IHJlY3QudG9wXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgb25XaWRnZXRNb3VzZURvd24oZSkge1xyXG4gICAgaWYgKHRoaXMubm90R3JhYmJhYmxlKGUpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhcnRNb3ZlKGUpO1xyXG4gICAgLy8gTWFrZSBzdXJlIHRoZXNlIG9ic2VydmVycyBhcmUgcmVtb3ZlZCBpbiBlbmRNb3ZlLlxyXG4gICAgdGhpcy5tb3VzZU1vdmVTdWJzY3JpcHRpb24gPVxyXG4gICAgICBPYnNlcnZhYmxlLmZyb21FdmVudCh0aGlzLmRvY3VtZW50LCAnbW91c2Vtb3ZlJylcclxuICAgICAgICAuc3Vic2NyaWJlKGV2ZW50ID0+IHtcclxuICAgICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZShldmVudCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIHRoaXMubW91c2VVcFN1YnNjcmlwdGlvbiA9XHJcbiAgICAgIE9ic2VydmFibGUuZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQsICdtb3VzZXVwJylcclxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuZW5kTW92ZSgpO1xyXG4gICAgICAgICAgaWYgKHRoaXMubW91c2VNb3ZlU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VNb3ZlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodGhpcy5tb3VzZVVwU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VVcFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25XaWRnZXRUb3VjaFN0YXJ0KGUpIHtcclxuICAgIGlmICh0aGlzLm5vdEdyYWJiYWJsZShlKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB0aGlzLnN0YXJ0TW92ZShlKTtcclxuICAgIC8vIE1ha2Ugc3VyZSB0aGVzZSBvYnNlcnZlcnMgYXJlIHJlbW92ZWQgaW4gZW5kTW92ZS5cclxuICAgIHRoaXMudG91Y2hNb3ZlU3Vic2NyaXB0aW9uID1cclxuICAgICAgT2JzZXJ2YWJsZS5mcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ3RvdWNobW92ZScpXHJcbiAgICAgICAgLnN1YnNjcmliZShldmVudCA9PiB7XHJcbiAgICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmUoZXZlbnQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB0aGlzLnRvdWNoRW5kU3Vic2NyaXB0aW9uID1cclxuICAgICAgT2JzZXJ2YWJsZS5mcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ3RvdWNoZW5kJylcclxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuZW5kTW92ZSgpO1xyXG4gICAgICAgICAgaWYgKHRoaXMudG91Y2hNb3ZlU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2hNb3ZlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodGhpcy50b3VjaEVuZFN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnRvdWNoRW5kU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbldpZGdldE1vdXNlRW50ZXIoKSB7XHJcbiAgICB0aGlzLndpZGdldEhvdmVyZWQuZW1pdCh0aGlzKTtcclxuICB9XHJcblxyXG4gIG9uV2lkZ2V0VG91Y2hFbnRlcigpIHtcclxuICAgIHRoaXMud2lkZ2V0SG92ZXJlZC5lbWl0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgb25XaWRnZXRNb3VzZUxlYXZlKCkge1xyXG4gICAgdGhpcy53aWRnZXRVbmhvdmVyZWQuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgb25XaWRnZXRUb3VjaExlYXZlKCkge1xyXG4gICAgdGhpcy53aWRnZXRVbmhvdmVyZWQuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemVyTW91c2VEb3duKCkge1xyXG4gICAgaWYgKHRoaXMubm90TW9kaWZpYWJsZSgpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZXNpemVTdGFydGVkLmVtaXQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZXJUb3VjaFN0YXJ0KCkge1xyXG4gICAgaWYgKHRoaXMubm90TW9kaWZpYWJsZSgpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZXNpemVTdGFydGVkLmVtaXQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlQ2xpY2soKSB7XHJcbiAgICB0aGlzLmNsb3NlLmVtaXQodGhpcy53aWRnZXQpO1xyXG4gIH1cclxuXHJcbiAgb25Ub2dnbGVGdWxsU2NyZWVuQ2xpY2soKSB7XHJcbiAgICB0aGlzLndpZGdldC50b2dnbGVGdWxsU2NyZWVuKCk7XHJcbiAgICBjb25zdCB0aGlzRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgaWYgKHRoaXMud2lkZ2V0LmlzRnVsbFNjcmVlbikge1xyXG4gICAgICB0aGlzRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgIC8vIEkgd291bGQgcHJlZmVyIHRvIHVzZSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCwgYnV0IGl0IGlzIGJyb2tlbiBvblxyXG4gICAgICAvLyBjaG9tZS93ZWJraXQgYW5kIGFsd2F5cyByZXR1cm5zIDAuXHJcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTE1Nzg1NVxyXG4gICAgICB0aGlzRWxlbWVudC5zdHlsZS50b3AgPSAoMTUgKyB3aW5kb3cuc2Nyb2xsWSkgKyAncHgnO1xyXG4gICAgICB0aGlzRWxlbWVudC5zdHlsZS5ib3R0b20gPSAoMTUgLSB3aW5kb3cuc2Nyb2xsWSkgKyAncHgnO1xyXG4gICAgICB0aGlzRWxlbWVudC5zdHlsZS5sZWZ0ID0gKDAgKyB3aW5kb3cuc2Nyb2xsWCkgKyAncHgnO1xyXG4gICAgICB0aGlzRWxlbWVudC5zdHlsZS5yaWdodCA9ICgwIC0gd2luZG93LnNjcm9sbFgpICsgJ3B4JztcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgIHRoaXNFbGVtZW50LnN0eWxlLnRvcCA9IG51bGw7XHJcbiAgICAgIHRoaXNFbGVtZW50LnN0eWxlLmJvdHRvbSA9IG51bGw7XHJcbiAgICAgIHRoaXNFbGVtZW50LnN0eWxlLmxlZnQgPSBudWxsO1xyXG4gICAgICB0aGlzRWxlbWVudC5zdHlsZS5yaWdodCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW4uZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnd2lkZ2V0Jyk7XHJcbiAgICBjb25zdCBjbGFzc2VzOiBzdHJpbmdbXSA9IHRoaXMuYm9vdHN0cmFwU2VydmljZS5nZXRDbGFzc2VzKHRoaXMud2lkZ2V0KTtcclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcyk7XHJcbiAgICBpZiAodGhpcy53aWRnZXQuaXNIaWRkZW4pIHtcclxuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgLy8gSWYgdGhlIHdpZGdldCBpcyBhbHNvIEFuZ3VsYXIgMissIGl0J3MgYm9vdHN0cmFwcGluZyB3aWxsIGNhdXNlIFpvbmUgZXJyb3JzXHJcbiAgICAvLyBpbiB0aGUgY29uc29sZSBiZWNhdXNlIFpvbmUgaXMgbG9hZGVkIGFzIGEgc2luZ2xldG9uLiBGdW4uIFJ1biBvdXRzaWRlIEFuZ3VsYXIuXHJcbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJyk7XHJcbiAgICAgIHRoaXMud2lkZ2V0LnJlbmRlcihjb250YWluZXIpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzcGlubmVyLlxyXG4gICAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuWzBdLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMubW91c2VNb3ZlU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMubW91c2VNb3ZlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZVVwU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMubW91c2VVcFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMudG91Y2hNb3ZlU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMudG91Y2hNb3ZlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50b3VjaEVuZFN1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLnRvdWNoRW5kU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi4vd2lkZ2V0Lm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLXdpZGdldC1jb250cm9scycsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2PlxyXG4gIDxkaXYgY2xhc3M9J3RpdGxlJz57e3dpZGdldC50aXRsZX19PC9kaXY+XHJcbiAgPGRpdiAqbmdJZj0nIXdpZGdldC5pc0Z1bGxTY3JlZW47IGVsc2UgZnVsbHNjcmVlbicgY2xhc3M9J2J1dHRvbnMgbm8taGlnaGxpZ2h0aW5nIG5vdC1ncmFiYmFibGUnPlxyXG4gICAgPHNwYW4gKm5nSWY9J3dpZGdldC5pc0V4cGFuZGVkOyBlbHNlIGV4cGFuZCcgY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvbkNvbGxhcHNlQ2xpY2soKSc+ZXhwYW5kX2xlc3M8L3NwYW4+XHJcbiAgICA8bmctdGVtcGxhdGUgI2V4cGFuZD5cclxuICAgICAgPHNwYW4gY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvbkV4cGFuZENsaWNrKCknPmV4cGFuZF9tb3JlPC9zcGFuPlxyXG4gICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgIDxzcGFuIGNsYXNzPSdtYXRlcmlhbC1pY29ucyBkLW5vbmUgZC1zbS1pbmxpbmUnIChjbGljayk9J29uVG9nZ2xlRnVsbFNjcmVlbkNsaWNrKCknPmZ1bGxzY3JlZW48L3NwYW4+XHJcbiAgICA8c3BhbiBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnIChjbGljayk9J29uQ2xvc2VDbGljaygpJz5jbG9zZTwvc3Bhbj5cclxuICA8L2Rpdj5cclxuICA8bmctdGVtcGxhdGUgI2Z1bGxzY3JlZW4+XHJcbiAgICA8ZGl2IGNsYXNzPSdtYXRlcmlhbC1pY29ucyBidXR0b25zIG5vLWhpZ2hsaWdodGluZyBub3QtZ3JhYmJhYmxlJyAoY2xpY2spPSdvblRvZ2dsZUZ1bGxTY3JlZW5DbGljaygpJz5mdWxsc2NyZWVuX2V4aXQ8L2Rpdj5cclxuICA8L25nLXRlbXBsYXRlPlxyXG48L2Rpdj5gLFxyXG4gIHN0eWxlczogW2A6aG9zdHtkaXNwbGF5OmJsb2NrO2N1cnNvcjotd2Via2l0LWdyYWI7Y3Vyc29yOmdyYWI7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbi1ib3R0b206MTVweH06aG9zdD5kaXY+LnRpdGxle3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn06aG9zdD5kaXY+ZGl2OmZpcnN0LW9mLXR5cGV7ZmxvYXQ6bGVmdH06aG9zdD5kaXY+ZGl2Omxhc3Qtb2YtdHlwZXtmbG9hdDpyaWdodDtjdXJzb3I6ZGVmYXVsdH0uZnVsbHNjcmVlbiA6aG9zdHtjdXJzb3I6ZGVmYXVsdH1gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgV2lkZ2V0Q29udHJvbHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIHdpZGdldDogV2lkZ2V0O1xyXG4gIEBPdXRwdXQoKSBjbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICBAT3V0cHV0KCkgZnVsbHNjcmVlbiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2wtMTInKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIC8vIFdlJ2xsIHNldCB0aGUgd2lkdGggb2YgdGhlIHRpdGxlIGJhc2VkIG9uIHRoZSB3aWR0aCBsZWZ0IGJ5IHRoZSBidXR0b25zLlxyXG4gICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIG92ZXJmbG93IG9uIHRoZSB0aXRsZSB3b3JrIHByb3Blcmx5LiBCdXQgd2Ugd29uJ3RcclxuICAgIC8vIGRvIHRoaXMgdW50aWwgdGhlIHN0YWNrIGlzIGVtcHR5LiBXaXRob3V0IHRoZSBzZXRUaW1lLCB0aGUgZmlyc3QgcGFnZSBsb2FkXHJcbiAgICAvLyBhZnRlciBhIEhhcmQgUmVsb2FkIGRvZXMgbm90IGNhbGN1bGF0ZSB0aGUgb2Zmc2V0V2lkdGhzIGNvcnJlY3RseS5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF07XHJcbiAgICAgIGNvbnN0IGNvbnRyb2xzV2lkdGggPSBjb250YWluZXJFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICBjb25zdCBidXR0b25zRWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbnMnKTtcclxuICAgICAgY29uc3QgYnV0dG9uc1dpZHRoID0gYnV0dG9uc0VsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSA4O1xyXG4gICAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aXRsZScpO1xyXG4gICAgICB0aXRsZUVsZW1lbnQuc3R5bGUud2lkdGggPSAoMTAwIC0gcGFkZGluZyAtIChidXR0b25zV2lkdGggLyBjb250cm9sc1dpZHRoICogMTAwKSkgKyAnJSc7ICBcclxuICAgIH0sIDApO1xyXG4gIH1cclxuXHJcbiAgb25Db2xsYXBzZUNsaWNrKCkge1xyXG4gICAgdGhpcy53aWRnZXQuY29sbGFwc2UoKTtcclxuICB9XHJcblxyXG4gIG9uRXhwYW5kQ2xpY2soKSB7XHJcbiAgICB0aGlzLndpZGdldC5leHBhbmQoKTtcclxuICB9XHJcblxyXG4gIG9uQ2xvc2VDbGljaygpIHtcclxuICAgIHRoaXMuY2xvc2UuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgb25Ub2dnbGVGdWxsU2NyZWVuQ2xpY2soKSB7XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW4uZW1pdCgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExpYnJhcnkgfSBmcm9tICcuLi9saWJyYXJ5Lm1vZGVsJztcclxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi4vd2lkZ2V0Lm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLXdpZGdldHMtbGlicmFyeScsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPSd0aXRsZSc+TGlicmFyeTwvZGl2PlxyXG48dWwgY2xhc3M9J2xpc3QtZ3JvdXAnPlxyXG4gIDxsaSAqbmdGb3I9J2xldCBsaWJyYXJ5V2lkZ2V0IG9mIGxpYnJhcnkud2lkZ2V0cycgY2xhc3M9J2xpc3QtZ3JvdXAtaXRlbSc+XHJcbiAgICA8c3Bhbj57e2xpYnJhcnlXaWRnZXQud2lkZ2V0LnRpdGxlfX08L3NwYW4+XHJcbiAgICA8IS0tIDxzcGFuICpuZ0lmPSdsaWJyYXJ5V2lkZ2V0LmlzUmVuZGVyZWQ7IGVsc2Ugbm90JyBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnIChjbGljayk9J29uUmVtb3ZlV2lkZ2V0KGxpYnJhcnlXaWRnZXQud2lkZ2V0KSc+cmVtb3ZlX2NpcmNsZV9vdXRsaW5lPC9zcGFuPlxyXG4gICAgPG5nLXRlbXBsYXRlICNub3Q+XHJcbiAgICAgIDxzcGFuIGNsYXNzPSdtYXRlcmlhbC1pY29ucycgKGNsaWNrKT0nb25BZGRXaWRnZXQobGlicmFyeVdpZGdldC53aWRnZXQpJz5hZGRfY2lyY2xlX291dGxpbmU8L3NwYW4+XHJcbiAgICA8L25nLXRlbXBsYXRlPiAtLT5cclxuICAgIDwhLS0gPGRpdiBjbGFzcz0ncHJldHR5IHAtc3dpdGNoIHAtZmlsbCc+XHJcbiAgICAgIDxpbnB1dCBpZD0nbGlicmFyeVdpZGdldC53aWRnZXQuaWQnIHR5cGU9J2NoZWNrYm94JyBbY2hlY2tlZF09J2xpYnJhcnlXaWRnZXQuaXNSZW5kZXJlZCcgKGNoYW5nZSk9J29uQ2hlY2tib3hDaGFuZ2UobGlicmFyeVdpZGdldCknIC8+XHJcbiAgICA8L2Rpdj4gLS0+XHJcbiAgICA8c3BhbiBjbGFzcz0ncHJldHR5IHAtc3dpdGNoIHAtZmlsbCc+XHJcbiAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgW2NoZWNrZWRdPSdsaWJyYXJ5V2lkZ2V0LmlzUmVuZGVyZWQnIChjaGFuZ2UpPSdvbkNoZWNrYm94Q2hhbmdlKGxpYnJhcnlXaWRnZXQpJyAvPlxyXG4gICAgICA8ZGl2IGNsYXNzPSdzdGF0ZSBwLXN1Y2Nlc3MnPlxyXG4gICAgICAgIDxsYWJlbD48L2xhYmVsPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvc3Bhbj5cclxuICA8L2xpPlxyXG48L3VsPlxyXG48ZGl2IGNsYXNzPSdidXR0b24tY29udGFpbmVyJz5cclxuICA8YnV0dG9uIGNsYXNzPSdidG4gYnRuLXByaW1hcnknIChjbGljayk9J29uRG9uZUNsaWNrKCknPkRvbmU8L2J1dHRvbj5cclxuPC9kaXY+YCxcclxuICBzdHlsZXM6IFtgOmhvc3R7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDA7YmFja2dyb3VuZDojZmZmfXVse2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjA7bWFyZ2luLWJvdHRvbToyMHB4fXVsPmxpe292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfXVsPmxpPnNwYW46Zmlyc3Qtb2YtdHlwZXtmbG9hdDpsZWZ0O21hcmdpbi1yaWdodDozMHB4fXVsPmxpPnNwYW46bGFzdC1vZi10eXBle2Zsb2F0OnJpZ2h0O21hcmdpbi10b3A6NXB4fWxhYmVsOmFmdGVye21hcmdpbi10b3A6LTFweH0ucHJldHR5IGlucHV0e3dpZHRoOjIwMCV9YF1cclxufSlcclxuZXhwb3J0IGNsYXNzIExpYnJhcnlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIGxpYnJhcnk6IExpYnJhcnk7XHJcbiAgQE91dHB1dCgpIGRvbmUgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgQE91dHB1dCgpIHJlbmRlcldpZGdldCA9IG5ldyBFdmVudEVtaXR0ZXI8V2lkZ2V0PigpO1xyXG4gIEBPdXRwdXQoKSBkZXJlbmRlcldpZGdldCA9IG5ldyBFdmVudEVtaXR0ZXI8V2lkZ2V0PigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjYXJkJywgJ2NhcmQtcm93JywgJ3BvcHVwJyk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50XHJcbiAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAud2lkdGg7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS50b3AgPSAodGhpcy5saWJyYXJ5LnlQb3NpdGlvbiAtIDIwKSArICdweCc7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5sZWZ0ID0gKHRoaXMubGlicmFyeS54UG9zaXRpb24gLSB3aWR0aCArIDIwKSArICdweCc7XHJcbiAgfVxyXG5cclxuICBvbkRvbmVDbGljaygpOiB2b2lkIHtcclxuICAgIHRoaXMuZG9uZS5lbWl0KCk7XHJcbiAgfVxyXG5cclxuICBvbkNoZWNrYm94Q2hhbmdlKGxpYnJhcnlXaWRnZXQ6IGFueSkge1xyXG4gICAgaWYgKGxpYnJhcnlXaWRnZXQuaXNSZW5kZXJlZCkge1xyXG4gICAgICB0aGlzLmxpYnJhcnkuZGVyZW5kZXJXaWRnZXQobGlicmFyeVdpZGdldC53aWRnZXQpO1xyXG4gICAgICB0aGlzLmRlcmVuZGVyV2lkZ2V0LmVtaXQobGlicmFyeVdpZGdldC53aWRnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5saWJyYXJ5LnJlbmRlcldpZGdldChsaWJyYXJ5V2lkZ2V0LndpZGdldCk7XHJcbiAgICAgIHRoaXMucmVuZGVyV2lkZ2V0LmVtaXQobGlicmFyeVdpZGdldC53aWRnZXQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEVsZW1lbnRSZWYsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi4vd2lkZ2V0Lm1vZGVsJztcclxuaW1wb3J0IHsgQm9vdHN0cmFwU2VydmljZSB9IGZyb20gJy4uL2Jvb3RzdHJhcC5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLXdpZGdldC1kcm9wLXRhcmdldCcsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPSdjYXJkIGNhcmQtcm93Jz48L2Rpdj5gLFxyXG4gIHN0eWxlczogW2A6aG9zdD5kaXZ7YmFja2dyb3VuZDojZDNkM2QzO2hlaWdodDoxMDAlO21hcmdpbjowfWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEcm9wVGFyZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcclxuICBASW5wdXQoKSBkcm9wVGFyZ2V0OiBXaWRnZXQ7XHJcbiAgQElucHV0KCkgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBib290c3RyYXBTZXJ2aWNlOiBCb290c3RyYXBTZXJ2aWNlKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodCArICdweCc7XHJcbiAgICBjb25zdCBjbGFzc2VzOiBzdHJpbmdbXSA9IHRoaXMuYm9vdHN0cmFwU2VydmljZS5nZXRDbGFzc2VzKHRoaXMuZHJvcFRhcmdldCk7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJvb3RzdHJhcFNlcnZpY2UgfSBmcm9tICcuLi9ib290c3RyYXAuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC13aWRnZXQtcmVzaXplLWd1aWRlbGluZScsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IChtb3VzZWVudGVyKT0nb25Ib3ZlcigpJyAodG91Y2hlbnRlcik9J29uSG92ZXIoKSc+PC9kaXY+YCxcclxuICBzdHlsZXM6IFtgOmhvc3R7cG9zaXRpb246YWJzb2x1dGV9Omhvc3Q+ZGl2e2JvcmRlci1yaWdodDoxcHggZG90dGVkIGdyZWVuO2hlaWdodDoxMDAlfWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNpemVHdWlkZWxpbmVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xyXG4gIEBJbnB1dCgpIGd1aWRlbGluZTogYW55O1xyXG4gIEBPdXRwdXQoKSByZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBib290c3RyYXBTZXJ2aWNlOiBCb290c3RyYXBTZXJ2aWNlKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xyXG4gICAgY29uc3QgdGhpc0VsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgIHRoaXNFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5ib290c3RyYXBTZXJ2aWNlLmNvbHVtblByZWZpeCArIHRoaXMuZ3VpZGVsaW5lLndpZHRoT2ZHdWlkZWxpbmUpO1xyXG4gICAgdGhpc0VsZW1lbnQuc3R5bGUudG9wID0gKHRoaXMuZ3VpZGVsaW5lLnRvcCArIHdpbmRvdy5zY3JvbGxZKSArICdweCc7XHJcbiAgICB0aGlzRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmd1aWRlbGluZS5oZWlnaHQgKyAncHgnO1xyXG4gIH1cclxuXHJcbiAgb25Ib3ZlcigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHdpZGdldCA9IHRoaXMuZ3VpZGVsaW5lLndpZGdldDtcclxuICAgIGlmICh0aGlzLmd1aWRlbGluZS50YXJnZXRXaWR0aE9mV2lkZ2V0ICE9PSB0aGlzLmJvb3RzdHJhcFNlcnZpY2UuZ2V0V2lkdGgod2lkZ2V0LmdldEN1cnJlbnRXaWR0aC5iaW5kKHdpZGdldCkpKSB7XHJcbiAgICAgIHRoaXMuYm9vdHN0cmFwU2VydmljZS5yZXNpemUodGhpcy5ndWlkZWxpbmUud2lkZ2V0LCB0aGlzLmd1aWRlbGluZS50YXJnZXRXaWR0aE9mV2lkZ2V0KTtcclxuICAgICAgdGhpcy5yZXNpemVkLmVtaXQodGhpcy5ndWlkZWxpbmUud2lkZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMYXlvdXRFZGl0b3IgfSBmcm9tICcuLi9sYXlvdXQtZWRpdG9yLm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLXdpZGdldHMtbGF5b3V0LWVkaXRvcicsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPSd0aXRsZSc+TGF5b3V0IEVkaXRvcjwvZGl2PlxyXG48cD5cclxuICA8Yj5Db21pbmcgU29vbiE8L2I+XHJcbjwvcD5cclxuPHA+XHJcbiAgVGhpcyB3aWxsIGFsbG93IHNvbWUgdXNlcnMgdG8gZWRpdCBwYWdlcyBhbmQgbWFrZSBjdXN0b20gbGF5b3V0cyB0YXJnZXRlZCBmb3Igc3BlY2lmaWMgcm9sZXMgaW4geW91ciBvcmdhbml6YXRpb24uXHJcbjwvcD5cclxuPHA+XHJcbiAgRm9yIG5vdywgY2hhbmdlcyBtYWRlIHdpbGwgbm90IGJlIHNhdmVkLlxyXG48L3A+XHJcbjxkaXYgY2xhc3M9J2J1dHRvbi1jb250YWluZXInPlxyXG4gIDxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgKGNsaWNrKT0nb25Eb25lQ2xpY2soKSc+RG9uZTwvYnV0dG9uPlxyXG48L2Rpdj5gLFxyXG4gIHN0eWxlczogW2A6aG9zdHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwMDtiYWNrZ3JvdW5kOiNmZmZ9YF1cclxufSlcclxuZXhwb3J0IGNsYXNzIExheW91dEVkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQElucHV0KCkgbGF5b3V0RWRpdG9yOiBMYXlvdXRFZGl0b3I7XHJcbiAgQE91dHB1dCgpIGRvbmUgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkgeyB9XHJcblxyXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NhcmQnLCAnY2FyZC1yb3cnLCAnY29sLTgnLCAnY29sLXNtLTYnLCAncG9wdXAnKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnRcclxuICAgICAgLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICAgIC53aWR0aDtcclxuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLnRvcCA9ICh0aGlzLmxheW91dEVkaXRvci55UG9zaXRpb24gLSAyMCkgKyAncHgnO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUubGVmdCA9ICh0aGlzLmxheW91dEVkaXRvci54UG9zaXRpb24gLSB3aWR0aCArIDIwKSArICdweCc7XHJcbiAgfVxyXG5cclxuICBvbkRvbmVDbGljaygpOiB2b2lkIHtcclxuICAgIHRoaXMuZG9uZS5lbWl0KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJyb3dzZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEJvb3RzdHJhcFNlcnZpY2UgfSBmcm9tICcuL3dpZGdldHMvYm9vdHN0cmFwLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgRGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9kYXNoYm9hcmQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvcGFuZWwvcGFuZWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUGFuZWxDb250cm9sc0NvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0cy9wYW5lbC1jb250cm9scy9wYW5lbC1jb250cm9scy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTcGFjZXJDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvc3BhY2VyL3NwYWNlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvd2lkZ2V0L3dpZGdldC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBXaWRnZXRDb250cm9sc0NvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0cy93aWRnZXQtY29udHJvbHMvd2lkZ2V0LWNvbnRyb2xzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExpYnJhcnlDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvbGlicmFyeS9saWJyYXJ5LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERyb3BUYXJnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvZHJvcC10YXJnZXQvZHJvcC10YXJnZXQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUmVzaXplR3VpZGVsaW5lQ29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXRzL3Jlc2l6ZS1ndWlkZWxpbmUvcmVzaXplLWd1aWRlbGluZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMYXlvdXRFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvbGF5b3V0LWVkaXRvci9sYXlvdXQtZWRpdG9yLmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRGFzaGJvYXJkQ29tcG9uZW50LFxyXG4gICAgUGFuZWxDb21wb25lbnQsXHJcbiAgICBTcGFjZXJDb21wb25lbnQsXHJcbiAgICBQYW5lbENvbnRyb2xzQ29tcG9uZW50LFxyXG4gICAgV2lkZ2V0Q29tcG9uZW50LFxyXG4gICAgV2lkZ2V0Q29udHJvbHNDb21wb25lbnQsXHJcbiAgICBMaWJyYXJ5Q29tcG9uZW50LFxyXG4gICAgRHJvcFRhcmdldENvbXBvbmVudCxcclxuICAgIFJlc2l6ZUd1aWRlbGluZUNvbXBvbmVudCxcclxuICAgIExheW91dEVkaXRvckNvbXBvbmVudFxyXG4gIF0sXHJcbiAgaW1wb3J0czogW0Jyb3dzZXJNb2R1bGVdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIERhc2hib2FyZENvbXBvbmVudCxcclxuICAgIFBhbmVsQ29tcG9uZW50LFxyXG4gICAgU3BhY2VyQ29tcG9uZW50LFxyXG4gICAgUGFuZWxDb250cm9sc0NvbXBvbmVudCxcclxuICAgIFdpZGdldENvbXBvbmVudCxcclxuICAgIFdpZGdldENvbnRyb2xzQ29tcG9uZW50LFxyXG4gICAgTGlicmFyeUNvbXBvbmVudCxcclxuICAgIERyb3BUYXJnZXRDb21wb25lbnQsXHJcbiAgICBSZXNpemVHdWlkZWxpbmVDb21wb25lbnQsXHJcbiAgICBMYXlvdXRFZGl0b3JDb21wb25lbnRcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW0Jvb3RzdHJhcFNlcnZpY2VdLFxyXG4gIGJvb3RzdHJhcDogW0Rhc2hib2FyZENvbXBvbmVudF1cclxufSlcclxuZXhwb3J0IGNsYXNzIERhc2hib2FyZE1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoV2lkZ2V0c1NlcnZpY2UpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBEYXNoYm9hcmRNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogJ3dpZGdldHNTZXJ2aWNlJywgdXNlQ2xhc3M6IFdpZGdldHNTZXJ2aWNlIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IHR5cGUgUmVuZGVyRnVuYyA9IChIdG1sRWxlbWVudCkgPT4gUHJvbWlzZTx2b2lkPjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVdpZHRoIHtcclxuICB4czogbnVtYmVyO1xyXG4gIHNtPzogbnVtYmVyO1xyXG4gIG1kPzogbnVtYmVyO1xyXG4gIGxnPzogbnVtYmVyO1xyXG4gIHhsPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2lkZ2V0IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgaW5pdGlhbEhlaWdodDogc3RyaW5nO1xyXG4gIHJlbmRlcjogUmVuZGVyRnVuYztcclxuICBpc0hpZGRlbjogYm9vbGVhbjtcclxuICBpc0V4cGFuZGVkID0gdHJ1ZTtcclxuICBpc0Z1bGxTY3JlZW4gPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICB0aXRsZTogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSBjdXJyZW50V2lkdGg6IElXaWR0aCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbWluaW11bVdpZHRoOiBJV2lkdGgsXHJcbiAgICBpbml0aWFsSGVpZ2h0OiBzdHJpbmcsXHJcbiAgICByZW5kZXI6IFJlbmRlckZ1bmMsXHJcbiAgICBpc0hpZGRlbjogYm9vbGVhbikge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgdGhpcy5pbml0aWFsSGVpZ2h0ID0gaW5pdGlhbEhlaWdodDtcclxuICAgIHRoaXMucmVuZGVyID0gKHJlbmRlciBhcyBhbnkpLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmlzSGlkZGVuID0gaXNIaWRkZW47XHJcbiAgICB0aGlzLmN1cnJlbnRXaWR0aCA9IGN1cnJlbnRXaWR0aDtcclxuXHJcbiAgICAvLyBUaGlzIHVzZXMgT2JqZWN0LmFzc2lnbiB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IGZyb20gdGhlIG9uZSBwYXNzZWQgaW4uXHJcbiAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgdGhlIGluc3RhbnRpYXRvciBmcm9tIHBhc3NpbmcgaW4gb25lIG9iamVjdCB0byBib3RoXHJcbiAgICAvLyBjdXJyZW50V2lkdGggYW5kIG1pbmltdW1XaWR0aCBhbmQgdGhlbiBoYXZpbmcgdGhhdCBvYmplY3QgcmVmIGFzc2lnbmVkXHJcbiAgICAvLyB0byBib3RoIHByb3BlcnRpZXMuIElmIHRoYXQgd2VyZSB0byBoYXBwZW4sIHRoZW4gdXBkYXRpbmcgdGhlXHJcbiAgICAvLyBjdXJyZW50V2lkdGggd291bGQgYWxzbyB1cGRhdGUgdGhlIG1pbmltdW1XaWR0aC4gVGhlIG1pbmltdW1XaWR0aFxyXG4gICAgLy8gc2hvdWxkIG5ldmVyIGJlIGNoYW5nZWQgb25jZSBzZXQuXHJcbiAgICB0aGlzLm1pbmltdW1XaWR0aCA9IE9iamVjdC5hc3NpZ24oe30sIG1pbmltdW1XaWR0aCk7XHJcbiAgICBPYmplY3QuZnJlZXplKHRoaXMubWluaW11bVdpZHRoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVBdmFpbGFibGVXaWRnZXQoeyBpZCwgdGl0bGUsIHdpZHRoLCBpbml0aWFsSGVpZ2h0LCByZW5kZXIgfSkge1xyXG4gICAgcmV0dXJuIG5ldyBXaWRnZXQoaWQsIHRpdGxlLCB3aWR0aCwgd2lkdGgsIGluaXRpYWxIZWlnaHQsIHJlbmRlciwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZVJlbmRlcmVkV2lkZ2V0KHsgaWQsIHRpdGxlLCBjdXJyZW50V2lkdGgsIG1pbmltdW1XaWR0aCwgaW5pdGlhbEhlaWdodCwgcmVuZGVyIH0pIHtcclxuICAgIHJldHVybiBuZXcgV2lkZ2V0KGlkLCB0aXRsZSwgY3VycmVudFdpZHRoLCBtaW5pbXVtV2lkdGgsIGluaXRpYWxIZWlnaHQsIHJlbmRlciwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q3VycmVudFdpZHRoKGJyZWFrcG9pbnQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFdpZHRoW2JyZWFrcG9pbnRdO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q3VycmVudFdpZHRocygpIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIGdldE1pbmltdW1XaWR0aChicmVha3BvaW50OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLm1pbmltdW1XaWR0aFticmVha3BvaW50XTtcclxuICB9XHJcblxyXG4gIG1ha2VGdWxsV2lkdGgoYnJlYWtwb2ludDogc3RyaW5nLCB3aWR0aDogbnVtYmVyKSB7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50V2lkdGhbYnJlYWtwb2ludF0pIHtcclxuICAgICAgdGhpcy5jdXJyZW50V2lkdGhbYnJlYWtwb2ludF0gPSB3aWR0aDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc2l6ZShicmVha3BvaW50OiBzdHJpbmcsIHdpZHRoOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuY3VycmVudFdpZHRoW2JyZWFrcG9pbnRdID0gd2lkdGg7XHJcbiAgfVxyXG5cclxuICBleHBhbmQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgY29sbGFwc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUZ1bGxTY3JlZW4oKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzRnVsbFNjcmVlbiA9ICF0aGlzLmlzRnVsbFNjcmVlbjtcclxuICB9XHJcblxyXG4gIGNsb25lKCk6IFdpZGdldCB7XHJcbiAgICByZXR1cm4gbmV3IFdpZGdldChcclxuICAgICAgdGhpcy5pZCxcclxuICAgICAgdGhpcy50aXRsZSxcclxuICAgICAgdGhpcy5jdXJyZW50V2lkdGgsXHJcbiAgICAgIHRoaXMubWluaW11bVdpZHRoLFxyXG4gICAgICB0aGlzLmluaXRpYWxIZWlnaHQsXHJcbiAgICAgIHRoaXMucmVuZGVyLFxyXG4gICAgICB0aGlzLmlzSGlkZGVuKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkluamVjdGFibGUiLCJDb21wb25lbnQiLCJFdmVudEVtaXR0ZXIiLCJFbGVtZW50UmVmIiwiSW5wdXQiLCJPdXRwdXQiLCJPYnNlcnZhYmxlIiwiSW5qZWN0IiwiRE9DVU1FTlQiLCJIb3N0TGlzdGVuZXIiLCJOZ1pvbmUiLCJOZ01vZHVsZSIsIkJyb3dzZXJNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQWtCRTs4QkFic0IsRUFBRTtnQ0FDQSxNQUFNOytCQUdDO2dCQUM3QixFQUFFLEVBQUUsV0FBVztnQkFDZixFQUFFLEVBQUUsV0FBVztnQkFDZixFQUFFLEVBQUUsV0FBVztnQkFDZixFQUFFLEVBQUUsV0FBVztnQkFDZixFQUFFLEVBQUUsUUFBUTthQUNiO1NBR2dCOzs7O1FBS1QsK0NBQW9COzs7O2dCQUMxQixxQkFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO2dCQUVwQixxQkFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO2dCQUNuQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbEMscUJBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUVyRCxLQUFLLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQzlDLFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDbkQscUJBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDOUMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTt3QkFDNUIsTUFBTTtxQkFDUDtpQkFDRjtnQkFFRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2hCLE9BQU8sVUFBVSxDQUFDOzs7OztRQUdwQiwrQ0FBb0I7OztZQUFwQjtnQkFDRSxxQkFBTSxVQUFVLEdBQVcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Z0JBQ3ZELElBQUksVUFBVSxLQUFLLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtvQkFDekMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBQztvQkFDcEMsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7YUFDZDs7Ozs7UUFFRCxtQ0FBUTs7OztZQUFSLFVBQVMsUUFBNEI7Z0JBQ25DLHFCQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztnQkFDN0MscUJBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDakMsSUFBSSxDQUFDLEtBQUssRUFBRTs7b0JBRVYscUJBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNsRSxPQUFPLENBQUMsS0FBSyxJQUFJLGtCQUFrQixDQUFDLE1BQU0sRUFBRTt3QkFDMUMsVUFBVSxHQUFHLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUN4QyxLQUFLLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3FCQUM5QjtpQkFDRjtnQkFDRCxPQUFPLEtBQUssQ0FBQzthQUNkOzs7OztRQUVELHdDQUFhOzs7O1lBQWIsVUFBYyxhQUF1QztnQkFBckQsaUJBUUM7Z0JBUEMscUJBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDOztnQkFFL0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQztxQkFDbkMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7cUJBQ3BCLE9BQU8sQ0FBQyxVQUFBLENBQUM7b0JBQ1IsYUFBYSxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ25DLENBQUMsQ0FBQzthQUNOOzs7Ozs7UUFFRCxpQ0FBTTs7Ozs7WUFBTixVQUFPLE1BQWMsRUFBRSxtQkFBMkI7Z0JBQ2hELHFCQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztnQkFDN0MscUJBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9DLElBQUksQ0FBQyxLQUFLLEVBQUU7O29CQUVWLHFCQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDbEUsT0FBTyxDQUFDLEtBQUssSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEVBQUU7d0JBQzFDLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDeEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7cUJBQzVDO2lCQUNGO2dCQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7YUFDaEQ7Ozs7O1FBRUQscUNBQVU7Ozs7WUFBVixVQUFXLE1BQWM7Z0JBQ3ZCLHFCQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDekMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztxQkFDdkIsR0FBRyxDQUFDLFVBQUEsQ0FBQztvQkFDSixxQkFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7d0JBQ2QsT0FBTyxNQUFNLEdBQUcsS0FBSyxDQUFDO3FCQUN2QjtvQkFDRCxPQUFPLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztpQkFDakMsQ0FBQyxDQUFDO2FBQ047Ozs7O1FBRU8sZ0RBQXFCOzs7O3NCQUFDLFVBQVU7Z0JBQ3RDLHFCQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDckQscUJBQU0sa0JBQWtCLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FDN0MsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQ3RDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDekIsT0FBTyxrQkFBa0IsQ0FBQzs7O29CQXpHN0JBLGVBQVU7Ozs7K0JBSFg7Ozs7Ozs7QUNBQTs7OztvQkFFQ0MsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxlQUFlO3dCQUN6QixRQUFRLEVBQUUscURBQXFEO3dCQUMvRCxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7cUJBQ2I7O2lDQU5EOzs7Ozs7O0FDQUE7UUFhRSx5QkFBb0IsVUFBc0I7WUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtpQ0FIaEIsSUFBSUMsaUJBQVksRUFBbUI7bUNBQ2pDLElBQUlBLGlCQUFZLEVBQVE7U0FFTDs7OztRQUUvQyxrQ0FBUTs7O1lBQVIsZUFBYzs7OztRQUVkLDRDQUFrQjs7O1lBQWxCO2dCQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDdkQ7Ozs7UUFFRCxzQ0FBWTs7O1lBQVo7Z0JBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDL0I7Ozs7UUFFRCxzQ0FBWTs7O1lBQVo7Z0JBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDL0I7Ozs7UUFFRCxzQ0FBWTs7O1lBQVo7Z0JBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUM3Qjs7OztRQUVELHNDQUFZOzs7WUFBWjtnQkFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzdCOztvQkFqQ0ZELGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsMEJBQTBCO3dCQUNwQyxRQUFRLEVBQUUsdUlBQ0w7d0JBQ0wsTUFBTSxFQUFFLENBQUMsMENBQTBDLENBQUM7cUJBQ3JEOzs7Ozt3QkFQMkJFLGVBQVU7Ozs7K0JBU25DQyxVQUFLO3NDQUNMQyxXQUFNO3dDQUNOQSxXQUFNOzs4QkFYVDs7Ozs7OztJQ09BLElBQUE7UUFNRSxpQkFBb0IsZUFBeUIsRUFBVSxnQkFBMEI7WUFBN0Qsb0JBQWUsR0FBZixlQUFlLENBQVU7WUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVU7K0JBTG5FLEtBQUs7WUFNakIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JCOzs7OztRQUVPLGtDQUFnQjs7OztzQkFBQyxNQUFNO2dCQUM3QixPQUFPLElBQUksQ0FBQyxlQUFlO3FCQUN4QixHQUFHLENBQUMsVUFBQSxjQUFjLElBQUksT0FBQSxjQUFjLENBQUMsRUFBRSxHQUFBLENBQUM7cUJBQ3hDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7OztRQUdyQiw4QkFBWTs7Ozs7Z0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU07b0JBQzdDLHFCQUFNLFVBQVUsR0FBRyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ2pELE9BQU8sRUFBRSxVQUFVLFlBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDO2lCQUMvQixDQUFDLENBQUM7Ozs7Ozs7UUFHTCxzQkFBSTs7Ozs7WUFBSixVQUFLLFNBQWlCLEVBQUUsU0FBaUI7Z0JBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2dCQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7YUFDNUI7Ozs7UUFFRCxzQkFBSTs7O1lBQUo7Z0JBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzthQUN2Qjs7Ozs7UUFFRCw4QkFBWTs7OztZQUFaLFVBQWEsTUFBYztnQkFDekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUNyQjs7Ozs7UUFFRCxnQ0FBYzs7OztZQUFkLFVBQWUsTUFBYztnQkFBN0IsaUJBT0M7Z0JBTkMsSUFBSSxDQUFDLGVBQWU7cUJBQ2pCLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLEVBQUUsR0FBQSxDQUFDO3FCQUMvQixPQUFPLENBQUMsVUFBQSxDQUFDO29CQUNSLEtBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNqRSxDQUFDLENBQUM7Z0JBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3JCO3NCQXRESDtRQXVEQyxDQUFBOzs7Ozs7SUN2REQsSUFBQTtRQUtFOytCQUpjLEtBQUs7U0FJRjs7Ozs7O1FBRWpCLDJCQUFJOzs7OztZQUFKLFVBQUssU0FBaUIsRUFBRSxTQUFpQjtnQkFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO2dCQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQzthQUM1Qjs7OztRQUVELDJCQUFJOzs7WUFBSjtnQkFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztnQkFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2FBQ3ZCOzJCQWpCSDtRQWtCQyxDQUFBOzs7Ozs7QUNsQkQ7UUFvREUsd0JBQzRCLFVBQ1EsZ0JBQzFCO1lBRmtCLGFBQVEsR0FBUixRQUFRO1lBQ0EsbUJBQWMsR0FBZCxjQUFjO1lBQ3hDLHFCQUFnQixHQUFoQixnQkFBZ0I7Z0NBckJYLElBQUksWUFBWSxFQUFFO29DQUVQLEVBQUU7c0NBT0MsS0FBSztTQWFqQzs7OztRQVY4QixpQ0FBUTs7OztnQkFDckMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLEVBQUUsRUFBRTtvQkFDaEQsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7aUJBQzdCOzs7OztRQVNLLHVEQUE4Qjs7OztnQkFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOzs7OztRQUc5QywwQ0FBaUI7Ozs7Z0JBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7Ozs7UUFHakQscUNBQVk7Ozs7Z0JBQ2xCLE9BQU87b0JBQ0wsTUFBTSxFQUFFLEVBQUU7aUJBQ1gsQ0FBQzs7Ozs7UUFHSSxxQ0FBWTs7OztnQkFDbEIsS0FBSyxxQkFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQy9DLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7d0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDekI7aUJBQ0Y7Ozs7O1FBR0ssNkNBQW9COzs7OztnQkFDMUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUVwQixxQkFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO2dCQUN2QixxQkFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVsQyxLQUFLLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQyxxQkFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7b0JBRWhFLElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFO3dCQUM5RSxTQUFTO3FCQUNWO29CQUVELHFCQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3hGLGNBQWMsSUFBSSxXQUFXLENBQUM7b0JBRTlCLElBQUksY0FBYyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7d0JBQ3ZELHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQ2xDLGNBQWMsR0FBRyxDQUFDLENBQUM7cUJBQ3BCO3lCQUFNLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7d0JBQzVELHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDOUIsY0FBYyxHQUFHLFdBQVcsQ0FBQztxQkFDOUI7aUJBQ0Y7Z0JBRUQscUJBQXFCO3FCQUNsQixPQUFPLEVBQUU7cUJBQ1QsT0FBTyxDQUFDLFVBQUEsQ0FBQztvQkFDUixLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO2lCQUM5QyxDQUFDLENBQUM7Z0JBRUwsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO29CQUM3QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztpQkFDdEM7Ozs7O1FBR0ssc0NBQWE7Ozs7Z0JBQ25CLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztnQkFFbkQsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7b0JBQzNCLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7aUJBQzVEO3FCQUFNO29CQUNMLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7aUJBQzNEOzs7OztRQUdILGlDQUFROzs7WUFBUjtnQkFDRSxxQkFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUNqRSxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO29CQUNoQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO2lCQUN0QixDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Z0JBQzVCLHFCQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztnQkFDbkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzthQUMvRDs7Ozs7UUFFRCxzQ0FBYTs7OztZQUFiLFVBQWMsS0FBVTtnQkFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN0Qjs7OztRQUVELHNDQUFhOzs7WUFBYjtnQkFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDdEI7Ozs7UUFFTyxnREFBdUI7Ozs7Z0JBQzdCLEtBQUsscUJBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQzFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUU7d0JBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDekI7aUJBQ0Y7Ozs7Ozs7UUFHSywyQ0FBa0I7Ozs7O3NCQUFDLFlBQVksRUFBRSxXQUFXO2dCQUNsRCxxQkFBTSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsS0FBSztxQkFDdkMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sR0FBQSxDQUFDO3FCQUNsQixPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sV0FBVyxHQUFHLHVCQUF1QixDQUFDOzs7Ozs7O1FBR3ZDLHlDQUFnQjs7Ozs7c0JBQUMsZUFBb0IsRUFBRSxXQUE0QjtnQkFDekUsSUFBSSxDQUFDLFdBQVcsRUFBRTtvQkFDaEIsV0FBVyxHQUFHLGVBQWUsQ0FBQztpQkFDL0I7Z0JBQ0QsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7Z0JBQy9CLHFCQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUM5QyxxQkFBSSxXQUFtQixDQUFDO2dCQUV4QixJQUFJLGVBQWUsWUFBWSxlQUFlLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDL0UsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLO3lCQUNyQixHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxHQUFBLENBQUM7eUJBQ2xCLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3BDO3FCQUFNO29CQUNMLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSzt5QkFDckIsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sR0FBQSxDQUFDO3lCQUNsQixPQUFPLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNuQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUFFO3dCQUM1RCxXQUFXLEVBQUUsQ0FBQztxQkFDZjtpQkFDRjtnQkFFRCxxQkFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixFQUFFLENBQUMsTUFBTSxDQUFDO2dCQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzs7Ozs7O1FBR2hGLHFDQUFZOzs7O1lBQVosVUFBYSxlQUFnQztnQkFDM0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGVBQWUsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDOUM7Ozs7UUFFRCx3Q0FBZTs7O1lBQWY7Z0JBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxHQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxFQUN4RSxDQUFDLENBQUMsQ0FBQztnQkFDTCxLQUFLLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFO3dCQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO3dCQUN2RSxNQUFNO3FCQUNQO2lCQUNGO2dCQUNELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUN6QixJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO2dCQUNsQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzthQUM3Qjs7Ozs7UUFFRCx3Q0FBZTs7OztZQUFmLFVBQWdCLGVBQWdDO2dCQUFoRCxpQkFlQztnQkFkQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO29CQUMvQixPQUFPO2lCQUNSO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHQyxxQkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7cUJBQzNDLEtBQUssQ0FBQyxFQUFFLENBQUM7cUJBQ1QsU0FBUyxDQUFDO29CQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDaEMsSUFBSSxDQUFDLEtBQUksQ0FBQyxxQkFBcUIsRUFBRTt3QkFDL0IsT0FBTztxQkFDUjtvQkFDRCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO29CQUNuRSxLQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztpQkFDN0IsQ0FBQyxDQUFDO2FBQ047Ozs7UUFFRCwwQ0FBaUI7OztZQUFqQjtnQkFDRSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDO29CQUN6QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO2lCQUNuQzthQUNGOzs7OztRQUVELHdDQUFlOzs7O1lBQWYsVUFBZ0IsZUFBZ0M7Z0JBQWhELGlCQWFDO2dCQVpDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7b0JBQy9CLE9BQU87aUJBQ1I7Z0JBQ0QsSUFBSSxDQUFDLHFCQUFxQixHQUFHQSxxQkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7cUJBQzNDLEtBQUssQ0FBQyxHQUFHLENBQUM7cUJBQ1YsU0FBUyxDQUFDO29CQUNULElBQUksQ0FBQyxLQUFJLENBQUMscUJBQXFCLEVBQUU7d0JBQy9CLE9BQU87cUJBQ1I7b0JBQ0QsS0FBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsRUFBRSxLQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztvQkFDbkUsS0FBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7aUJBQzdCLENBQUMsQ0FBQzthQUNOOzs7O1FBRUQsMENBQWlCOzs7WUFBakI7Z0JBQ0UsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7b0JBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFDekMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztpQkFDbkM7YUFDRjs7OztRQUVPLGlDQUFROzs7O2dCQUNkLHFCQUFNLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QscUJBQUksZUFBZSxHQUFHLENBQUMsQ0FBQztnQkFDeEIscUJBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLO3FCQUN2QixNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxHQUFBLENBQUM7cUJBQ3JCLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEdBQUEsQ0FBQyxDQUFDO2dCQUV0QixLQUFLLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZDLHFCQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLHFCQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCO3lCQUNoQyxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNuQyxlQUFlLElBQUksS0FBSyxDQUFDO29CQUN6QixxQkFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUM5QyxJQUFJLFlBQVksRUFBRTt3QkFDaEIsTUFBTTtxQkFDUDtvQkFDRCxJQUFJLGVBQWUsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFO3dCQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUNkLGVBQWUsR0FBRyxDQUFDLENBQUM7cUJBQ3JCO3lCQUFNOzt3QkFFTCxxQkFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzt3QkFDbEMscUJBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0I7NkJBQzFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO3dCQUN6RCxxQkFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQzt3QkFDakYsSUFBSSxlQUFlLEdBQUcscUJBQXFCLEVBQUU7NEJBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ2QsZUFBZSxHQUFHLENBQUMsQ0FBQzt5QkFDckI7cUJBQ0Y7aUJBQ0Y7Z0JBRUQsT0FBTyxJQUFJLENBQUM7Ozs7OztRQUdOLGdEQUF1Qjs7OztzQkFBQyxNQUFjOzs7OztnQkFLNUMscUJBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDN0IsS0FBSyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNwQyxxQkFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDNUMsSUFBSSxXQUFXLElBQUksQ0FBQyxFQUFFO3dCQUNwQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDaEI7aUJBQ0Y7Ozs7OztRQUdLLDRDQUFtQjs7OztzQkFBQyxNQUFjOztnQkFDeEMscUJBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3hCLHFCQUFNLGVBQWUsR0FBRyxHQUFHO3FCQUN4QixLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNqQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUEsQ0FBQztxQkFDbkUsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsR0FBRyxDQUFDLEdBQUEsQ0FBQyxDQUFDO2dCQUMzQixxQkFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN6RixxQkFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQzs7Z0JBRzNHLHFCQUFNLElBQUksR0FBRyxlQUFlLEdBQUcsZUFBZSxDQUFDOztnQkFFL0MscUJBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7O2dCQUUvQyxxQkFBTSxNQUFNLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQztnQkFDbkMsT0FBTyxFQUFFLElBQUksTUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUM7Ozs7OztRQUd6Qiw2Q0FBb0I7Ozs7c0JBQUMsZUFBZ0M7Z0JBQzNELHFCQUFNLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2dCQUNqRSxxQkFBTSxVQUFVLEdBQVEsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDekUsS0FBSyxxQkFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTs7Ozs7b0JBS3hELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7d0JBQzVCLGdCQUFnQixFQUFFLENBQUM7d0JBQ25CLG1CQUFtQixFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTTt3QkFDMUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLEdBQUc7d0JBQzFCLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxNQUFNO3dCQUNoQyxNQUFNLEVBQUUsZUFBZSxDQUFDLE1BQU07cUJBQy9CLENBQUMsQ0FBQztpQkFDSjs7Ozs7O1FBR0gsd0NBQWU7Ozs7WUFBZixVQUFnQixNQUFjO2dCQUM1QixxQkFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUs7cUJBQzdCLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEdBQUEsQ0FBQztxQkFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzthQUM3Qjs7OztRQUVPLHdDQUFlOzs7O2dCQUNyQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDekIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDeEM7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7b0JBQzdCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDekM7Ozs7OztRQUdILDhDQUFxQjs7OztZQUFyQixVQUFzQixlQUFlO2dCQUFyQyxpQkFtQkM7Z0JBbEJDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxtQkFBbUI7b0JBQ3RCQSxxQkFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQzt5QkFDM0MsU0FBUyxDQUFDO3dCQUNULEtBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDdkIsSUFBSSxLQUFJLENBQUMsbUJBQW1CLEVBQUU7NEJBQzVCLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt5QkFDeEM7cUJBQ0YsQ0FBQyxDQUFDO2dCQUNQLElBQUksQ0FBQyxvQkFBb0I7b0JBQ3ZCQSxxQkFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQzt5QkFDNUMsU0FBUyxDQUFDO3dCQUNULEtBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQzt3QkFDdkIsSUFBSSxLQUFJLENBQUMsb0JBQW9CLEVBQUU7NEJBQzdCLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt5QkFDekM7cUJBQ0YsQ0FBQyxDQUFDO2FBQ1I7Ozs7O1FBRUQsdUNBQWM7Ozs7WUFBZCxVQUFlLE1BQWM7Z0JBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzthQUM3Qjs7Ozs7UUFFRCx5Q0FBZ0I7Ozs7WUFBaEIsVUFBaUIsTUFBYztnQkFBL0IsaUJBT0M7Z0JBTkMsSUFBSSxDQUFDLEtBQUs7cUJBQ1AsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsRUFBRSxHQUFBLENBQUM7cUJBQ2xELE9BQU8sQ0FBQyxVQUFBLENBQUM7b0JBQ1IsS0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzdDLENBQUMsQ0FBQztnQkFDTCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzthQUM3Qjs7Ozs7UUFFRCxxQ0FBWTs7OztZQUFaLFVBQWEsS0FBSztnQkFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN0Qjs7OztRQUVELDJDQUFrQjs7O1lBQWxCO2dCQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN0Qjs7Ozs7UUFFRCwyQ0FBa0I7Ozs7WUFBbEIsVUFBbUIsTUFBTTtnQkFBekIsaUJBT0M7Z0JBTkMsSUFBSSxDQUFDLEtBQUs7cUJBQ1AsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sR0FBQSxDQUFDO3FCQUM1QyxPQUFPLENBQUMsVUFBQSxDQUFDO29CQUNSLEtBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QyxDQUFDLENBQUM7Z0JBQ0wsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7YUFDN0I7Ozs7UUFFRCxzREFBNkI7OztZQUE3QjtnQkFDRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDdEI7Ozs7UUFFRCxvQ0FBVzs7O1lBQVg7Z0JBQ0UsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7b0JBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDMUM7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDeEM7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7b0JBQzdCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDekM7YUFDRjs7b0JBL1pGTCxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjt3QkFDN0IsUUFBUSxFQUFFLDY4Q0FhdUo7d0JBQ2pLLE1BQU0sRUFBRSxDQUFDLG1FQUFtRSxDQUFDO3FCQUM5RTs7Ozs7d0RBc0JJTSxXQUFNLFNBQUNDLGVBQVE7d0RBQ2ZELFdBQU0sU0FBQyxnQkFBZ0I7d0JBM0NuQixnQkFBZ0I7Ozs7aUNBbUN0QkUsaUJBQVksU0FBQyxlQUFlOzs2QkE5Qy9COzs7Ozs7O0FDQUE7UUFjRSxnQ0FBb0IsVUFBc0I7WUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTsrQkFIbEIsSUFBSVAsaUJBQVksRUFBTzs4QkFDeEIsSUFBSUEsaUJBQVksRUFBTztTQUVDOzs7O1FBRS9DLHlDQUFROzs7WUFBUjthQUNDOzs7O1FBRUQsbURBQWtCOzs7WUFBbEI7Z0JBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN2RDs7Ozs7UUFFRCwrQ0FBYzs7OztZQUFkLFVBQWUsS0FBSztnQkFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDOUI7Ozs7O1FBRUQsOENBQWE7Ozs7WUFBYixVQUFjLEtBQUs7Z0JBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzdCOztvQkEzQkZELGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsNEJBQTRCO3dCQUN0QyxRQUFRLEVBQUUsb01BR0o7d0JBQ04sTUFBTSxFQUFFLENBQUMsMkRBQTJELENBQUM7cUJBQ3RFOzs7Ozt3QkFUbUNFLGVBQVU7Ozs7b0NBVzNDRSxXQUFNO21DQUNOQSxXQUFNOztxQ0FaVDs7O0lDQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0Esb0JBaUd1QixDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsQ0FBQztZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUk7WUFDQSxPQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJO2dCQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlFO1FBQ0QsT0FBTyxLQUFLLEVBQUU7WUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FBRTtnQkFDL0I7WUFDSixJQUFJO2dCQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEQ7b0JBQ087Z0JBQUUsSUFBSSxDQUFDO29CQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQzthQUFFO1NBQ3BDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0FBRUQ7UUFDSSxLQUFLLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtZQUM5QyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Ozs7Ozs7UUN6RUMseUJBQzRCLFVBQ2xCLFlBQ0EsTUFDQTtZQUhrQixhQUFRLEdBQVIsUUFBUTtZQUMxQixlQUFVLEdBQVYsVUFBVTtZQUNWLFNBQUksR0FBSixJQUFJO1lBQ0oscUJBQWdCLEdBQWhCLGdCQUFnQjtnQ0FyQkQsSUFBSUgsaUJBQVksRUFBbUI7aUNBQ2xDLElBQUlBLGlCQUFZLEVBQVE7aUNBQ3hCLElBQUlBLGlCQUFZLEVBQW1CO21DQUNqQyxJQUFJQSxpQkFBWSxFQUFRO2lDQUMxQixJQUFJQSxpQkFBWSxFQUFtQjt5QkFDM0MsSUFBSUEsaUJBQVksRUFBVTs4QkFDckIsSUFBSUEsaUJBQVksRUFBUTtTQWVFOzs7O1FBRWpELGtDQUFROzs7WUFBUixlQUFjOzs7OztRQUVOLHlDQUFlOzs7O3NCQUFDLENBQUM7Z0JBQ3ZCLE9BQU8sQ0FBQyxDQUFDLGNBQWM7b0JBQ3JCO3dCQUNFLENBQUMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7d0JBQzVCLENBQUMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7cUJBQzdCLEdBQUc7b0JBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLO29CQUNWLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSztpQkFDWCxDQUFDOzs7OztRQUdFLHVDQUFhOzs7O2dCQUNuQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO29CQUM1QixPQUFPLElBQUksQ0FBQztpQkFDYjs7Ozs7O1FBR0ssc0NBQVk7Ozs7c0JBQUMsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7b0JBQ3hCLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUNELElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQ04sT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBQ0QscUJBQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxPQUFPLElBQUksQ0FBQztpQkFDYjtnQkFDRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFO29CQUM5QyxPQUFPLElBQUksQ0FBQztpQkFDYjtnQkFDRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDcEMsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7Ozs7OztRQUdQLG1DQUFTOzs7O3NCQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUU3QixxQkFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7O2dCQUdsRCxJQUFJLENBQUMsZUFBZSxHQUFHO29CQUNyQixDQUFDLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHO29CQUN4QixDQUFDLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJO2lCQUMxQixDQUFDOztnQkFHRixxQkFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHO29CQUN2QixDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU87d0JBQ1YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFVBQVU7d0JBQzNDLENBQUMsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLFVBQVU7b0JBQ2xDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTzt3QkFDVixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUzt3QkFDMUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsU0FBUztpQkFDbEMsQ0FBQztnQkFDRixXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7Z0JBQzVFLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztnQkFFM0UsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7Ozs7OztRQUdyQyw4QkFBSTs7OztzQkFBQyxDQUFDOztnQkFFWixxQkFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7Z0JBQzlGLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDOzs7OztRQUd2RixpQ0FBTzs7OztnQkFDYixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNoRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDOzs7OztRQUdwRSw4Q0FBb0I7OztZQUFwQjtnQkFDRSxxQkFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO3FCQUN2QyxxQkFBcUIsRUFBRSxDQUFDO2dCQUMzQixPQUFPO29CQUNMLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtvQkFDbkIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2lCQUNkLENBQUM7YUFDSDs7Ozs7UUFFRCwyQ0FBaUI7Ozs7WUFBakIsVUFBa0IsQ0FBQztnQkFBbkIsaUJBd0JDO2dCQXZCQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3hCLE9BQU87aUJBQ1I7Z0JBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0JBRWxCLElBQUksQ0FBQyxxQkFBcUI7b0JBQ3hCSSxxQkFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQzt5QkFDN0MsU0FBUyxDQUFDLFVBQUEsS0FBSzt3QkFDZCxLQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDOzRCQUMxQixLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3lCQUNsQixDQUFDLENBQUM7cUJBQ0osQ0FBQyxDQUFDO2dCQUNQLElBQUksQ0FBQyxtQkFBbUI7b0JBQ3RCQSxxQkFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQzt5QkFDM0MsU0FBUyxDQUFDO3dCQUNULEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzt3QkFDZixJQUFJLEtBQUksQ0FBQyxxQkFBcUIsRUFBRTs0QkFDOUIsS0FBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDO3lCQUMxQzt3QkFDRCxJQUFJLEtBQUksQ0FBQyxtQkFBbUIsRUFBRTs0QkFDNUIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO3lCQUN4QztxQkFDRixDQUFDLENBQUM7YUFDUjs7Ozs7UUFFRCw0Q0FBa0I7Ozs7WUFBbEIsVUFBbUIsQ0FBQztnQkFBcEIsaUJBeUJDO2dCQXhCQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3hCLE9BQU87aUJBQ1I7Z0JBQ0QsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQkFFbEIsSUFBSSxDQUFDLHFCQUFxQjtvQkFDeEJBLHFCQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDO3lCQUM3QyxTQUFTLENBQUMsVUFBQSxLQUFLO3dCQUNkLEtBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7NEJBQzFCLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7eUJBQ2xCLENBQUMsQ0FBQztxQkFDSixDQUFDLENBQUM7Z0JBQ1AsSUFBSSxDQUFDLG9CQUFvQjtvQkFDdkJBLHFCQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDO3lCQUM1QyxTQUFTLENBQUM7d0JBQ1QsS0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUNmLElBQUksS0FBSSxDQUFDLHFCQUFxQixFQUFFOzRCQUM5QixLQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUM7eUJBQzFDO3dCQUNELElBQUksS0FBSSxDQUFDLG9CQUFvQixFQUFFOzRCQUM3QixLQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLENBQUM7eUJBQ3pDO3FCQUNGLENBQUMsQ0FBQzthQUNSOzs7O1FBRUQsNENBQWtCOzs7WUFBbEI7Z0JBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDL0I7Ozs7UUFFRCw0Q0FBa0I7OztZQUFsQjtnQkFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvQjs7OztRQUVELDRDQUFrQjs7O1lBQWxCO2dCQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDN0I7Ozs7UUFFRCw0Q0FBa0I7OztZQUFsQjtnQkFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzdCOzs7O1FBRUQsNENBQWtCOzs7WUFBbEI7Z0JBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7b0JBQ3hCLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUNELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9COzs7O1FBRUQsNkNBQW1COzs7WUFBbkI7Z0JBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7b0JBQ3hCLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUNELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9COzs7O1FBRUQsc0NBQVk7OztZQUFaO2dCQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM5Qjs7OztRQUVELGlEQUF1Qjs7O1lBQXZCO2dCQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDL0IscUJBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO2dCQUNsRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO29CQUM1QixXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7OztvQkFJeEMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7b0JBQ3JELFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO29CQUN4RCxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztvQkFDckQsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7aUJBRXZEO3FCQUFNO29CQUNMLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUMzQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7b0JBQzdCLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztvQkFDaEMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUM5QixXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7aUJBQ2hDO2dCQUNELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDeEI7Ozs7UUFFRCw0Q0FBa0I7OztZQUFsQjtnQkFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0RCxxQkFBTSxPQUFPLEdBQWEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3hFLENBQUEsS0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUMsR0FBRyxvQkFBSSxPQUFPLEdBQUU7Z0JBQ3hELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO2lCQUMzRDs7YUFDRjs7OztRQUVELHlDQUFlOzs7WUFBZjtnQkFBQSxpQkFZQzs7O2dCQVRDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7b0JBQzFCLHFCQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzVFLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQzt5QkFDMUIsSUFBSSxDQUFDOzt3QkFFSixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO3FCQUNoQyxDQUFDO3lCQUNELEtBQUssQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUEsQ0FBQyxDQUFDO2lCQUN2QyxDQUFDLENBQUM7YUFDSjs7OztRQUVELHFDQUFXOzs7WUFBWDtnQkFDRSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUMxQztnQkFDRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtvQkFDNUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN4QztnQkFDRCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUMxQztnQkFDRCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN6QzthQUNGOztvQkFuUkZMLGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsWUFBWTt3QkFDdEIsUUFBUSxFQUFFLHN3QkFVTDt3QkFDTCxNQUFNLEVBQUUsQ0FBQyw4aUVBQThpRSxDQUFDO3FCQUN6akU7Ozs7O3dEQXFCSU0sV0FBTSxTQUFDQyxlQUFRO3dCQXZEbEJMLGVBQVU7d0JBR1ZPLFdBQU07d0JBVUMsZ0JBQWdCOzs7OytCQXVCdEJOLFVBQUs7cUNBQ0xDLFdBQU07c0NBQ05BLFdBQU07c0NBQ05BLFdBQU07d0NBQ05BLFdBQU07c0NBQ05BLFdBQU07OEJBQ05BLFdBQU07bUNBQ05BLFdBQU07OzhCQWhEVDs7Ozs7OztBQ0FBO1FBMEJFLGlDQUFvQixVQUFzQjtZQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO3lCQUh4QixJQUFJSCxpQkFBWSxFQUFROzhCQUNuQixJQUFJQSxpQkFBWSxFQUFRO1NBRUE7Ozs7UUFFL0MsMENBQVE7OztZQUFSO2FBQ0M7Ozs7UUFFRCxvREFBa0I7OztZQUFsQjtnQkFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3ZEOzs7O1FBRUQsaURBQWU7OztZQUFmO2dCQUFBLGlCQWNDOzs7OztnQkFUQyxVQUFVLENBQUM7b0JBQ1QscUJBQU0sZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNuRSxxQkFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO29CQUNuRCxxQkFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNsRSxxQkFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztvQkFDaEQscUJBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztvQkFDbEIscUJBQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDOUQsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUcsT0FBTyxJQUFJLFlBQVksR0FBRyxhQUFhLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDO2lCQUN6RixFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ1A7Ozs7UUFFRCxpREFBZTs7O1lBQWY7Z0JBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN4Qjs7OztRQUVELCtDQUFhOzs7WUFBYjtnQkFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3RCOzs7O1FBRUQsOENBQVk7OztZQUFaO2dCQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDbkI7Ozs7UUFFRCx5REFBdUI7OztZQUF2QjtnQkFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3hCOztvQkE5REZELGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUscUJBQXFCO3dCQUMvQixRQUFRLEVBQUUsc3dCQWFMO3dCQUNMLE1BQU0sRUFBRSxDQUFDLGtTQUFrUyxDQUFDO3FCQUM3Uzs7Ozs7d0JBcEJ3REUsZUFBVTs7OzsrQkFzQmhFQyxVQUFLOzhCQUNMQyxXQUFNO21DQUNOQSxXQUFNOztzQ0F4QlQ7Ozs7Ozs7QUNBQTtRQW9DRSwwQkFBb0IsVUFBc0I7WUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTt3QkFKekIsSUFBSUgsaUJBQVksRUFBUTtnQ0FDaEIsSUFBSUEsaUJBQVksRUFBVTtrQ0FDeEIsSUFBSUEsaUJBQVksRUFBVTtTQUVOOzs7O1FBRS9DLG1DQUFROzs7WUFBUixlQUFjOzs7O1FBRWQsNkNBQWtCOzs7WUFBbEI7Z0JBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzFFOzs7O1FBRUQsMENBQWU7OztZQUFmO2dCQUNFLHFCQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWE7cUJBQ3hDLHFCQUFxQixFQUFFO3FCQUN2QixLQUFLLENBQUM7Z0JBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUM7Z0JBQy9FLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQzthQUN6Rjs7OztRQUVELHNDQUFXOzs7WUFBWDtnQkFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2xCOzs7OztRQUVELDJDQUFnQjs7OztZQUFoQixVQUFpQixhQUFrQjtnQkFDakMsSUFBSSxhQUFhLENBQUMsVUFBVSxFQUFFO29CQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ2xELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDaEQ7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzlDO2FBQ0Y7O29CQTVERkQsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxxQkFBcUI7d0JBQy9CLFFBQVEsRUFBRSxxakNBcUJMO3dCQUNMLE1BQU0sRUFBRSxDQUFDLGlUQUFpVCxDQUFDO3FCQUM1VDs7Ozs7d0JBN0IwQ0UsZUFBVTs7OztnQ0ErQmxEQyxVQUFLOzZCQUNMQyxXQUFNO3FDQUNOQSxXQUFNO3VDQUNOQSxXQUFNOzsrQkFsQ1Q7Ozs7Ozs7O1FDYUUsNkJBQW9CLFVBQXNCLEVBQVUsZ0JBQWtDO1lBQWxFLGVBQVUsR0FBVixVQUFVLENBQVk7WUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1NBQUs7Ozs7UUFFM0Ysc0NBQVE7OztZQUFSO2FBQ0M7Ozs7UUFFRCxnREFBa0I7OztZQUFsQjtnQkFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2dCQUNoRSxxQkFBTSxPQUFPLEdBQWEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzVFLENBQUEsS0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUMsR0FBRyxvQkFBSSxPQUFPLEdBQUU7O2FBQ3pEOztvQkFsQkZKLGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsd0JBQXdCO3dCQUNsQyxRQUFRLEVBQUUsbUNBQW1DO3dCQUM3QyxNQUFNLEVBQUUsQ0FBQyxvREFBb0QsQ0FBQztxQkFDL0Q7Ozs7O3dCQVJrQ0UsZUFBVTt3QkFFcEMsZ0JBQWdCOzs7O21DQVF0QkMsVUFBSzsrQkFDTEEsVUFBSzs7a0NBWFI7Ozs7Ozs7QUNBQTtRQVlFLGtDQUFvQixVQUFzQixFQUFVLGdCQUFrQztZQUFsRSxlQUFVLEdBQVYsVUFBVSxDQUFZO1lBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjsyQkFGbEUsSUFBSUYsaUJBQVksRUFBTztTQUVnRDs7OztRQUUzRiwyQ0FBUTs7O1lBQVIsZUFBb0I7Ozs7UUFFcEIscURBQWtCOzs7WUFBbEI7Z0JBQ0UscUJBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO2dCQUNsRCxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDaEcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztnQkFDckUsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ3pEOzs7O1FBRUQsMENBQU87OztZQUFQO2dCQUNFLHFCQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDckMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtvQkFDOUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7b0JBQ3hGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzFDO2FBQ0Y7O29CQTFCRkQsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSw2QkFBNkI7d0JBQ3ZDLFFBQVEsRUFBRSwrREFBK0Q7d0JBQ3pFLE1BQU0sRUFBRSxDQUFDLDhFQUE4RSxDQUFDO3FCQUN6Rjs7Ozs7d0JBUHdERSxlQUFVO3dCQUMxRCxnQkFBZ0I7Ozs7a0NBUXRCQyxVQUFLO2dDQUNMQyxXQUFNOzt1Q0FWVDs7Ozs7OztBQ0FBO1FBd0JFLCtCQUFvQixVQUFzQjtZQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO3dCQUZ6QixJQUFJSCxpQkFBWSxFQUFRO1NBRU07Ozs7UUFFL0Msd0NBQVE7OztZQUFSLGVBQWM7Ozs7UUFFZCxrREFBa0I7OztZQUFsQjtnQkFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUMvRjs7OztRQUVELCtDQUFlOzs7WUFBZjtnQkFDRSxxQkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO3FCQUN4QyxxQkFBcUIsRUFBRTtxQkFDdkIsS0FBSyxDQUFDO2dCQUNULElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDO2dCQUNwRixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsS0FBSyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUM7YUFDOUY7Ozs7UUFFRCwyQ0FBVzs7O1lBQVg7Z0JBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNsQjs7b0JBdkNGRCxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjt3QkFDckMsUUFBUSxFQUFFLG1YQVlMO3dCQUNMLE1BQU0sRUFBRSxDQUFDLHNEQUFzRCxDQUFDO3FCQUNqRTs7Ozs7d0JBbkJ3REUsZUFBVTs7OztxQ0FxQmhFQyxVQUFLOzZCQUNMQyxXQUFNOztvQ0F0QlQ7Ozs7Ozs7QUNBQTs7Ozs7OztRQThDUyx1QkFBTzs7OztZQUFkLFVBQWUsY0FBYztnQkFDM0IsT0FBTztvQkFDTCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsU0FBUyxFQUFFO3dCQUNULEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7cUJBQ3hEO2lCQUNGLENBQUM7YUFDSDs7b0JBckNGTSxhQUFRLFNBQUM7d0JBQ1IsWUFBWSxFQUFFOzRCQUNaLGtCQUFrQjs0QkFDbEIsY0FBYzs0QkFDZCxlQUFlOzRCQUNmLHNCQUFzQjs0QkFDdEIsZUFBZTs0QkFDZix1QkFBdUI7NEJBQ3ZCLGdCQUFnQjs0QkFDaEIsbUJBQW1COzRCQUNuQix3QkFBd0I7NEJBQ3hCLHFCQUFxQjt5QkFDdEI7d0JBQ0QsT0FBTyxFQUFFLENBQUNDLDZCQUFhLENBQUM7d0JBQ3hCLE9BQU8sRUFBRTs0QkFDUCxrQkFBa0I7NEJBQ2xCLGNBQWM7NEJBQ2QsZUFBZTs0QkFDZixzQkFBc0I7NEJBQ3RCLGVBQWU7NEJBQ2YsdUJBQXVCOzRCQUN2QixnQkFBZ0I7NEJBQ2hCLG1CQUFtQjs0QkFDbkIsd0JBQXdCOzRCQUN4QixxQkFBcUI7eUJBQ3RCO3dCQUNELFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO3dCQUM3QixTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztxQkFDaEM7OzhCQTVDRDs7Ozs7OztRQ1VBO3dCQVVJLEVBQVUsRUFDVixLQUFhLEVBQ0wsY0FDUyxjQUNqQixhQUFxQixFQUNyQixNQUFrQixFQUNsQixRQUFpQjtZQUpULGlCQUFZLEdBQVosWUFBWTtZQUNILGlCQUFZLEdBQVosWUFBWTs4QkFQbEIsSUFBSTtnQ0FDRixLQUFLO1lBVWxCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7WUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFDLE1BQWEsR0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7Ozs7Ozs7WUFRakMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7O1FBRzVCLDRCQUFxQjs7OztZQUE1QixVQUE2QixFQUEyQztvQkFBekMsVUFBRSxFQUFFLGdCQUFLLEVBQUUsZ0JBQUssRUFBRSxnQ0FBYSxFQUFFLGtCQUFNO2dCQUNwRSxPQUFPLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzFFOzs7OztRQUVNLDJCQUFvQjs7OztZQUEzQixVQUE0QixFQUFnRTtvQkFBOUQsVUFBRSxFQUFFLGdCQUFLLEVBQUUsOEJBQVksRUFBRSw4QkFBWSxFQUFFLGdDQUFhLEVBQUUsa0JBQU07Z0JBQ3hGLE9BQU8sSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEY7Ozs7O1FBRUQsZ0NBQWU7Ozs7WUFBZixVQUFnQixVQUFrQjtnQkFDaEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3RDOzs7O1FBRUQsaUNBQWdCOzs7WUFBaEI7Z0JBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO2FBQzFCOzs7OztRQUVELGdDQUFlOzs7O1lBQWYsVUFBZ0IsVUFBa0I7Z0JBQ2hDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUN0Qzs7Ozs7O1FBRUQsOEJBQWE7Ozs7O1lBQWIsVUFBYyxVQUFrQixFQUFFLEtBQWE7Z0JBQzdDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ3ZDO2FBQ0Y7Ozs7OztRQUVELHVCQUFNOzs7OztZQUFOLFVBQU8sVUFBa0IsRUFBRSxLQUFhO2dCQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUN2Qzs7OztRQUVELHVCQUFNOzs7WUFBTjtnQkFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQzthQUN4Qjs7OztRQUVELHlCQUFROzs7WUFBUjtnQkFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQzthQUN6Qjs7OztRQUVELGlDQUFnQjs7O1lBQWhCO2dCQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2FBQ3hDOzs7O1FBRUQsc0JBQUs7OztZQUFMO2dCQUNFLE9BQU8sSUFBSSxNQUFNLENBQ2YsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2xCO3FCQS9GSDtRQWdHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==