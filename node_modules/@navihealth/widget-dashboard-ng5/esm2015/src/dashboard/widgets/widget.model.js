/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
export function IWidth() { }
function IWidth_tsickle_Closure_declarations() {
    /** @type {?} */
    IWidth.prototype.xs;
    /** @type {?|undefined} */
    IWidth.prototype.sm;
    /** @type {?|undefined} */
    IWidth.prototype.md;
    /** @type {?|undefined} */
    IWidth.prototype.lg;
    /** @type {?|undefined} */
    IWidth.prototype.xl;
}
export class Widget {
    /**
     * @param {?} id
     * @param {?} title
     * @param {?} currentWidth
     * @param {?} minimumWidth
     * @param {?} initialHeight
     * @param {?} render
     * @param {?} isHidden
     */
    constructor(id, title, currentWidth, minimumWidth, initialHeight, render, isHidden) {
        this.currentWidth = currentWidth;
        this.minimumWidth = minimumWidth;
        this.isExpanded = true;
        this.isFullScreen = false;
        this.id = id;
        this.title = title;
        this.initialHeight = initialHeight;
        this.render = (/** @type {?} */ (render)).bind(this);
        this.isHidden = isHidden;
        this.currentWidth = currentWidth;
        // This uses Object.assign to create a new object from the one passed in.
        // This is to prevent the instantiator from passing in one object to both
        // currentWidth and minimumWidth and then having that object ref assigned
        // to both properties. If that were to happen, then updating the
        // currentWidth would also update the minimumWidth. The minimumWidth
        // should never be changed once set.
        this.minimumWidth = Object.assign({}, minimumWidth);
        Object.freeze(this.minimumWidth);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    static createAvailableWidget({ id, title, width, initialHeight, render }) {
        return new Widget(id, title, width, width, initialHeight, render, false);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    static createRenderedWidget({ id, title, currentWidth, minimumWidth, initialHeight, render }) {
        return new Widget(id, title, currentWidth, minimumWidth, initialHeight, render, false);
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    getCurrentWidth(breakpoint) {
        return this.currentWidth[breakpoint];
    }
    /**
     * @return {?}
     */
    getCurrentWidths() {
        return this.currentWidth;
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    getMinimumWidth(breakpoint) {
        return this.minimumWidth[breakpoint];
    }
    /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    makeFullWidth(breakpoint, width) {
        if (this.currentWidth[breakpoint]) {
            this.currentWidth[breakpoint] = width;
        }
    }
    /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    resize(breakpoint, width) {
        this.currentWidth[breakpoint] = width;
    }
    /**
     * @return {?}
     */
    expand() {
        this.isExpanded = true;
    }
    /**
     * @return {?}
     */
    collapse() {
        this.isExpanded = false;
    }
    /**
     * @return {?}
     */
    toggleFullScreen() {
        this.isFullScreen = !this.isFullScreen;
    }
    /**
     * @return {?}
     */
    clone() {
        return new Widget(this.id, this.title, this.currentWidth, this.minimumWidth, this.initialHeight, this.render, this.isHidden);
    }
}
function Widget_tsickle_Closure_declarations() {
    /** @type {?} */
    Widget.prototype.id;
    /** @type {?} */
    Widget.prototype.title;
    /** @type {?} */
    Widget.prototype.initialHeight;
    /** @type {?} */
    Widget.prototype.render;
    /** @type {?} */
    Widget.prototype.isHidden;
    /** @type {?} */
    Widget.prototype.isExpanded;
    /** @type {?} */
    Widget.prototype.isFullScreen;
    /** @type {?} */
    Widget.prototype.currentWidth;
    /** @type {?} */
    Widget.prototype.minimumWidth;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvIiwic291cmNlcyI6WyJzcmMvZGFzaGJvYXJkL3dpZGdldHMvd2lkZ2V0Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVUEsTUFBTTs7Ozs7Ozs7OztnQkFVRixFQUFVLEVBQ1YsS0FBYSxFQUNMLGNBQ1MsY0FDakIsYUFBcUIsRUFDckIsTUFBa0IsRUFDbEIsUUFBaUI7UUFKVCxpQkFBWSxHQUFaLFlBQVk7UUFDSCxpQkFBWSxHQUFaLFlBQVk7MEJBUGxCLElBQUk7NEJBQ0YsS0FBSztRQVVsQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsbUJBQUMsTUFBYSxFQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDOzs7Ozs7O1FBUWpDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7OztJQUduQyxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFO1FBQ3RFLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxRTs7Ozs7SUFFRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRTtRQUMxRixNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDeEY7Ozs7O0lBRUQsZUFBZSxDQUFDLFVBQWtCO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3RDOzs7O0lBRUQsZ0JBQWdCO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7S0FDMUI7Ozs7O0lBRUQsZUFBZSxDQUFDLFVBQWtCO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3RDOzs7Ozs7SUFFRCxhQUFhLENBQUMsVUFBa0IsRUFBRSxLQUFhO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ3ZDO0tBQ0Y7Ozs7OztJQUVELE1BQU0sQ0FBQyxVQUFrQixFQUFFLEtBQWE7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDdkM7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDeEI7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7S0FDekI7Ozs7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztLQUN4Qzs7OztJQUVELEtBQUs7UUFDSCxNQUFNLENBQUMsSUFBSSxNQUFNLENBQ2YsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2xCO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBSZW5kZXJGdW5jID0gKEh0bWxFbGVtZW50KSA9PiBQcm9taXNlPHZvaWQ+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJV2lkdGgge1xyXG4gIHhzOiBudW1iZXI7XHJcbiAgc20/OiBudW1iZXI7XHJcbiAgbWQ/OiBudW1iZXI7XHJcbiAgbGc/OiBudW1iZXI7XHJcbiAgeGw/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXaWRnZXQge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBpbml0aWFsSGVpZ2h0OiBzdHJpbmc7XHJcbiAgcmVuZGVyOiBSZW5kZXJGdW5jO1xyXG4gIGlzSGlkZGVuOiBib29sZWFuO1xyXG4gIGlzRXhwYW5kZWQgPSB0cnVlO1xyXG4gIGlzRnVsbFNjcmVlbiA9IGZhbHNlO1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxyXG4gICAgaWQ6IHN0cmluZyxcclxuICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIGN1cnJlbnRXaWR0aDogSVdpZHRoLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtaW5pbXVtV2lkdGg6IElXaWR0aCxcclxuICAgIGluaXRpYWxIZWlnaHQ6IHN0cmluZyxcclxuICAgIHJlbmRlcjogUmVuZGVyRnVuYyxcclxuICAgIGlzSGlkZGVuOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICB0aGlzLmluaXRpYWxIZWlnaHQgPSBpbml0aWFsSGVpZ2h0O1xyXG4gICAgdGhpcy5yZW5kZXIgPSAocmVuZGVyIGFzIGFueSkuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaXNIaWRkZW4gPSBpc0hpZGRlbjtcclxuICAgIHRoaXMuY3VycmVudFdpZHRoID0gY3VycmVudFdpZHRoO1xyXG5cclxuICAgIC8vIFRoaXMgdXNlcyBPYmplY3QuYXNzaWduIHRvIGNyZWF0ZSBhIG5ldyBvYmplY3QgZnJvbSB0aGUgb25lIHBhc3NlZCBpbi5cclxuICAgIC8vIFRoaXMgaXMgdG8gcHJldmVudCB0aGUgaW5zdGFudGlhdG9yIGZyb20gcGFzc2luZyBpbiBvbmUgb2JqZWN0IHRvIGJvdGhcclxuICAgIC8vIGN1cnJlbnRXaWR0aCBhbmQgbWluaW11bVdpZHRoIGFuZCB0aGVuIGhhdmluZyB0aGF0IG9iamVjdCByZWYgYXNzaWduZWRcclxuICAgIC8vIHRvIGJvdGggcHJvcGVydGllcy4gSWYgdGhhdCB3ZXJlIHRvIGhhcHBlbiwgdGhlbiB1cGRhdGluZyB0aGVcclxuICAgIC8vIGN1cnJlbnRXaWR0aCB3b3VsZCBhbHNvIHVwZGF0ZSB0aGUgbWluaW11bVdpZHRoLiBUaGUgbWluaW11bVdpZHRoXHJcbiAgICAvLyBzaG91bGQgbmV2ZXIgYmUgY2hhbmdlZCBvbmNlIHNldC5cclxuICAgIHRoaXMubWluaW11bVdpZHRoID0gT2JqZWN0LmFzc2lnbih7fSwgbWluaW11bVdpZHRoKTtcclxuICAgIE9iamVjdC5mcmVlemUodGhpcy5taW5pbXVtV2lkdGgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZUF2YWlsYWJsZVdpZGdldCh7IGlkLCB0aXRsZSwgd2lkdGgsIGluaXRpYWxIZWlnaHQsIHJlbmRlciB9KSB7XHJcbiAgICByZXR1cm4gbmV3IFdpZGdldChpZCwgdGl0bGUsIHdpZHRoLCB3aWR0aCwgaW5pdGlhbEhlaWdodCwgcmVuZGVyLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlUmVuZGVyZWRXaWRnZXQoeyBpZCwgdGl0bGUsIGN1cnJlbnRXaWR0aCwgbWluaW11bVdpZHRoLCBpbml0aWFsSGVpZ2h0LCByZW5kZXIgfSkge1xyXG4gICAgcmV0dXJuIG5ldyBXaWRnZXQoaWQsIHRpdGxlLCBjdXJyZW50V2lkdGgsIG1pbmltdW1XaWR0aCwgaW5pdGlhbEhlaWdodCwgcmVuZGVyLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBnZXRDdXJyZW50V2lkdGgoYnJlYWtwb2ludDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50V2lkdGhbYnJlYWtwb2ludF07XHJcbiAgfVxyXG5cclxuICBnZXRDdXJyZW50V2lkdGhzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgZ2V0TWluaW11bVdpZHRoKGJyZWFrcG9pbnQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMubWluaW11bVdpZHRoW2JyZWFrcG9pbnRdO1xyXG4gIH1cclxuXHJcbiAgbWFrZUZ1bGxXaWR0aChicmVha3BvaW50OiBzdHJpbmcsIHdpZHRoOiBudW1iZXIpIHtcclxuICAgIGlmICh0aGlzLmN1cnJlbnRXaWR0aFticmVha3BvaW50XSkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRXaWR0aFticmVha3BvaW50XSA9IHdpZHRoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzaXplKGJyZWFrcG9pbnQ6IHN0cmluZywgd2lkdGg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5jdXJyZW50V2lkdGhbYnJlYWtwb2ludF0gPSB3aWR0aDtcclxuICB9XHJcblxyXG4gIGV4cGFuZCgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNFeHBhbmRlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBjb2xsYXBzZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRnVsbFNjcmVlbigpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNGdWxsU2NyZWVuID0gIXRoaXMuaXNGdWxsU2NyZWVuO1xyXG4gIH1cclxuXHJcbiAgY2xvbmUoKTogV2lkZ2V0IHtcclxuICAgIHJldHVybiBuZXcgV2lkZ2V0KFxyXG4gICAgICB0aGlzLmlkLFxyXG4gICAgICB0aGlzLnRpdGxlLFxyXG4gICAgICB0aGlzLmN1cnJlbnRXaWR0aCxcclxuICAgICAgdGhpcy5taW5pbXVtV2lkdGgsXHJcbiAgICAgIHRoaXMuaW5pdGlhbEhlaWdodCxcclxuICAgICAgdGhpcy5yZW5kZXIsXHJcbiAgICAgIHRoaXMuaXNIaWRkZW4pO1xyXG4gIH1cclxufVxyXG4iXX0=