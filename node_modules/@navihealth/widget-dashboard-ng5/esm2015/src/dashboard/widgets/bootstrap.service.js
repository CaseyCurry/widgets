/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
export class BootstrapService {
    constructor() {
        this.maxColumns = 12;
        this.columnPrefix = 'col-';
        this.breakpoints = {
            xl: 'd-xl-none',
            lg: 'd-lg-none',
            md: 'd-md-none',
            sm: 'd-sm-none',
            xs: 'd-none'
        };
    }
    /**
     * @return {?}
     */
    getCurrentBreakpoint() {
        let /** @type {?} */ breakpoint = '';
        const /** @type {?} */ marker = document.createElement('div');
        marker.style.visibility = 'hidden';
        document.body.appendChild(marker);
        const /** @type {?} */ breakpointKeys = Object.keys(this.breakpoints);
        for (let /** @type {?} */ i = 0; i < breakpointKeys.length; i++) {
            breakpoint = breakpointKeys[i];
            marker.classList.add(this.breakpoints[breakpoint]);
            const /** @type {?} */ style = window.getComputedStyle(marker);
            if (style.display === 'none') {
                break;
            }
        }
        marker.remove();
        return breakpoint;
    }
    /**
     * @return {?}
     */
    hasBreakpointChanged() {
        const /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        if (breakpoint !== this.currentBreakpoint) {
            this.currentBreakpoint = breakpoint;
            return true;
        }
        return false;
    }
    /**
     * @param {?} getWidth
     * @return {?}
     */
    getWidth(getWidth) {
        let /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        let /** @type {?} */ width = getWidth(breakpoint);
        if (!width) {
            // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
            const /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
            while (!width && smallerBreakpoints.length) {
                breakpoint = smallerBreakpoints.shift();
                width = getWidth(breakpoint);
            }
        }
        return width;
    }
    /**
     * @param {?} makeFullWidth
     * @return {?}
     */
    makeFullWidth(makeFullWidth) {
        const /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        // Make each breakpoint at the current size and smaller the full width of a row.
        this.getSmallerBreakpoints(breakpoint)
            .concat([breakpoint])
            .forEach(x => {
            makeFullWidth(x, this.maxColumns);
        });
    }
    /**
     * @param {?} widget
     * @param {?} targetWidthOfWidget
     * @return {?}
     */
    resize(widget, targetWidthOfWidget) {
        let /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        let /** @type {?} */ width = widget.getCurrentWidth(breakpoint);
        if (!width) {
            // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
            const /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
            while (!width && smallerBreakpoints.length) {
                breakpoint = smallerBreakpoints.shift();
                width = widget.getCurrentWidth(breakpoint);
            }
        }
        widget.resize(breakpoint, targetWidthOfWidget);
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    getClasses(widget) {
        const /** @type {?} */ widths = widget.getCurrentWidths();
        return Object.keys(widths)
            .map(x => {
            const /** @type {?} */ width = widths[x];
            if (x === 'xs') {
                return 'col-' + width;
            }
            return 'col-' + x + '-' + width;
        });
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    getSmallerBreakpoints(breakpoint) {
        const /** @type {?} */ allBreakpoints = Object.keys(this.breakpoints);
        const /** @type {?} */ smallerBreakpoints = allBreakpoints.slice(allBreakpoints.indexOf(breakpoint) + 1, allBreakpoints.length);
        return smallerBreakpoints;
    }
}
BootstrapService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BootstrapService.ctorParameters = () => [];
function BootstrapService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    BootstrapService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    BootstrapService.ctorParameters;
    /** @type {?} */
    BootstrapService.prototype.maxColumns;
    /** @type {?} */
    BootstrapService.prototype.columnPrefix;
    /** @type {?} */
    BootstrapService.prototype.breakpoints;
    /** @type {?} */
    BootstrapService.prototype.currentBreakpoint;
}

//# sourceMappingURL=data:application/json;base64,