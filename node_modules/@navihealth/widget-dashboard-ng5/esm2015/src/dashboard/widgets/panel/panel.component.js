/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Inject, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/delay';
import { SpacerComponent } from '../spacer/spacer.component';
import { Library } from '../library.model';
import { LayoutEditor } from '../layout-editor.model';
import { BootstrapService } from '../bootstrap.service';
export class PanelComponent {
    /**
     * @param {?} document
     * @param {?} widgetsService
     * @param {?} bootstrapService
     */
    constructor(document, widgetsService, bootstrapService) {
        this.document = document;
        this.widgetsService = widgetsService;
        this.bootstrapService = bootstrapService;
        this.layoutEditor = new LayoutEditor();
        this.resizeGuidelines = [];
        this.isOverlayDisplayed = false;
    }
    /**
     * @return {?}
     */
    onResize() {
        if (this.bootstrapService.hasBreakpointChanged()) {
            this.addHorizontalSpacers();
        }
    }
    /**
     * @return {?}
     */
    preventHighlightingWhileMoving() {
        this.document.body.classList.add('no-highlighting');
    }
    /**
     * @return {?}
     */
    allowHighlighting() {
        this.document.body.classList.remove('no-highlighting');
    }
    /**
     * @return {?}
     */
    createSpacer() {
        return {
            spacer: {}
        };
    }
    /**
     * @return {?}
     */
    clearSpacers() {
        for (let /** @type {?} */ i = this.items.length - 1; i >= 0; i--) {
            if (this.items[i].spacer) {
                this.items.splice(i, 1);
            }
        }
    }
    /**
     * @return {?}
     */
    addHorizontalSpacers() {
        this.clearSpacers();
        let /** @type {?} */ usedWidthOnRow = 0;
        const /** @type {?} */ indexesToInsertSpacer = [0];
        for (let /** @type {?} */ i = 0; i < this.items.length; i++) {
            const /** @type {?} */ widget = this.items[i].widget || this.items[i].dropTarget;
            if (this.movingWidgetComponent && widget === this.movingWidgetComponent.widget) {
                continue;
            }
            const /** @type {?} */ widgetWidth = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget));
            usedWidthOnRow += widgetWidth;
            if (usedWidthOnRow === this.bootstrapService.maxColumns) {
                indexesToInsertSpacer.push(i + 1);
                usedWidthOnRow = 0;
            }
            else if (usedWidthOnRow > this.bootstrapService.maxColumns) {
                indexesToInsertSpacer.push(i);
                usedWidthOnRow = widgetWidth;
            }
        }
        indexesToInsertSpacer
            .reverse()
            .forEach(x => {
            this.items.splice(x, 0, this.createSpacer());
        });
        if (!this.items[this.items.length - 1].spacer) {
            this.items.push(this.createSpacer());
        }
    }
    /**
     * @return {?}
     */
    toggleOverlay() {
        this.isOverlayDisplayed = !this.isOverlayDisplayed;
        if (this.isOverlayDisplayed) {
            document.getElementById('overlay').style.display = 'block';
        }
        else {
            document.getElementById('overlay').style.display = 'none';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ renderedWidgets = this.widgetsService.getRenderedWidgets();
        this.items = renderedWidgets.map(x => {
            return { widget: x };
        });
        this.addHorizontalSpacers();
        const /** @type {?} */ availableWidgets = this.widgetsService.getAvailableWidgets();
        this.library = new Library(renderedWidgets, availableWidgets);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEditLibrary(event) {
        this.library.edit(event.pageX, event.pageY);
        this.toggleOverlay();
    }
    /**
     * @return {?}
     */
    onHideLibrary() {
        this.library.hide();
        this.toggleOverlay();
    }
    /**
     * @return {?}
     */
    clearExistingDropTarget() {
        for (let /** @type {?} */ i = 0; i < this.items.length; i++) {
            if (this.items[i].dropTarget) {
                this.items.splice(i, 1);
            }
        }
    }
    /**
     * @param {?} movingWidget
     * @param {?} indexOfDrop
     * @return {?}
     */
    isWidgetMovingDown(movingWidget, indexOfDrop) {
        const /** @type {?} */ indexOfWidgetBeforeMove = this.items
            .map(x => x.widget)
            .indexOf(movingWidget);
        return indexOfDrop > indexOfWidgetBeforeMove;
    }
    /**
     * @param {?} currentResident
     * @param {?} newResident
     * @return {?}
     */
    insertDropTarget(currentResident, newResident) {
        if (!newResident) {
            newResident = currentResident;
        }
        this.clearExistingDropTarget();
        const /** @type {?} */ dropTarget = newResident.widget.clone();
        let /** @type {?} */ indexOfDrop;
        if (currentResident instanceof SpacerComponent) {
            this.bootstrapService.makeFullWidth(dropTarget.makeFullWidth.bind(dropTarget));
            indexOfDrop = this.items
                .map(x => x.spacer)
                .indexOf(currentResident.spacer);
        }
        else {
            indexOfDrop = this.items
                .map(x => x.widget)
                .indexOf(currentResident.widget);
            if (this.isWidgetMovingDown(newResident.widget, indexOfDrop)) {
                indexOfDrop++;
            }
        }
        const /** @type {?} */ height = newResident.getHeightInformation().height;
        this.items.splice(indexOfDrop, 0, { dropTarget: dropTarget, height: height });
    }
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    onWidgetMove(widgetComponent) {
        this.movingWidgetComponent = widgetComponent;
        this.preventHighlightingWhileMoving();
        this.insertDropTarget(widgetComponent, null);
    }
    /**
     * @return {?}
     */
    onWidgetDropped() {
        this.items.splice(this.items.map(x => x.widget).indexOf(this.movingWidgetComponent.widget), 1);
        for (let /** @type {?} */ i = 0; i < this.items.length; i++) {
            if (this.items[i].dropTarget) {
                this.items.splice(i, 1, { widget: this.movingWidgetComponent.widget });
                break;
            }
        }
        this.allowHighlighting();
        this.movingWidgetComponent = null;
        this.addHorizontalSpacers();
    }
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    onWidgetHovered(widgetComponent) {
        if (!this.movingWidgetComponent) {
            return;
        }
        console.log('test 0', new Date());
        this.moveHoverSubscription = Observable.of({})
            .delay(30)
            .subscribe(() => {
            console.log('test', new Date());
            if (!this.movingWidgetComponent) {
                return;
            }
            this.insertDropTarget(widgetComponent, this.movingWidgetComponent);
            this.addHorizontalSpacers();
        });
    }
    /**
     * @return {?}
     */
    onWidgetUnhovered() {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
            this.moveHoverSubscription = null;
        }
    }
    /**
     * @param {?} spacerComponent
     * @return {?}
     */
    onSpacerHovered(spacerComponent) {
        if (!this.movingWidgetComponent) {
            return;
        }
        this.moveHoverSubscription = Observable.of({})
            .delay(300)
            .subscribe(() => {
            if (!this.movingWidgetComponent) {
                return;
            }
            this.insertDropTarget(spacerComponent, this.movingWidgetComponent);
            this.addHorizontalSpacers();
        });
    }
    /**
     * @return {?}
     */
    onSpacerUnhovered() {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
            this.moveHoverSubscription = null;
        }
    }
    /**
     * @return {?}
     */
    makeGrid() {
        const /** @type {?} */ grid = [];
        grid.push([]);
        let /** @type {?} */ currentRowWidth = 0;
        const /** @type {?} */ widgets = this.items
            .filter(x => x.widget)
            .map(x => x.widget);
        for (let /** @type {?} */ i = 0; i < widgets.length; i++) {
            const /** @type {?} */ widget = widgets[i];
            const /** @type {?} */ width = this.bootstrapService
                .getWidth(widget.getCurrentWidth.bind(widget));
            grid[grid.length - 1].push(widget);
            currentRowWidth += width;
            const /** @type {?} */ isLastWidget = i === widgets.length - 1;
            if (isLastWidget) {
                break;
            }
            if (currentRowWidth === this.bootstrapService.maxColumns) {
                grid.push([]);
                currentRowWidth = 0;
            }
            else {
                // Preview the next widget and see if a new row is needed due to lack of space.
                const /** @type {?} */ nextWidget = widgets[i + 1];
                const /** @type {?} */ nextWidgetWidth = this.bootstrapService
                    .getWidth(nextWidget.getCurrentWidth.bind(nextWidget));
                const /** @type {?} */ spaceLeftOnCurrentRow = this.bootstrapService.maxColumns - currentRowWidth;
                if (nextWidgetWidth > spaceLeftOnCurrentRow) {
                    grid.push([]);
                    currentRowWidth = 0;
                }
            }
        }
        return grid;
    }
    ;
    /**
     * @param {?} widget
     * @return {?}
     */
    findRowContainingWidget(widget) {
        // I'm making a multi-dimensional array of the entire grid before trying to
        // find which row the widget is in. This is less efficient than building the
        // grid and simultaneously checking if the row has the widget, but it makes
        // the logic much more reasonable.
        const /** @type {?} */ grid = this.makeGrid();
        for (let /** @type {?} */ i = 0; i < grid.length; i++) {
            const /** @type {?} */ widgetIndex = grid[i].indexOf(widget);
            if (widgetIndex >= 0) {
                return grid[i];
            }
        }
    }
    ;
    /**
     * @param {?} widget
     * @return {?}
     */
    calculateBoundaries(widget) {
        const /** @type {?} */ row = this.findRowContainingWidget(widget);
        console.log("row", row);
        const /** @type {?} */ currentPosition = row
            .slice(0, row.indexOf(widget) + 1)
            .map(x => this.bootstrapService.getWidth(x.getCurrentWidth.bind(x)))
            .reduce((x, y) => x + y);
        const /** @type {?} */ minimumWidth = this.bootstrapService.getWidth(widget.getMinimumWidth.bind(widget));
        const /** @type {?} */ spaceToMinimize = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget)) - minimumWidth;
        // Don't go left far enough to exceed the minimum of the widget.
        const /** @type {?} */ left = currentPosition - spaceToMinimize;
        // Don't go right far enough to exceed the width of the row.
        const /** @type {?} */ right = this.bootstrapService.maxColumns;
        // This is used to determine at which column to start drawing guidelines.
        const /** @type {?} */ offset = minimumWidth - left;
        return { left, right, offset };
    }
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    drawResizeGuidelines(widgetComponent) {
        const /** @type {?} */ heightInformation = widgetComponent.getHeightInformation();
        const /** @type {?} */ boundaries = this.calculateBoundaries(widgetComponent.widget);
        for (let /** @type {?} */ i = boundaries.left; i <= boundaries.right; i++) {
            // unshift() which inserts at the beginning of the array instead of push()
            // because we want to display the longest guideline first so that the shorter
            // one is on top of the longer one. This will help when we hover over each one.
            // If the longer one was on top it would be the only guideline raising events.
            this.resizeGuidelines.unshift({
                widthOfGuideline: i,
                targetWidthOfWidget: i + boundaries.offset,
                top: heightInformation.top,
                height: heightInformation.height,
                widget: widgetComponent.widget
            });
        }
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    onWidgetResized(widget) {
        const /** @type {?} */ indexOfWidget = this.items
            .map(x => x.widget)
            .indexOf(widget);
        this.items.splice(indexOfWidget, 1, { widget });
        this.addHorizontalSpacers();
    }
    /**
     * @return {?}
     */
    endWidgetResize() {
        this.resizeGuidelines = [];
        this.allowHighlighting();
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    onWidgetResizeStarted(widgetComponent) {
        this.drawResizeGuidelines(widgetComponent);
        this.preventHighlightingWhileMoving();
        this.mouseUpSubscription =
            Observable.fromEvent(this.document, 'mouseup')
                .subscribe(() => {
                this.endWidgetResize();
                if (this.mouseUpSubscription) {
                    this.mouseUpSubscription.unsubscribe();
                }
            });
        this.touchEndSubscription =
            Observable.fromEvent(this.document, 'touchend')
                .subscribe(() => {
                this.endWidgetResize();
                if (this.touchEndSubscription) {
                    this.touchEndSubscription.unsubscribe();
                }
            });
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    onRenderWidget(widget) {
        this.items.unshift({ widget });
        this.addHorizontalSpacers();
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    onDerenderWidget(widget) {
        this.items
            .filter(x => x.widget && x.widget.id === widget.id)
            .forEach(x => {
            this.items.splice(this.items.indexOf(x), 1);
        });
        this.addHorizontalSpacers();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEditLayout(event) {
        this.layoutEditor.edit(event.pageX, event.pageY);
        this.toggleOverlay();
    }
    /**
     * @return {?}
     */
    onHideLayoutEditor() {
        this.layoutEditor.hide();
        this.toggleOverlay();
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    onWidgetCloseClick(widget) {
        this.items
            .filter(x => x.widget && x.widget === widget)
            .forEach(x => {
            this.items.splice(this.items.indexOf(x), 1);
        });
        this.addHorizontalSpacers();
    }
    /**
     * @return {?}
     */
    onWidgetToggleFullScreenClick() {
        this.toggleOverlay();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
        }
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    }
}
PanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-widgets-panel',
                template: `<app-widgets-panel-controls (editLibrary)='onEditLibrary($event)' (editLayout)='onEditLayout($event)'></app-widgets-panel-controls>
<app-widgets-library *ngIf='library.isDisplayed' [library]='library' (done)='onHideLibrary()' (renderWidget)='onRenderWidget($event)' (derenderWidget)='onDerenderWidget($event)'></app-widgets-library>
<app-widgets-layout-editor *ngIf='layoutEditor.isDisplayed' [layoutEditor]='layoutEditor' (done)='onHideLayoutEditor()'></app-widgets-layout-editor>
<ng-container *ngFor='let item of items'>
  <app-widget *ngIf='item.widget; else drop' [widget]='item.widget' (widgetMoving)='onWidgetMove($event)' (widgetDropped)='onWidgetDropped()' (widgetHovered)='onWidgetHovered($event)' (widgetUnhovered)='onWidgetUnhovered()' (resizeStarted)='onWidgetResizeStarted($event)'
    (close)='onWidgetCloseClick($event)' (fullscreen)='onWidgetToggleFullScreenClick()'></app-widget>
  <ng-template #drop>
    <app-widget-drop-target *ngIf='item.dropTarget; else spacer' [dropTarget]='item.dropTarget' [height]='item.height'></app-widget-drop-target>
    <ng-template #spacer>
      <app-widgets-panel-spacer [spacer]='item.spacer' (spacerHovered)='onSpacerHovered($event)' (spacerUnhovered)='onSpacerUnhovered()'></app-widgets-panel-spacer>
    </ng-template>
  </ng-template>
</ng-container>
<app-widget-resize-guideline *ngFor='let guideline of resizeGuidelines' [guideline]='guideline' (resized)='onWidgetResized($event)'></app-widget-resize-guideline>`,
                styles: [`.moving-widget{position:absolute;pointer-events:none;z-index:100}`]
            },] },
];
/** @nocollapse */
PanelComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: undefined, decorators: [{ type: Inject, args: ['widgetsService',] },] },
    { type: BootstrapService, },
];
PanelComponent.propDecorators = {
    "onResize": [{ type: HostListener, args: ['window:resize',] },],
};
function PanelComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PanelComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PanelComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    PanelComponent.propDecorators;
    /** @type {?} */
    PanelComponent.prototype.library;
    /** @type {?} */
    PanelComponent.prototype.layoutEditor;
    /** @type {?} */
    PanelComponent.prototype.items;
    /** @type {?} */
    PanelComponent.prototype.resizeGuidelines;
    /** @type {?} */
    PanelComponent.prototype.moveHoverSubscription;
    /** @type {?} */
    PanelComponent.prototype.mouseUpSubscription;
    /** @type {?} */
    PanelComponent.prototype.touchEndSubscription;
    /** @type {?} */
    PanelComponent.prototype.isOverlayDisplayed;
    /** @type {?} */
    PanelComponent.prototype.movingWidgetComponent;
    /** @type {?} */
    PanelComponent.prototype.document;
    /** @type {?} */
    PanelComponent.prototype.widgetsService;
    /** @type {?} */
    PanelComponent.prototype.bootstrapService;
}

//# sourceMappingURL=data:application/json;base64,