/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';
import { BootstrapService } from '../bootstrap.service';
export class ResizeGuidelineComponent {
    /**
     * @param {?} elementRef
     * @param {?} bootstrapService
     */
    constructor(elementRef, bootstrapService) {
        this.elementRef = elementRef;
        this.bootstrapService = bootstrapService;
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const /** @type {?} */ thisElement = this.elementRef.nativeElement;
        thisElement.classList.add(this.bootstrapService.columnPrefix + this.guideline.widthOfGuideline);
        thisElement.style.top = (this.guideline.top + window.scrollY) + 'px';
        thisElement.style.height = this.guideline.height + 'px';
    }
    /**
     * @return {?}
     */
    onHover() {
        const /** @type {?} */ widget = this.guideline.widget;
        if (this.guideline.targetWidthOfWidget !== this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget))) {
            this.bootstrapService.resize(this.guideline.widget, this.guideline.targetWidthOfWidget);
            this.resized.emit(this.guideline.widget);
        }
    }
}
ResizeGuidelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-widget-resize-guideline',
                template: `<div (mouseenter)='onHover()' (touchenter)='onHover()'></div>`,
                styles: [`:host{position:absolute}:host>div{border-right:1px dotted green;height:100%}`]
            },] },
];
/** @nocollapse */
ResizeGuidelineComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: BootstrapService, },
];
ResizeGuidelineComponent.propDecorators = {
    "guideline": [{ type: Input },],
    "resized": [{ type: Output },],
};
function ResizeGuidelineComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ResizeGuidelineComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ResizeGuidelineComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ResizeGuidelineComponent.propDecorators;
    /** @type {?} */
    ResizeGuidelineComponent.prototype.guideline;
    /** @type {?} */
    ResizeGuidelineComponent.prototype.resized;
    /** @type {?} */
    ResizeGuidelineComponent.prototype.elementRef;
    /** @type {?} */
    ResizeGuidelineComponent.prototype.bootstrapService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWd1aWRlbGluZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS8iLCJzb3VyY2VzIjpbInNyYy9kYXNoYm9hcmQvd2lkZ2V0cy9yZXNpemUtZ3VpZGVsaW5lL3Jlc2l6ZS1ndWlkZWxpbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFPeEQsTUFBTTs7Ozs7SUFJSixZQUFvQixVQUFzQixFQUFVLGdCQUFrQztRQUFsRSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjt1QkFGbEUsSUFBSSxZQUFZLEVBQU87S0FFZ0Q7Ozs7SUFFM0YsUUFBUSxNQUFZOzs7O0lBRXBCLGtCQUFrQjtRQUNoQix1QkFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDbEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3JFLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztLQUN6RDs7OztJQUVELE9BQU87UUFDTCx1QkFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDckMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9HLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3hGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUM7S0FDRjs7O1lBMUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2QyxRQUFRLEVBQUUsK0RBQStEO2dCQUN6RSxNQUFNLEVBQUUsQ0FBQyw4RUFBOEUsQ0FBQzthQUN6Rjs7OztZQVB3RCxVQUFVO1lBQzFELGdCQUFnQjs7OzBCQVF0QixLQUFLO3dCQUNMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJvb3RzdHJhcFNlcnZpY2UgfSBmcm9tICcuLi9ib290c3RyYXAuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC13aWRnZXQtcmVzaXplLWd1aWRlbGluZScsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2IChtb3VzZWVudGVyKT0nb25Ib3ZlcigpJyAodG91Y2hlbnRlcik9J29uSG92ZXIoKSc+PC9kaXY+YCxcclxuICBzdHlsZXM6IFtgOmhvc3R7cG9zaXRpb246YWJzb2x1dGV9Omhvc3Q+ZGl2e2JvcmRlci1yaWdodDoxcHggZG90dGVkIGdyZWVuO2hlaWdodDoxMDAlfWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNpemVHdWlkZWxpbmVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xyXG4gIEBJbnB1dCgpIGd1aWRlbGluZTogYW55O1xyXG4gIEBPdXRwdXQoKSByZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBib290c3RyYXBTZXJ2aWNlOiBCb290c3RyYXBTZXJ2aWNlKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xyXG4gICAgY29uc3QgdGhpc0VsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgIHRoaXNFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5ib290c3RyYXBTZXJ2aWNlLmNvbHVtblByZWZpeCArIHRoaXMuZ3VpZGVsaW5lLndpZHRoT2ZHdWlkZWxpbmUpO1xyXG4gICAgdGhpc0VsZW1lbnQuc3R5bGUudG9wID0gKHRoaXMuZ3VpZGVsaW5lLnRvcCArIHdpbmRvdy5zY3JvbGxZKSArICdweCc7XHJcbiAgICB0aGlzRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmd1aWRlbGluZS5oZWlnaHQgKyAncHgnO1xyXG4gIH1cclxuXHJcbiAgb25Ib3ZlcigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHdpZGdldCA9IHRoaXMuZ3VpZGVsaW5lLndpZGdldDtcclxuICAgIGlmICh0aGlzLmd1aWRlbGluZS50YXJnZXRXaWR0aE9mV2lkZ2V0ICE9PSB0aGlzLmJvb3RzdHJhcFNlcnZpY2UuZ2V0V2lkdGgod2lkZ2V0LmdldEN1cnJlbnRXaWR0aC5iaW5kKHdpZGdldCkpKSB7XHJcbiAgICAgIHRoaXMuYm9vdHN0cmFwU2VydmljZS5yZXNpemUodGhpcy5ndWlkZWxpbmUud2lkZ2V0LCB0aGlzLmd1aWRlbGluZS50YXJnZXRXaWR0aE9mV2lkZ2V0KTtcclxuICAgICAgdGhpcy5yZXNpemVkLmVtaXQodGhpcy5ndWlkZWxpbmUud2lkZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19