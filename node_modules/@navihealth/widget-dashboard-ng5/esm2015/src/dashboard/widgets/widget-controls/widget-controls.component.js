/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';
import { Widget } from '../widget.model';
export class WidgetControlsComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.close = new EventEmitter();
        this.fullscreen = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.elementRef.nativeElement.classList.add('col-12');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // We'll set the width of the title based on the width left by the buttons.
        // This will make the overflow on the title work properly. But we won't
        // do this until the stack is empty. Without the setTime, the first page load
        // after a Hard Reload does not calculate the offsetWidths correctly.
        setTimeout(() => {
            const /** @type {?} */ containerElement = this.elementRef.nativeElement.children[0];
            const /** @type {?} */ controlsWidth = containerElement.offsetWidth;
            const /** @type {?} */ buttonsElement = containerElement.querySelector('.buttons');
            const /** @type {?} */ buttonsWidth = buttonsElement.offsetWidth;
            const /** @type {?} */ padding = 8;
            const /** @type {?} */ titleElement = containerElement.querySelector('.title');
            titleElement.style.width = (100 - padding - (buttonsWidth / controlsWidth * 100)) + '%';
        }, 0);
    }
    /**
     * @return {?}
     */
    onCollapseClick() {
        this.widget.collapse();
    }
    /**
     * @return {?}
     */
    onExpandClick() {
        this.widget.expand();
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.close.emit();
    }
    /**
     * @return {?}
     */
    onToggleFullScreenClick() {
        this.fullscreen.emit();
    }
}
WidgetControlsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-widget-controls',
                template: `<div>
  <div class='title'>{{widget.title}}</div>
  <div *ngIf='!widget.isFullScreen; else fullscreen' class='buttons no-highlighting not-grabbable'>
    <span *ngIf='widget.isExpanded; else expand' class='material-icons' (click)='onCollapseClick()'>expand_less</span>
    <ng-template #expand>
      <span class='material-icons' (click)='onExpandClick()'>expand_more</span>
    </ng-template>
    <span class='material-icons d-none d-sm-inline' (click)='onToggleFullScreenClick()'>fullscreen</span>
    <span class='material-icons' (click)='onCloseClick()'>close</span>
  </div>
  <ng-template #fullscreen>
    <div class='material-icons buttons no-highlighting not-grabbable' (click)='onToggleFullScreenClick()'>fullscreen_exit</div>
  </ng-template>
</div>`,
                styles: [`:host{display:block;cursor:-webkit-grab;cursor:grab;overflow:hidden;margin-bottom:15px}:host>div>.title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host>div>div:first-of-type{float:left}:host>div>div:last-of-type{float:right;cursor:default}.fullscreen :host{cursor:default}`]
            },] },
];
/** @nocollapse */
WidgetControlsComponent.ctorParameters = () => [
    { type: ElementRef, },
];
WidgetControlsComponent.propDecorators = {
    "widget": [{ type: Input },],
    "close": [{ type: Output },],
    "fullscreen": [{ type: Output },],
};
function WidgetControlsComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    WidgetControlsComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    WidgetControlsComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    WidgetControlsComponent.propDecorators;
    /** @type {?} */
    WidgetControlsComponent.prototype.widget;
    /** @type {?} */
    WidgetControlsComponent.prototype.close;
    /** @type {?} */
    WidgetControlsComponent.prototype.fullscreen;
    /** @type {?} */
    WidgetControlsComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LWNvbnRyb2xzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1LyIsInNvdXJjZXMiOlsic3JjL2Rhc2hib2FyZC93aWRnZXRzL3dpZGdldC1jb250cm9scy93aWRnZXQtY29udHJvbHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBbUMsTUFBTSxlQUFlLENBQUM7QUFDNUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBb0J6QyxNQUFNOzs7O0lBS0osWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtxQkFIeEIsSUFBSSxZQUFZLEVBQVE7MEJBQ25CLElBQUksWUFBWSxFQUFRO0tBRUE7Ozs7SUFFL0MsUUFBUTtLQUNQOzs7O0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdkQ7Ozs7SUFFRCxlQUFlOzs7OztRQUtiLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCx1QkFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkUsdUJBQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztZQUNuRCx1QkFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xFLHVCQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO1lBQ2hELHVCQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDbEIsdUJBQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5RCxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxZQUFZLEdBQUcsYUFBYSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ3pGLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDUDs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3hCOzs7O0lBRUQsYUFBYTtRQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDdEI7Ozs7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNuQjs7OztJQUVELHVCQUF1QjtRQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ3hCOzs7WUE5REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7OztPQWFMO2dCQUNMLE1BQU0sRUFBRSxDQUFDLGtTQUFrUyxDQUFDO2FBQzdTOzs7O1lBcEJ3RCxVQUFVOzs7dUJBc0JoRSxLQUFLO3NCQUNMLE1BQU07MkJBQ04sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi4vd2lkZ2V0Lm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLXdpZGdldC1jb250cm9scycsXHJcbiAgdGVtcGxhdGU6IGA8ZGl2PlxyXG4gIDxkaXYgY2xhc3M9J3RpdGxlJz57e3dpZGdldC50aXRsZX19PC9kaXY+XHJcbiAgPGRpdiAqbmdJZj0nIXdpZGdldC5pc0Z1bGxTY3JlZW47IGVsc2UgZnVsbHNjcmVlbicgY2xhc3M9J2J1dHRvbnMgbm8taGlnaGxpZ2h0aW5nIG5vdC1ncmFiYmFibGUnPlxyXG4gICAgPHNwYW4gKm5nSWY9J3dpZGdldC5pc0V4cGFuZGVkOyBlbHNlIGV4cGFuZCcgY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvbkNvbGxhcHNlQ2xpY2soKSc+ZXhwYW5kX2xlc3M8L3NwYW4+XHJcbiAgICA8bmctdGVtcGxhdGUgI2V4cGFuZD5cclxuICAgICAgPHNwYW4gY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvbkV4cGFuZENsaWNrKCknPmV4cGFuZF9tb3JlPC9zcGFuPlxyXG4gICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgIDxzcGFuIGNsYXNzPSdtYXRlcmlhbC1pY29ucyBkLW5vbmUgZC1zbS1pbmxpbmUnIChjbGljayk9J29uVG9nZ2xlRnVsbFNjcmVlbkNsaWNrKCknPmZ1bGxzY3JlZW48L3NwYW4+XHJcbiAgICA8c3BhbiBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnIChjbGljayk9J29uQ2xvc2VDbGljaygpJz5jbG9zZTwvc3Bhbj5cclxuICA8L2Rpdj5cclxuICA8bmctdGVtcGxhdGUgI2Z1bGxzY3JlZW4+XHJcbiAgICA8ZGl2IGNsYXNzPSdtYXRlcmlhbC1pY29ucyBidXR0b25zIG5vLWhpZ2hsaWdodGluZyBub3QtZ3JhYmJhYmxlJyAoY2xpY2spPSdvblRvZ2dsZUZ1bGxTY3JlZW5DbGljaygpJz5mdWxsc2NyZWVuX2V4aXQ8L2Rpdj5cclxuICA8L25nLXRlbXBsYXRlPlxyXG48L2Rpdj5gLFxyXG4gIHN0eWxlczogW2A6aG9zdHtkaXNwbGF5OmJsb2NrO2N1cnNvcjotd2Via2l0LWdyYWI7Y3Vyc29yOmdyYWI7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbi1ib3R0b206MTVweH06aG9zdD5kaXY+LnRpdGxle3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn06aG9zdD5kaXY+ZGl2OmZpcnN0LW9mLXR5cGV7ZmxvYXQ6bGVmdH06aG9zdD5kaXY+ZGl2Omxhc3Qtb2YtdHlwZXtmbG9hdDpyaWdodDtjdXJzb3I6ZGVmYXVsdH0uZnVsbHNjcmVlbiA6aG9zdHtjdXJzb3I6ZGVmYXVsdH1gXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgV2lkZ2V0Q29udHJvbHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIEBJbnB1dCgpIHdpZGdldDogV2lkZ2V0O1xyXG4gIEBPdXRwdXQoKSBjbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuICBAT3V0cHV0KCkgZnVsbHNjcmVlbiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2wtMTInKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIC8vIFdlJ2xsIHNldCB0aGUgd2lkdGggb2YgdGhlIHRpdGxlIGJhc2VkIG9uIHRoZSB3aWR0aCBsZWZ0IGJ5IHRoZSBidXR0b25zLlxyXG4gICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIG92ZXJmbG93IG9uIHRoZSB0aXRsZSB3b3JrIHByb3Blcmx5LiBCdXQgd2Ugd29uJ3RcclxuICAgIC8vIGRvIHRoaXMgdW50aWwgdGhlIHN0YWNrIGlzIGVtcHR5LiBXaXRob3V0IHRoZSBzZXRUaW1lLCB0aGUgZmlyc3QgcGFnZSBsb2FkXHJcbiAgICAvLyBhZnRlciBhIEhhcmQgUmVsb2FkIGRvZXMgbm90IGNhbGN1bGF0ZSB0aGUgb2Zmc2V0V2lkdGhzIGNvcnJlY3RseS5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF07XHJcbiAgICAgIGNvbnN0IGNvbnRyb2xzV2lkdGggPSBjb250YWluZXJFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICBjb25zdCBidXR0b25zRWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbnMnKTtcclxuICAgICAgY29uc3QgYnV0dG9uc1dpZHRoID0gYnV0dG9uc0VsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSA4O1xyXG4gICAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aXRsZScpO1xyXG4gICAgICB0aXRsZUVsZW1lbnQuc3R5bGUud2lkdGggPSAoMTAwIC0gcGFkZGluZyAtIChidXR0b25zV2lkdGggLyBjb250cm9sc1dpZHRoICogMTAwKSkgKyAnJSc7ICBcclxuICAgIH0sIDApO1xyXG4gIH1cclxuXHJcbiAgb25Db2xsYXBzZUNsaWNrKCkge1xyXG4gICAgdGhpcy53aWRnZXQuY29sbGFwc2UoKTtcclxuICB9XHJcblxyXG4gIG9uRXhwYW5kQ2xpY2soKSB7XHJcbiAgICB0aGlzLndpZGdldC5leHBhbmQoKTtcclxuICB9XHJcblxyXG4gIG9uQ2xvc2VDbGljaygpIHtcclxuICAgIHRoaXMuY2xvc2UuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgb25Ub2dnbGVGdWxsU2NyZWVuQ2xpY2soKSB7XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW4uZW1pdCgpO1xyXG4gIH1cclxufVxyXG4iXX0=