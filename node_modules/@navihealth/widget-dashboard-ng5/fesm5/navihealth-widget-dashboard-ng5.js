import { Injectable, Component, ElementRef, Input, Output, EventEmitter, Inject, HostListener, NgZone, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/delay';
import { __spread } from 'tslib';
import 'rxjs/add/observable/fromEvent';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BootstrapService = /** @class */ (function () {
    function BootstrapService() {
        this.maxColumns = 12;
        this.columnPrefix = 'col-';
        this.breakpoints = {
            xl: 'd-xl-none',
            lg: 'd-lg-none',
            md: 'd-md-none',
            sm: 'd-sm-none',
            xs: 'd-none'
        };
    }
    /**
     * @return {?}
     */
    BootstrapService.prototype.getCurrentBreakpoint = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ breakpoint = '';
        var /** @type {?} */ marker = document.createElement('div');
        marker.style.visibility = 'hidden';
        document.body.appendChild(marker);
        var /** @type {?} */ breakpointKeys = Object.keys(this.breakpoints);
        for (var /** @type {?} */ i = 0; i < breakpointKeys.length; i++) {
            breakpoint = breakpointKeys[i];
            marker.classList.add(this.breakpoints[breakpoint]);
            var /** @type {?} */ style = window.getComputedStyle(marker);
            if (style.display === 'none') {
                break;
            }
        }
        marker.remove();
        return breakpoint;
    };
    /**
     * @return {?}
     */
    BootstrapService.prototype.hasBreakpointChanged = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        if (breakpoint !== this.currentBreakpoint) {
            this.currentBreakpoint = breakpoint;
            return true;
        }
        return false;
    };
    /**
     * @param {?} getWidth
     * @return {?}
     */
    BootstrapService.prototype.getWidth = /**
     * @param {?} getWidth
     * @return {?}
     */
    function (getWidth) {
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        var /** @type {?} */ width = getWidth(breakpoint);
        if (!width) {
            // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
            var /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
            while (!width && smallerBreakpoints.length) {
                breakpoint = smallerBreakpoints.shift();
                width = getWidth(breakpoint);
            }
        }
        return width;
    };
    /**
     * @param {?} makeFullWidth
     * @return {?}
     */
    BootstrapService.prototype.makeFullWidth = /**
     * @param {?} makeFullWidth
     * @return {?}
     */
    function (makeFullWidth) {
        var _this = this;
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        // Make each breakpoint at the current size and smaller the full width of a row.
        this.getSmallerBreakpoints(breakpoint)
            .concat([breakpoint])
            .forEach(function (x) {
            makeFullWidth(x, _this.maxColumns);
        });
    };
    /**
     * @param {?} widget
     * @param {?} targetWidthOfWidget
     * @return {?}
     */
    BootstrapService.prototype.resize = /**
     * @param {?} widget
     * @param {?} targetWidthOfWidget
     * @return {?}
     */
    function (widget, targetWidthOfWidget) {
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        var /** @type {?} */ width = widget.getCurrentWidth(breakpoint);
        if (!width) {
            // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
            var /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
            while (!width && smallerBreakpoints.length) {
                breakpoint = smallerBreakpoints.shift();
                width = widget.getCurrentWidth(breakpoint);
            }
        }
        widget.resize(breakpoint, targetWidthOfWidget);
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    BootstrapService.prototype.getClasses = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var /** @type {?} */ widths = widget.getCurrentWidths();
        return Object.keys(widths)
            .map(function (x) {
            var /** @type {?} */ width = widths[x];
            if (x === 'xs') {
                return 'col-' + width;
            }
            return 'col-' + x + '-' + width;
        });
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    BootstrapService.prototype.getSmallerBreakpoints = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        var /** @type {?} */ allBreakpoints = Object.keys(this.breakpoints);
        var /** @type {?} */ smallerBreakpoints = allBreakpoints.slice(allBreakpoints.indexOf(breakpoint) + 1, allBreakpoints.length);
        return smallerBreakpoints;
    };
    BootstrapService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BootstrapService.ctorParameters = function () { return []; };
    return BootstrapService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DashboardComponent = /** @class */ (function () {
    function DashboardComponent() {
    }
    DashboardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-dashboard',
                    template: "<app-widgets-panel class='row'></app-widgets-panel>",
                    styles: [""]
                },] },
    ];
    return DashboardComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SpacerComponent = /** @class */ (function () {
    function SpacerComponent(elementRef) {
        this.elementRef = elementRef;
        this.spacerHovered = new EventEmitter();
        this.spacerUnhovered = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SpacerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    SpacerComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('col-12');
    };
    /**
     * @return {?}
     */
    SpacerComponent.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        this.spacerHovered.emit(this);
    };
    /**
     * @return {?}
     */
    SpacerComponent.prototype.onTouchEnter = /**
     * @return {?}
     */
    function () {
        this.spacerHovered.emit(this);
    };
    /**
     * @return {?}
     */
    SpacerComponent.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.spacerUnhovered.emit();
    };
    /**
     * @return {?}
     */
    SpacerComponent.prototype.onTouchLeave = /**
     * @return {?}
     */
    function () {
        this.spacerUnhovered.emit();
    };
    SpacerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-panel-spacer',
                    template: "<div (mouseenter)='onMouseEnter()' (touchenter)='onTouchEnter()' (mouseleave)='onMouseLeave()' (touchleave)='onTouchLeave()'>\n</div>",
                    styles: [":host{height:30px}:host>div{height:100%}"]
                },] },
    ];
    /** @nocollapse */
    SpacerComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    SpacerComponent.propDecorators = {
        "spacer": [{ type: Input },],
        "spacerHovered": [{ type: Output },],
        "spacerUnhovered": [{ type: Output },],
    };
    return SpacerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Library = /** @class */ (function () {
    function Library(renderedWidgets, availableWidgets) {
        this.renderedWidgets = renderedWidgets;
        this.availableWidgets = availableWidgets;
        this.isDisplayed = false;
        this.buildLibrary();
    }
    /**
     * @param {?} widget
     * @return {?}
     */
    Library.prototype.isWidgetRendered = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        return this.renderedWidgets
            .map(function (renderedWidget) { return renderedWidget.id; })
            .indexOf(widget.id) >= 0;
    };
    /**
     * @return {?}
     */
    Library.prototype.buildLibrary = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.widgets = this.availableWidgets.map(function (widget) {
            var /** @type {?} */ isRendered = _this.isWidgetRendered(widget);
            return { isRendered: isRendered, widget: widget };
        });
    };
    /**
     * @param {?} xPosition
     * @param {?} yPosition
     * @return {?}
     */
    Library.prototype.edit = /**
     * @param {?} xPosition
     * @param {?} yPosition
     * @return {?}
     */
    function (xPosition, yPosition) {
        this.isDisplayed = true;
        this.xPosition = xPosition;
        this.yPosition = yPosition;
    };
    /**
     * @return {?}
     */
    Library.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.isDisplayed = false;
        this.xPosition = null;
        this.yPosition = null;
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    Library.prototype.renderWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        this.renderedWidgets.push(widget);
        this.buildLibrary();
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    Library.prototype.derenderWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        this.renderedWidgets
            .filter(function (x) { return x.id === widget.id; })
            .forEach(function (x) {
            _this.renderedWidgets.splice(_this.renderedWidgets.indexOf(x), 1);
        });
        this.buildLibrary();
    };
    return Library;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LayoutEditor = /** @class */ (function () {
    function LayoutEditor() {
        this.isDisplayed = false;
    }
    /**
     * @param {?} xPosition
     * @param {?} yPosition
     * @return {?}
     */
    LayoutEditor.prototype.edit = /**
     * @param {?} xPosition
     * @param {?} yPosition
     * @return {?}
     */
    function (xPosition, yPosition) {
        this.isDisplayed = true;
        this.xPosition = xPosition;
        this.yPosition = yPosition;
    };
    /**
     * @return {?}
     */
    LayoutEditor.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.isDisplayed = false;
        this.xPosition = null;
        this.yPosition = null;
    };
    return LayoutEditor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PanelComponent = /** @class */ (function () {
    function PanelComponent(document, widgetsService, bootstrapService) {
        this.document = document;
        this.widgetsService = widgetsService;
        this.bootstrapService = bootstrapService;
        this.layoutEditor = new LayoutEditor();
        this.resizeGuidelines = [];
        this.isOverlayDisplayed = false;
    }
    /**
     * @return {?}
     */
    PanelComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.bootstrapService.hasBreakpointChanged()) {
            this.addHorizontalSpacers();
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.preventHighlightingWhileMoving = /**
     * @return {?}
     */
    function () {
        this.document.body.classList.add('no-highlighting');
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.allowHighlighting = /**
     * @return {?}
     */
    function () {
        this.document.body.classList.remove('no-highlighting');
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.createSpacer = /**
     * @return {?}
     */
    function () {
        return {
            spacer: {}
        };
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.clearSpacers = /**
     * @return {?}
     */
    function () {
        for (var /** @type {?} */ i = this.items.length - 1; i >= 0; i--) {
            if (this.items[i].spacer) {
                this.items.splice(i, 1);
            }
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.addHorizontalSpacers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.clearSpacers();
        var /** @type {?} */ usedWidthOnRow = 0;
        var /** @type {?} */ indexesToInsertSpacer = [0];
        for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
            var /** @type {?} */ widget = this.items[i].widget || this.items[i].dropTarget;
            if (this.movingWidgetComponent && widget === this.movingWidgetComponent.widget) {
                continue;
            }
            var /** @type {?} */ widgetWidth = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget));
            usedWidthOnRow += widgetWidth;
            if (usedWidthOnRow === this.bootstrapService.maxColumns) {
                indexesToInsertSpacer.push(i + 1);
                usedWidthOnRow = 0;
            }
            else if (usedWidthOnRow > this.bootstrapService.maxColumns) {
                indexesToInsertSpacer.push(i);
                usedWidthOnRow = widgetWidth;
            }
        }
        indexesToInsertSpacer
            .reverse()
            .forEach(function (x) {
            _this.items.splice(x, 0, _this.createSpacer());
        });
        if (!this.items[this.items.length - 1].spacer) {
            this.items.push(this.createSpacer());
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.toggleOverlay = /**
     * @return {?}
     */
    function () {
        this.isOverlayDisplayed = !this.isOverlayDisplayed;
        if (this.isOverlayDisplayed) {
            document.getElementById('overlay').style.display = 'block';
        }
        else {
            document.getElementById('overlay').style.display = 'none';
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ renderedWidgets = this.widgetsService.getRenderedWidgets();
        this.items = renderedWidgets.map(function (x) {
            return { widget: x };
        });
        this.addHorizontalSpacers();
        var /** @type {?} */ availableWidgets = this.widgetsService.getAvailableWidgets();
        this.library = new Library(renderedWidgets, availableWidgets);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelComponent.prototype.onEditLibrary = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.library.edit(event.pageX, event.pageY);
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onHideLibrary = /**
     * @return {?}
     */
    function () {
        this.library.hide();
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.clearExistingDropTarget = /**
     * @return {?}
     */
    function () {
        for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
            if (this.items[i].dropTarget) {
                this.items.splice(i, 1);
            }
        }
    };
    /**
     * @param {?} movingWidget
     * @param {?} indexOfDrop
     * @return {?}
     */
    PanelComponent.prototype.isWidgetMovingDown = /**
     * @param {?} movingWidget
     * @param {?} indexOfDrop
     * @return {?}
     */
    function (movingWidget, indexOfDrop) {
        var /** @type {?} */ indexOfWidgetBeforeMove = this.items
            .map(function (x) { return x.widget; })
            .indexOf(movingWidget);
        return indexOfDrop > indexOfWidgetBeforeMove;
    };
    /**
     * @param {?} currentResident
     * @param {?} newResident
     * @return {?}
     */
    PanelComponent.prototype.insertDropTarget = /**
     * @param {?} currentResident
     * @param {?} newResident
     * @return {?}
     */
    function (currentResident, newResident) {
        if (!newResident) {
            newResident = currentResident;
        }
        this.clearExistingDropTarget();
        var /** @type {?} */ dropTarget = newResident.widget.clone();
        var /** @type {?} */ indexOfDrop;
        if (currentResident instanceof SpacerComponent) {
            this.bootstrapService.makeFullWidth(dropTarget.makeFullWidth.bind(dropTarget));
            indexOfDrop = this.items
                .map(function (x) { return x.spacer; })
                .indexOf(currentResident.spacer);
        }
        else {
            indexOfDrop = this.items
                .map(function (x) { return x.widget; })
                .indexOf(currentResident.widget);
            if (this.isWidgetMovingDown(newResident.widget, indexOfDrop)) {
                indexOfDrop++;
            }
        }
        var /** @type {?} */ height = newResident.getHeightInformation().height;
        this.items.splice(indexOfDrop, 0, { dropTarget: dropTarget, height: height });
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.onWidgetMove = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        this.movingWidgetComponent = widgetComponent;
        this.preventHighlightingWhileMoving();
        this.insertDropTarget(widgetComponent, null);
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onWidgetDropped = /**
     * @return {?}
     */
    function () {
        this.items.splice(this.items.map(function (x) { return x.widget; }).indexOf(this.movingWidgetComponent.widget), 1);
        for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
            if (this.items[i].dropTarget) {
                this.items.splice(i, 1, { widget: this.movingWidgetComponent.widget });
                break;
            }
        }
        this.allowHighlighting();
        this.movingWidgetComponent = null;
        this.addHorizontalSpacers();
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.onWidgetHovered = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        var _this = this;
        if (!this.movingWidgetComponent) {
            return;
        }
        console.log('test 0', new Date());
        this.moveHoverSubscription = Observable.of({})
            .delay(30)
            .subscribe(function () {
            console.log('test', new Date());
            if (!_this.movingWidgetComponent) {
                return;
            }
            _this.insertDropTarget(widgetComponent, _this.movingWidgetComponent);
            _this.addHorizontalSpacers();
        });
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onWidgetUnhovered = /**
     * @return {?}
     */
    function () {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
            this.moveHoverSubscription = null;
        }
    };
    /**
     * @param {?} spacerComponent
     * @return {?}
     */
    PanelComponent.prototype.onSpacerHovered = /**
     * @param {?} spacerComponent
     * @return {?}
     */
    function (spacerComponent) {
        var _this = this;
        if (!this.movingWidgetComponent) {
            return;
        }
        this.moveHoverSubscription = Observable.of({})
            .delay(300)
            .subscribe(function () {
            if (!_this.movingWidgetComponent) {
                return;
            }
            _this.insertDropTarget(spacerComponent, _this.movingWidgetComponent);
            _this.addHorizontalSpacers();
        });
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onSpacerUnhovered = /**
     * @return {?}
     */
    function () {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
            this.moveHoverSubscription = null;
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.makeGrid = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ grid = [];
        grid.push([]);
        var /** @type {?} */ currentRowWidth = 0;
        var /** @type {?} */ widgets = this.items
            .filter(function (x) { return x.widget; })
            .map(function (x) { return x.widget; });
        for (var /** @type {?} */ i = 0; i < widgets.length; i++) {
            var /** @type {?} */ widget = widgets[i];
            var /** @type {?} */ width = this.bootstrapService
                .getWidth(widget.getCurrentWidth.bind(widget));
            grid[grid.length - 1].push(widget);
            currentRowWidth += width;
            var /** @type {?} */ isLastWidget = i === widgets.length - 1;
            if (isLastWidget) {
                break;
            }
            if (currentRowWidth === this.bootstrapService.maxColumns) {
                grid.push([]);
                currentRowWidth = 0;
            }
            else {
                // Preview the next widget and see if a new row is needed due to lack of space.
                var /** @type {?} */ nextWidget = widgets[i + 1];
                var /** @type {?} */ nextWidgetWidth = this.bootstrapService
                    .getWidth(nextWidget.getCurrentWidth.bind(nextWidget));
                var /** @type {?} */ spaceLeftOnCurrentRow = this.bootstrapService.maxColumns - currentRowWidth;
                if (nextWidgetWidth > spaceLeftOnCurrentRow) {
                    grid.push([]);
                    currentRowWidth = 0;
                }
            }
        }
        return grid;
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.findRowContainingWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        // I'm making a multi-dimensional array of the entire grid before trying to
        // find which row the widget is in. This is less efficient than building the
        // grid and simultaneously checking if the row has the widget, but it makes
        // the logic much more reasonable.
        var /** @type {?} */ grid = this.makeGrid();
        for (var /** @type {?} */ i = 0; i < grid.length; i++) {
            var /** @type {?} */ widgetIndex = grid[i].indexOf(widget);
            if (widgetIndex >= 0) {
                return grid[i];
            }
        }
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.calculateBoundaries = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        var /** @type {?} */ row = this.findRowContainingWidget(widget);
        console.log("row", row);
        var /** @type {?} */ currentPosition = row
            .slice(0, row.indexOf(widget) + 1)
            .map(function (x) { return _this.bootstrapService.getWidth(x.getCurrentWidth.bind(x)); })
            .reduce(function (x, y) { return x + y; });
        var /** @type {?} */ minimumWidth = this.bootstrapService.getWidth(widget.getMinimumWidth.bind(widget));
        var /** @type {?} */ spaceToMinimize = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget)) - minimumWidth;
        // Don't go left far enough to exceed the minimum of the widget.
        var /** @type {?} */ left = currentPosition - spaceToMinimize;
        // Don't go right far enough to exceed the width of the row.
        var /** @type {?} */ right = this.bootstrapService.maxColumns;
        // This is used to determine at which column to start drawing guidelines.
        var /** @type {?} */ offset = minimumWidth - left;
        return { left: left, right: right, offset: offset };
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.drawResizeGuidelines = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        var /** @type {?} */ heightInformation = widgetComponent.getHeightInformation();
        var /** @type {?} */ boundaries = this.calculateBoundaries(widgetComponent.widget);
        for (var /** @type {?} */ i = boundaries.left; i <= boundaries.right; i++) {
            // unshift() which inserts at the beginning of the array instead of push()
            // because we want to display the longest guideline first so that the shorter
            // one is on top of the longer one. This will help when we hover over each one.
            // If the longer one was on top it would be the only guideline raising events.
            this.resizeGuidelines.unshift({
                widthOfGuideline: i,
                targetWidthOfWidget: i + boundaries.offset,
                top: heightInformation.top,
                height: heightInformation.height,
                widget: widgetComponent.widget
            });
        }
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onWidgetResized = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var /** @type {?} */ indexOfWidget = this.items
            .map(function (x) { return x.widget; })
            .indexOf(widget);
        this.items.splice(indexOfWidget, 1, { widget: widget });
        this.addHorizontalSpacers();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.endWidgetResize = /**
     * @return {?}
     */
    function () {
        this.resizeGuidelines = [];
        this.allowHighlighting();
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.onWidgetResizeStarted = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        var _this = this;
        this.drawResizeGuidelines(widgetComponent);
        this.preventHighlightingWhileMoving();
        this.mouseUpSubscription =
            Observable.fromEvent(this.document, 'mouseup')
                .subscribe(function () {
                _this.endWidgetResize();
                if (_this.mouseUpSubscription) {
                    _this.mouseUpSubscription.unsubscribe();
                }
            });
        this.touchEndSubscription =
            Observable.fromEvent(this.document, 'touchend')
                .subscribe(function () {
                _this.endWidgetResize();
                if (_this.touchEndSubscription) {
                    _this.touchEndSubscription.unsubscribe();
                }
            });
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onRenderWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        this.items.unshift({ widget: widget });
        this.addHorizontalSpacers();
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onDerenderWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        this.items
            .filter(function (x) { return x.widget && x.widget.id === widget.id; })
            .forEach(function (x) {
            _this.items.splice(_this.items.indexOf(x), 1);
        });
        this.addHorizontalSpacers();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelComponent.prototype.onEditLayout = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.layoutEditor.edit(event.pageX, event.pageY);
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onHideLayoutEditor = /**
     * @return {?}
     */
    function () {
        this.layoutEditor.hide();
        this.toggleOverlay();
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onWidgetCloseClick = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        this.items
            .filter(function (x) { return x.widget && x.widget === widget; })
            .forEach(function (x) {
            _this.items.splice(_this.items.indexOf(x), 1);
        });
        this.addHorizontalSpacers();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onWidgetToggleFullScreenClick = /**
     * @return {?}
     */
    function () {
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
        }
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    };
    PanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-panel',
                    template: "<app-widgets-panel-controls (editLibrary)='onEditLibrary($event)' (editLayout)='onEditLayout($event)'></app-widgets-panel-controls>\n<app-widgets-library *ngIf='library.isDisplayed' [library]='library' (done)='onHideLibrary()' (renderWidget)='onRenderWidget($event)' (derenderWidget)='onDerenderWidget($event)'></app-widgets-library>\n<app-widgets-layout-editor *ngIf='layoutEditor.isDisplayed' [layoutEditor]='layoutEditor' (done)='onHideLayoutEditor()'></app-widgets-layout-editor>\n<ng-container *ngFor='let item of items'>\n  <app-widget *ngIf='item.widget; else drop' [widget]='item.widget' (widgetMoving)='onWidgetMove($event)' (widgetDropped)='onWidgetDropped()' (widgetHovered)='onWidgetHovered($event)' (widgetUnhovered)='onWidgetUnhovered()' (resizeStarted)='onWidgetResizeStarted($event)'\n    (close)='onWidgetCloseClick($event)' (fullscreen)='onWidgetToggleFullScreenClick()'></app-widget>\n  <ng-template #drop>\n    <app-widget-drop-target *ngIf='item.dropTarget; else spacer' [dropTarget]='item.dropTarget' [height]='item.height'></app-widget-drop-target>\n    <ng-template #spacer>\n      <app-widgets-panel-spacer [spacer]='item.spacer' (spacerHovered)='onSpacerHovered($event)' (spacerUnhovered)='onSpacerUnhovered()'></app-widgets-panel-spacer>\n    </ng-template>\n  </ng-template>\n</ng-container>\n<app-widget-resize-guideline *ngFor='let guideline of resizeGuidelines' [guideline]='guideline' (resized)='onWidgetResized($event)'></app-widget-resize-guideline>",
                    styles: [".moving-widget{position:absolute;pointer-events:none;z-index:100}"]
                },] },
    ];
    /** @nocollapse */
    PanelComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: undefined, decorators: [{ type: Inject, args: ['widgetsService',] },] },
        { type: BootstrapService, },
    ]; };
    PanelComponent.propDecorators = {
        "onResize": [{ type: HostListener, args: ['window:resize',] },],
    };
    return PanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PanelControlsComponent = /** @class */ (function () {
    function PanelControlsComponent(elementRef) {
        this.elementRef = elementRef;
        this.editLibrary = new EventEmitter();
        this.editLayout = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PanelControlsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PanelControlsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('col-12');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelControlsComponent.prototype.onLibraryClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.editLibrary.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelControlsComponent.prototype.onLayoutClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.editLayout.emit(event);
    };
    PanelControlsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-panel-controls',
                    template: "<span class='no-highlighting'>\n  <span class='material-icons' (click)='onLibraryClick($event)'>add</span>\n<span class='material-icons' (click)='onLayoutClick($event)'>dashboard</span>\n</span>",
                    styles: [":host{margin-top:10px;margin-right:20px;text-align:right}"]
                },] },
    ];
    /** @nocollapse */
    PanelControlsComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    PanelControlsComponent.propDecorators = {
        "editLibrary": [{ type: Output },],
        "editLayout": [{ type: Output },],
    };
    return PanelControlsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Widget = /** @class */ (function () {
    function Widget(id, title, currentWidth, minimumWidth, initialHeight, render, isHidden) {
        this.currentWidth = currentWidth;
        this.minimumWidth = minimumWidth;
        this.isExpanded = true;
        this.isFullScreen = false;
        this.id = id;
        this.title = title;
        this.initialHeight = initialHeight;
        this.render = (/** @type {?} */ (render)).bind(this);
        this.isHidden = isHidden;
        this.currentWidth = currentWidth;
        // This uses Object.assign to create a new object from the one passed in.
        // This is to prevent the instantiator from passing in one object to both
        // currentWidth and minimumWidth and then having that object ref assigned
        // to both properties. If that were to happen, then updating the
        // currentWidth would also update the minimumWidth. The minimumWidth
        // should never be changed once set.
        this.minimumWidth = Object.assign({}, minimumWidth);
        Object.freeze(this.minimumWidth);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    Widget.createAvailableWidget = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var id = _a.id, title = _a.title, width = _a.width, initialHeight = _a.initialHeight, render = _a.render;
        return new Widget(id, title, width, width, initialHeight, render, false);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    Widget.createRenderedWidget = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var id = _a.id, title = _a.title, currentWidth = _a.currentWidth, minimumWidth = _a.minimumWidth, initialHeight = _a.initialHeight, render = _a.render;
        return new Widget(id, title, currentWidth, minimumWidth, initialHeight, render, false);
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    Widget.prototype.getCurrentWidth = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        return this.currentWidth[breakpoint];
    };
    /**
     * @return {?}
     */
    Widget.prototype.getCurrentWidths = /**
     * @return {?}
     */
    function () {
        return this.currentWidth;
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    Widget.prototype.getMinimumWidth = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        return this.minimumWidth[breakpoint];
    };
    /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    Widget.prototype.makeFullWidth = /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    function (breakpoint, width) {
        if (this.currentWidth[breakpoint]) {
            this.currentWidth[breakpoint] = width;
        }
    };
    /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    Widget.prototype.resize = /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    function (breakpoint, width) {
        this.currentWidth[breakpoint] = width;
    };
    /**
     * @return {?}
     */
    Widget.prototype.expand = /**
     * @return {?}
     */
    function () {
        this.isExpanded = true;
    };
    /**
     * @return {?}
     */
    Widget.prototype.collapse = /**
     * @return {?}
     */
    function () {
        this.isExpanded = false;
    };
    /**
     * @return {?}
     */
    Widget.prototype.toggleFullScreen = /**
     * @return {?}
     */
    function () {
        this.isFullScreen = !this.isFullScreen;
    };
    /**
     * @return {?}
     */
    Widget.prototype.clone = /**
     * @return {?}
     */
    function () {
        return new Widget(this.id, this.title, this.currentWidth, this.minimumWidth, this.initialHeight, this.render, this.isHidden);
    };
    return Widget;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WidgetComponent = /** @class */ (function () {
    function WidgetComponent(document, elementRef, zone, bootstrapService) {
        this.document = document;
        this.elementRef = elementRef;
        this.zone = zone;
        this.bootstrapService = bootstrapService;
        this.widgetMoving = new EventEmitter();
        this.widgetDropped = new EventEmitter();
        this.widgetHovered = new EventEmitter();
        this.widgetUnhovered = new EventEmitter();
        this.resizeStarted = new EventEmitter();
        this.close = new EventEmitter();
        this.fullscreen = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.getUserPosition = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return e.changedTouches ?
            {
                x: e.changedTouches[0].pageX,
                y: e.changedTouches[0].pageY
            } : {
            x: e.pageX,
            y: e.pageY
        };
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.notModifiable = /**
     * @return {?}
     */
    function () {
        if (this.widget.isFullScreen) {
            return true;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.notGrabbable = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.notModifiable()) {
            return true;
        }
        if (!e) {
            return true;
        }
        var /** @type {?} */ target = e.target || e.srcElement;
        if (!target) {
            return true;
        }
        if (target.classList.contains('not-grabbable')) {
            return true;
        }
        if (target.closest('.not-grabbable')) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.startMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.widgetMoving.emit(this);
        var /** @type {?} */ thisElement = this.elementRef.nativeElement;
        // We'll reset the style when we call endMove.
        this.initialPosition = {
            y: thisElement.style.top,
            x: thisElement.style.left
        };
        // Make the dragging widget follow the user's movement.
        var /** @type {?} */ userPosition = this.getUserPosition(e);
        this.moveStartPosition = {
            x: e.touches ?
                e.touches[0].pageX - thisElement.offsetLeft :
                e.pageX - thisElement.offsetLeft,
            y: e.touches ?
                e.touches[0].pageY - thisElement.offsetTop :
                e.pageY - thisElement.offsetTop
        };
        thisElement.style.left = (userPosition.x - this.moveStartPosition.x) + 'px';
        thisElement.style.top = (userPosition.y - this.moveStartPosition.y) + 'px';
        thisElement.classList.add('moving-widget');
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.move = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Make the widget follow the user's movement.
        var /** @type {?} */ userPosition = this.getUserPosition(e);
        this.elementRef.nativeElement.style.left = (userPosition.x - this.moveStartPosition.x) + 'px';
        this.elementRef.nativeElement.style.top = (userPosition.y - this.moveStartPosition.y) + 'px';
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.endMove = /**
     * @return {?}
     */
    function () {
        this.widgetDropped.emit();
        this.elementRef.nativeElement.classList.remove('moving-widget');
        this.elementRef.nativeElement.style.top = this.initialPosition.y;
        this.elementRef.nativeElement.style.left = this.initialPosition.x;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.getHeightInformation = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ rect = this.elementRef.nativeElement
            .getBoundingClientRect();
        return {
            height: rect.height,
            top: rect.top
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (this.notGrabbable(e)) {
            return;
        }
        this.startMove(e);
        // Make sure these observers are removed in endMove.
        this.mouseMoveSubscription =
            Observable.fromEvent(this.document, 'mousemove')
                .subscribe(function (event) {
                _this.zone.runOutsideAngular(function () {
                    _this.move(event);
                });
            });
        this.mouseUpSubscription =
            Observable.fromEvent(this.document, 'mouseup')
                .subscribe(function () {
                _this.endMove();
                if (_this.mouseMoveSubscription) {
                    _this.mouseMoveSubscription.unsubscribe();
                }
                if (_this.mouseUpSubscription) {
                    _this.mouseUpSubscription.unsubscribe();
                }
            });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetTouchStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (this.notGrabbable(e)) {
            return;
        }
        e.preventDefault();
        this.startMove(e);
        // Make sure these observers are removed in endMove.
        this.touchMoveSubscription =
            Observable.fromEvent(this.document, 'touchmove')
                .subscribe(function (event) {
                _this.zone.runOutsideAngular(function () {
                    _this.move(event);
                });
            });
        this.touchEndSubscription =
            Observable.fromEvent(this.document, 'touchend')
                .subscribe(function () {
                _this.endMove();
                if (_this.touchMoveSubscription) {
                    _this.touchMoveSubscription.unsubscribe();
                }
                if (_this.touchEndSubscription) {
                    _this.touchEndSubscription.unsubscribe();
                }
            });
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetMouseEnter = /**
     * @return {?}
     */
    function () {
        this.widgetHovered.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetTouchEnter = /**
     * @return {?}
     */
    function () {
        this.widgetHovered.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetMouseLeave = /**
     * @return {?}
     */
    function () {
        this.widgetUnhovered.emit();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetTouchLeave = /**
     * @return {?}
     */
    function () {
        this.widgetUnhovered.emit();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onResizerMouseDown = /**
     * @return {?}
     */
    function () {
        if (this.notModifiable()) {
            return true;
        }
        this.resizeStarted.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onResizerTouchStart = /**
     * @return {?}
     */
    function () {
        if (this.notModifiable()) {
            return true;
        }
        this.resizeStarted.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.close.emit(this.widget);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onToggleFullScreenClick = /**
     * @return {?}
     */
    function () {
        this.widget.toggleFullScreen();
        var /** @type {?} */ thisElement = this.elementRef.nativeElement;
        if (this.widget.isFullScreen) {
            thisElement.classList.add('fullscreen');
            // I would prefer to use document.body.scrollTop, but it is broken on
            // chome/webkit and always returns 0.
            // https://bugs.chromium.org/p/chromium/issues/detail?id=157855
            thisElement.style.top = (15 + window.scrollY) + 'px';
            thisElement.style.bottom = (15 - window.scrollY) + 'px';
            thisElement.style.left = (0 + window.scrollX) + 'px';
            thisElement.style.right = (0 - window.scrollX) + 'px';
        }
        else {
            thisElement.classList.remove('fullscreen');
            thisElement.style.top = null;
            thisElement.style.bottom = null;
            thisElement.style.left = null;
            thisElement.style.right = null;
        }
        this.fullscreen.emit();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('widget');
        var /** @type {?} */ classes = this.bootstrapService.getClasses(this.widget);
        (_a = this.elementRef.nativeElement.classList).add.apply(_a, __spread(classes));
        if (this.widget.isHidden) {
            this.elementRef.nativeElement.style.visibility = 'hidden';
        }
        var _a;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // If the widget is also Angular 2+, it's bootstrapping will cause Zone errors
        // in the console because Zone is loaded as a singleton. Fun. Run outside Angular.
        this.zone.runOutsideAngular(function () {
            var /** @type {?} */ container = _this.elementRef.nativeElement.querySelector('.container');
            _this.widget.render(container)
                .then(function () {
                // Remove the spinner.
                container.children[0].remove();
            })
                .catch(function (error) { return console.log(error); });
        });
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mouseMoveSubscription) {
            this.mouseMoveSubscription.unsubscribe();
        }
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchMoveSubscription) {
            this.touchMoveSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    };
    WidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widget',
                    template: "<div class='card card-row' (mouseenter)='onWidgetMouseEnter()' (touchenter)='onWidgetTouchEnter()' (mouseleave)='onWidgetMouseLeave()' (touchleave)='onWidgetTouchLeave()'>\n  <app-widget-controls [widget]='widget' (mousedown)='onWidgetMouseDown($event)' (touchstart)='onWidgetTouchStart($event)' (close)='onCloseClick()' (fullscreen)='onToggleFullScreenClick()'></app-widget-controls>\n  <div [ngClass]='widget.isExpanded || widget.isFullScreen ? \"maximized\" : \"minimized\"'>\n    <div class='container'>\n      <div [style.height]='widget.initialHeight'>\n        <div class='loader'>Loading...</div>\n      </div>\n    </div>\n    <div class='resizer d-none d-sm-inline' (mousedown)='onResizerMouseDown()' (touchstart)='onResizerTouchStart()'></div>\n  </div>\n</div>",
                    styles: [":host{display:block}:host>div{height:100%;margin:0}.resizer{position:absolute;width:5px;height:98%;top:2px;right:2px;cursor:ew-resize}.maximized{opacity:1;transition-property:height,opacity;transition-duration:.2s,.5s}.minimized{opacity:0;transition-property:height,opacity;transition-duration:.5s,0;height:0!important}:host.fullscreen .resizer{cursor:default}:host.fullscreen{z-index:100;max-width:100%;position:absolute}.loader{color:gray;margin:auto;font-size:45px;top:calc(50% - 45px);text-indent:-9999em;overflow:hidden;width:1em;height:1em;border-radius:50%;position:relative;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:1.7s infinite load6,1.7s infinite round;animation:1.7s infinite load6,1.7s infinite round}@-webkit-keyframes load6{0%,100%,5%,95%{box-shadow:0 -.83em 0 -.4em,0 -.83em 0 -.42em,0 -.83em 0 -.44em,0 -.83em 0 -.46em,0 -.83em 0 -.477em}10%,59%{box-shadow:0 -.83em 0 -.4em,-.087em -.825em 0 -.42em,-.173em -.812em 0 -.44em,-.256em -.789em 0 -.46em,-.297em -.775em 0 -.477em}20%{box-shadow:0 -.83em 0 -.4em,-.338em -.758em 0 -.42em,-.555em -.617em 0 -.44em,-.671em -.488em 0 -.46em,-.749em -.34em 0 -.477em}38%{box-shadow:0 -.83em 0 -.4em,-.377em -.74em 0 -.42em,-.645em -.522em 0 -.44em,-.775em -.297em 0 -.46em,-.82em -.09em 0 -.477em}}@keyframes load6{0%,100%,5%,95%{box-shadow:0 -.83em 0 -.4em,0 -.83em 0 -.42em,0 -.83em 0 -.44em,0 -.83em 0 -.46em,0 -.83em 0 -.477em}10%,59%{box-shadow:0 -.83em 0 -.4em,-.087em -.825em 0 -.42em,-.173em -.812em 0 -.44em,-.256em -.789em 0 -.46em,-.297em -.775em 0 -.477em}20%{box-shadow:0 -.83em 0 -.4em,-.338em -.758em 0 -.42em,-.555em -.617em 0 -.44em,-.671em -.488em 0 -.46em,-.749em -.34em 0 -.477em}38%{box-shadow:0 -.83em 0 -.4em,-.377em -.74em 0 -.42em,-.645em -.522em 0 -.44em,-.775em -.297em 0 -.46em,-.82em -.09em 0 -.477em}}@-webkit-keyframes round{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes round{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
                },] },
    ];
    /** @nocollapse */
    WidgetComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: ElementRef, },
        { type: NgZone, },
        { type: BootstrapService, },
    ]; };
    WidgetComponent.propDecorators = {
        "widget": [{ type: Input },],
        "widgetMoving": [{ type: Output },],
        "widgetDropped": [{ type: Output },],
        "widgetHovered": [{ type: Output },],
        "widgetUnhovered": [{ type: Output },],
        "resizeStarted": [{ type: Output },],
        "close": [{ type: Output },],
        "fullscreen": [{ type: Output },],
    };
    return WidgetComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WidgetControlsComponent = /** @class */ (function () {
    function WidgetControlsComponent(elementRef) {
        this.elementRef = elementRef;
        this.close = new EventEmitter();
        this.fullscreen = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('col-12');
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // We'll set the width of the title based on the width left by the buttons.
        // This will make the overflow on the title work properly. But we won't
        // do this until the stack is empty. Without the setTime, the first page load
        // after a Hard Reload does not calculate the offsetWidths correctly.
        setTimeout(function () {
            var /** @type {?} */ containerElement = _this.elementRef.nativeElement.children[0];
            var /** @type {?} */ controlsWidth = containerElement.offsetWidth;
            var /** @type {?} */ buttonsElement = containerElement.querySelector('.buttons');
            var /** @type {?} */ buttonsWidth = buttonsElement.offsetWidth;
            var /** @type {?} */ padding = 8;
            var /** @type {?} */ titleElement = containerElement.querySelector('.title');
            titleElement.style.width = (100 - padding - (buttonsWidth / controlsWidth * 100)) + '%';
        }, 0);
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onCollapseClick = /**
     * @return {?}
     */
    function () {
        this.widget.collapse();
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onExpandClick = /**
     * @return {?}
     */
    function () {
        this.widget.expand();
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.close.emit();
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onToggleFullScreenClick = /**
     * @return {?}
     */
    function () {
        this.fullscreen.emit();
    };
    WidgetControlsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widget-controls',
                    template: "<div>\n  <div class='title'>{{widget.title}}</div>\n  <div *ngIf='!widget.isFullScreen; else fullscreen' class='buttons no-highlighting not-grabbable'>\n    <span *ngIf='widget.isExpanded; else expand' class='material-icons' (click)='onCollapseClick()'>expand_less</span>\n    <ng-template #expand>\n      <span class='material-icons' (click)='onExpandClick()'>expand_more</span>\n    </ng-template>\n    <span class='material-icons d-none d-sm-inline' (click)='onToggleFullScreenClick()'>fullscreen</span>\n    <span class='material-icons' (click)='onCloseClick()'>close</span>\n  </div>\n  <ng-template #fullscreen>\n    <div class='material-icons buttons no-highlighting not-grabbable' (click)='onToggleFullScreenClick()'>fullscreen_exit</div>\n  </ng-template>\n</div>",
                    styles: [":host{display:block;cursor:-webkit-grab;cursor:grab;overflow:hidden;margin-bottom:15px}:host>div>.title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host>div>div:first-of-type{float:left}:host>div>div:last-of-type{float:right;cursor:default}.fullscreen :host{cursor:default}"]
                },] },
    ];
    /** @nocollapse */
    WidgetControlsComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    WidgetControlsComponent.propDecorators = {
        "widget": [{ type: Input },],
        "close": [{ type: Output },],
        "fullscreen": [{ type: Output },],
    };
    return WidgetControlsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LibraryComponent = /** @class */ (function () {
    function LibraryComponent(elementRef) {
        this.elementRef = elementRef;
        this.done = new EventEmitter();
        this.renderWidget = new EventEmitter();
        this.derenderWidget = new EventEmitter();
    }
    /**
     * @return {?}
     */
    LibraryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    LibraryComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('card', 'card-row', 'popup');
    };
    /**
     * @return {?}
     */
    LibraryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ width = this.elementRef.nativeElement
            .getBoundingClientRect()
            .width;
        this.elementRef.nativeElement.style.top = (this.library.yPosition - 20) + 'px';
        this.elementRef.nativeElement.style.left = (this.library.xPosition - width + 20) + 'px';
    };
    /**
     * @return {?}
     */
    LibraryComponent.prototype.onDoneClick = /**
     * @return {?}
     */
    function () {
        this.done.emit();
    };
    /**
     * @param {?} libraryWidget
     * @return {?}
     */
    LibraryComponent.prototype.onCheckboxChange = /**
     * @param {?} libraryWidget
     * @return {?}
     */
    function (libraryWidget) {
        if (libraryWidget.isRendered) {
            this.library.derenderWidget(libraryWidget.widget);
            this.derenderWidget.emit(libraryWidget.widget);
        }
        else {
            this.library.renderWidget(libraryWidget.widget);
            this.renderWidget.emit(libraryWidget.widget);
        }
    };
    LibraryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-library',
                    template: "<div class='title'>Library</div>\n<ul class='list-group'>\n  <li *ngFor='let libraryWidget of library.widgets' class='list-group-item'>\n    <span>{{libraryWidget.widget.title}}</span>\n    <!-- <span *ngIf='libraryWidget.isRendered; else not' class='material-icons' (click)='onRemoveWidget(libraryWidget.widget)'>remove_circle_outline</span>\n    <ng-template #not>\n      <span class='material-icons' (click)='onAddWidget(libraryWidget.widget)'>add_circle_outline</span>\n    </ng-template> -->\n    <!-- <div class='pretty p-switch p-fill'>\n      <input id='libraryWidget.widget.id' type='checkbox' [checked]='libraryWidget.isRendered' (change)='onCheckboxChange(libraryWidget)' />\n    </div> -->\n    <span class='pretty p-switch p-fill'>\n      <input type='checkbox' [checked]='libraryWidget.isRendered' (change)='onCheckboxChange(libraryWidget)' />\n      <div class='state p-success'>\n        <label></label>\n      </div>\n    </span>\n  </li>\n</ul>\n<div class='button-container'>\n  <button class='btn btn-primary' (click)='onDoneClick()'>Done</button>\n</div>",
                    styles: [":host{position:absolute;z-index:100;background:#fff}ul{list-style:none;padding:0;margin-bottom:20px}ul>li{overflow:hidden;text-overflow:ellipsis}ul>li>span:first-of-type{float:left;margin-right:30px}ul>li>span:last-of-type{float:right;margin-top:5px}label:after{margin-top:-1px}.pretty input{width:200%}"]
                },] },
    ];
    /** @nocollapse */
    LibraryComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    LibraryComponent.propDecorators = {
        "library": [{ type: Input },],
        "done": [{ type: Output },],
        "renderWidget": [{ type: Output },],
        "derenderWidget": [{ type: Output },],
    };
    return LibraryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DropTargetComponent = /** @class */ (function () {
    function DropTargetComponent(elementRef, bootstrapService) {
        this.elementRef = elementRef;
        this.bootstrapService = bootstrapService;
    }
    /**
     * @return {?}
     */
    DropTargetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DropTargetComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.height = this.height + 'px';
        var /** @type {?} */ classes = this.bootstrapService.getClasses(this.dropTarget);
        (_a = this.elementRef.nativeElement.classList).add.apply(_a, __spread(classes));
        var _a;
    };
    DropTargetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widget-drop-target',
                    template: "<div class='card card-row'></div>",
                    styles: [":host>div{background:#d3d3d3;height:100%;margin:0}"]
                },] },
    ];
    /** @nocollapse */
    DropTargetComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: BootstrapService, },
    ]; };
    DropTargetComponent.propDecorators = {
        "dropTarget": [{ type: Input },],
        "height": [{ type: Input },],
    };
    return DropTargetComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ResizeGuidelineComponent = /** @class */ (function () {
    function ResizeGuidelineComponent(elementRef, bootstrapService) {
        this.elementRef = elementRef;
        this.bootstrapService = bootstrapService;
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ResizeGuidelineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ResizeGuidelineComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ thisElement = this.elementRef.nativeElement;
        thisElement.classList.add(this.bootstrapService.columnPrefix + this.guideline.widthOfGuideline);
        thisElement.style.top = (this.guideline.top + window.scrollY) + 'px';
        thisElement.style.height = this.guideline.height + 'px';
    };
    /**
     * @return {?}
     */
    ResizeGuidelineComponent.prototype.onHover = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ widget = this.guideline.widget;
        if (this.guideline.targetWidthOfWidget !== this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget))) {
            this.bootstrapService.resize(this.guideline.widget, this.guideline.targetWidthOfWidget);
            this.resized.emit(this.guideline.widget);
        }
    };
    ResizeGuidelineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widget-resize-guideline',
                    template: "<div (mouseenter)='onHover()' (touchenter)='onHover()'></div>",
                    styles: [":host{position:absolute}:host>div{border-right:1px dotted green;height:100%}"]
                },] },
    ];
    /** @nocollapse */
    ResizeGuidelineComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: BootstrapService, },
    ]; };
    ResizeGuidelineComponent.propDecorators = {
        "guideline": [{ type: Input },],
        "resized": [{ type: Output },],
    };
    return ResizeGuidelineComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LayoutEditorComponent = /** @class */ (function () {
    function LayoutEditorComponent(elementRef) {
        this.elementRef = elementRef;
        this.done = new EventEmitter();
    }
    /**
     * @return {?}
     */
    LayoutEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    LayoutEditorComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('card', 'card-row', 'col-8', 'col-sm-6', 'popup');
    };
    /**
     * @return {?}
     */
    LayoutEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ width = this.elementRef.nativeElement
            .getBoundingClientRect()
            .width;
        this.elementRef.nativeElement.style.top = (this.layoutEditor.yPosition - 20) + 'px';
        this.elementRef.nativeElement.style.left = (this.layoutEditor.xPosition - width + 20) + 'px';
    };
    /**
     * @return {?}
     */
    LayoutEditorComponent.prototype.onDoneClick = /**
     * @return {?}
     */
    function () {
        this.done.emit();
    };
    LayoutEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-layout-editor',
                    template: "<div class='title'>Layout Editor</div>\n<p>\n  <b>Coming Soon!</b>\n</p>\n<p>\n  This will allow some users to edit pages and make custom layouts targeted for specific roles in your organization.\n</p>\n<p>\n  For now, changes made will not be saved.\n</p>\n<div class='button-container'>\n  <button class='btn btn-primary' (click)='onDoneClick()'>Done</button>\n</div>",
                    styles: [":host{position:absolute;z-index:100;background:#fff}"]
                },] },
    ];
    /** @nocollapse */
    LayoutEditorComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    LayoutEditorComponent.propDecorators = {
        "layoutEditor": [{ type: Input },],
        "done": [{ type: Output },],
    };
    return LayoutEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DashboardModule = /** @class */ (function () {
    function DashboardModule() {
    }
    /**
     * @param {?} WidgetsService
     * @return {?}
     */
    DashboardModule.forRoot = /**
     * @param {?} WidgetsService
     * @return {?}
     */
    function (WidgetsService) {
        return {
            ngModule: DashboardModule,
            providers: [
                { provide: 'widgetsService', useClass: WidgetsService }
            ]
        };
    };
    DashboardModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DashboardComponent,
                        PanelComponent,
                        SpacerComponent,
                        PanelControlsComponent,
                        WidgetComponent,
                        WidgetControlsComponent,
                        LibraryComponent,
                        DropTargetComponent,
                        ResizeGuidelineComponent,
                        LayoutEditorComponent
                    ],
                    imports: [BrowserModule],
                    exports: [
                        DashboardComponent,
                        PanelComponent,
                        SpacerComponent,
                        PanelControlsComponent,
                        WidgetComponent,
                        WidgetControlsComponent,
                        LibraryComponent,
                        DropTargetComponent,
                        ResizeGuidelineComponent,
                        LayoutEditorComponent
                    ],
                    providers: [BootstrapService],
                    bootstrap: [DashboardComponent]
                },] },
    ];
    return DashboardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { DashboardModule, Widget, DashboardComponent as ɵa, BootstrapService as ɵc, DropTargetComponent as ɵi, LayoutEditorComponent as ɵk, LibraryComponent as ɵh, PanelControlsComponent as ɵe, PanelComponent as ɵb, ResizeGuidelineComponent as ɵj, SpacerComponent as ɵd, WidgetControlsComponent as ɵg, WidgetComponent as ɵf };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,