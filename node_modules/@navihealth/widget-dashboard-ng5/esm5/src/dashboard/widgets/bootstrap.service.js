/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
var BootstrapService = /** @class */ (function () {
    function BootstrapService() {
        this.maxColumns = 12;
        this.columnPrefix = 'col-';
        this.breakpoints = {
            xl: 'd-xl-none',
            lg: 'd-lg-none',
            md: 'd-md-none',
            sm: 'd-sm-none',
            xs: 'd-none'
        };
    }
    /**
     * @return {?}
     */
    BootstrapService.prototype.getCurrentBreakpoint = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ breakpoint = '';
        var /** @type {?} */ marker = document.createElement('div');
        marker.style.visibility = 'hidden';
        document.body.appendChild(marker);
        var /** @type {?} */ breakpointKeys = Object.keys(this.breakpoints);
        for (var /** @type {?} */ i = 0; i < breakpointKeys.length; i++) {
            breakpoint = breakpointKeys[i];
            marker.classList.add(this.breakpoints[breakpoint]);
            var /** @type {?} */ style = window.getComputedStyle(marker);
            if (style.display === 'none') {
                break;
            }
        }
        marker.remove();
        return breakpoint;
    };
    /**
     * @return {?}
     */
    BootstrapService.prototype.hasBreakpointChanged = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        if (breakpoint !== this.currentBreakpoint) {
            this.currentBreakpoint = breakpoint;
            return true;
        }
        return false;
    };
    /**
     * @param {?} getWidth
     * @return {?}
     */
    BootstrapService.prototype.getWidth = /**
     * @param {?} getWidth
     * @return {?}
     */
    function (getWidth) {
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        var /** @type {?} */ width = getWidth(breakpoint);
        if (!width) {
            // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
            var /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
            while (!width && smallerBreakpoints.length) {
                breakpoint = smallerBreakpoints.shift();
                width = getWidth(breakpoint);
            }
        }
        return width;
    };
    /**
     * @param {?} makeFullWidth
     * @return {?}
     */
    BootstrapService.prototype.makeFullWidth = /**
     * @param {?} makeFullWidth
     * @return {?}
     */
    function (makeFullWidth) {
        var _this = this;
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        // Make each breakpoint at the current size and smaller the full width of a row.
        this.getSmallerBreakpoints(breakpoint)
            .concat([breakpoint])
            .forEach(function (x) {
            makeFullWidth(x, _this.maxColumns);
        });
    };
    /**
     * @param {?} widget
     * @param {?} targetWidthOfWidget
     * @return {?}
     */
    BootstrapService.prototype.resize = /**
     * @param {?} widget
     * @param {?} targetWidthOfWidget
     * @return {?}
     */
    function (widget, targetWidthOfWidget) {
        var /** @type {?} */ breakpoint = this.getCurrentBreakpoint();
        var /** @type {?} */ width = widget.getCurrentWidth(breakpoint);
        if (!width) {
            // Look for the largest breakpoint with a width that is smaller than the current breakpoint.
            var /** @type {?} */ smallerBreakpoints = this.getSmallerBreakpoints(breakpoint);
            while (!width && smallerBreakpoints.length) {
                breakpoint = smallerBreakpoints.shift();
                width = widget.getCurrentWidth(breakpoint);
            }
        }
        widget.resize(breakpoint, targetWidthOfWidget);
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    BootstrapService.prototype.getClasses = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var /** @type {?} */ widths = widget.getCurrentWidths();
        return Object.keys(widths)
            .map(function (x) {
            var /** @type {?} */ width = widths[x];
            if (x === 'xs') {
                return 'col-' + width;
            }
            return 'col-' + x + '-' + width;
        });
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    BootstrapService.prototype.getSmallerBreakpoints = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        var /** @type {?} */ allBreakpoints = Object.keys(this.breakpoints);
        var /** @type {?} */ smallerBreakpoints = allBreakpoints.slice(allBreakpoints.indexOf(breakpoint) + 1, allBreakpoints.length);
        return smallerBreakpoints;
    };
    BootstrapService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BootstrapService.ctorParameters = function () { return []; };
    return BootstrapService;
}());
export { BootstrapService };
function BootstrapService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    BootstrapService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    BootstrapService.ctorParameters;
    /** @type {?} */
    BootstrapService.prototype.maxColumns;
    /** @type {?} */
    BootstrapService.prototype.columnPrefix;
    /** @type {?} */
    BootstrapService.prototype.breakpoints;
    /** @type {?} */
    BootstrapService.prototype.currentBreakpoint;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS8iLCJzb3VyY2VzIjpbInNyYy9kYXNoYm9hcmQvd2lkZ2V0cy9ib290c3RyYXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFrQnpDOzBCQWJzQixFQUFFOzRCQUNBLE1BQU07MkJBR0M7WUFDN0IsRUFBRSxFQUFFLFdBQVc7WUFDZixFQUFFLEVBQUUsV0FBVztZQUNmLEVBQUUsRUFBRSxXQUFXO1lBQ2YsRUFBRSxFQUFFLFdBQVc7WUFDZixFQUFFLEVBQUUsUUFBUTtTQUNiO0tBR2dCOzs7O0lBS1QsK0NBQW9COzs7O1FBQzFCLHFCQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFcEIscUJBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQ25DLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLHFCQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVyRCxHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDL0MsVUFBVSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbkQscUJBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxN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Q0FBQztnQkFDZixNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUN2QjtZQUNELE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDakMsQ0FBQyxDQUFDO0tBQ047Ozs7O0lBRU8sZ0RBQXFCOzs7O2NBQUMsVUFBVTtRQUN0QyxxQkFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDckQscUJBQU0sa0JBQWtCLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FDN0MsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQ3RDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsa0JBQWtCLENBQUM7OztnQkF6RzdCLFVBQVU7Ozs7MkJBSFg7O1NBSWEsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBXaWRnZXQgfSBmcm9tICcuL3dpZGdldC5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCb290c3RyYXBTZXJ2aWNlIHtcclxuICByZWFkb25seSBtYXhDb2x1bW5zID0gMTI7XHJcbiAgcmVhZG9ubHkgY29sdW1uUHJlZml4ID0gJ2NvbC0nO1xyXG5cclxuICAvLyBUaGVzZSBtdXN0IHJlbWFpbiBpbiBvcmRlciBmcm9tIGxhcmdlc3QgdG8gc21hbGxlc3QuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBicmVha3BvaW50cyA9IHtcclxuICAgIHhsOiAnZC14bC1ub25lJyxcclxuICAgIGxnOiAnZC1sZy1ub25lJyxcclxuICAgIG1kOiAnZC1tZC1ub25lJyxcclxuICAgIHNtOiAnZC1zbS1ub25lJyxcclxuICAgIHhzOiAnZC1ub25lJ1xyXG4gIH07XHJcbiAgcHJpdmF0ZSBjdXJyZW50QnJlYWtwb2ludDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAvLyBBZGQgYW4gZWxlbWVudCB0byB0aGUgRE9NIGFuZCBzZXQgaXQncyBjbGFzcyB0byBwcmV2ZW50IGl0IGZyb20gZGlzcGxheWluZ1xyXG4gIC8vIGF0IGVhY2ggYnJlYWtwb2ludCB1bnRpbCBpdCBpcywgaW4gZmFjdCwgbm90IGRpc3BsYXllZC4gVGhhdCBpcyB0aGUgc2l6ZSBvZlxyXG4gIC8vIHRoZSBzY3JlZW4uXHJcbiAgcHJpdmF0ZSBnZXRDdXJyZW50QnJlYWtwb2ludCgpOiBzdHJpbmcge1xyXG4gICAgbGV0IGJyZWFrcG9pbnQgPSAnJztcclxuXHJcbiAgICBjb25zdCBtYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG1hcmtlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1hcmtlcik7XHJcbiAgICBjb25zdCBicmVha3BvaW50S2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuYnJlYWtwb2ludHMpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnJlYWtwb2ludEtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnRLZXlzW2ldO1xyXG4gICAgICBtYXJrZXIuY2xhc3NMaXN0LmFkZCh0aGlzLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKTtcclxuICAgICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShtYXJrZXIpO1xyXG4gICAgICBpZiAoc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtYXJrZXIucmVtb3ZlKCk7XHJcbiAgICByZXR1cm4gYnJlYWtwb2ludDtcclxuICB9XHJcblxyXG4gIGhhc0JyZWFrcG9pbnRDaGFuZ2VkKCkge1xyXG4gICAgY29uc3QgYnJlYWtwb2ludDogc3RyaW5nID0gdGhpcy5nZXRDdXJyZW50QnJlYWtwb2ludCgpO1xyXG4gICAgaWYgKGJyZWFrcG9pbnQgIT09IHRoaXMuY3VycmVudEJyZWFrcG9pbnQpIHtcclxuICAgICAgdGhpcy5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0V2lkdGgoZ2V0V2lkdGg6IChzdHJpbmcpID0+IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgYnJlYWtwb2ludCA9IHRoaXMuZ2V0Q3VycmVudEJyZWFrcG9pbnQoKTtcclxuICAgIGxldCB3aWR0aCA9IGdldFdpZHRoKGJyZWFrcG9pbnQpO1xyXG4gICAgaWYgKCF3aWR0aCkge1xyXG4gICAgICAvLyBMb29rIGZvciB0aGUgbGFyZ2VzdCBicmVha3BvaW50IHdpdGggYSB3aWR0aCB0aGF0IGlzIHNtYWxsZXIgdGhhbiB0aGUgY3VycmVudCBicmVha3BvaW50LlxyXG4gICAgICBjb25zdCBzbWFsbGVyQnJlYWtwb2ludHMgPSB0aGlzLmdldFNtYWxsZXJCcmVha3BvaW50cyhicmVha3BvaW50KTtcclxuICAgICAgd2hpbGUgKCF3aWR0aCAmJiBzbWFsbGVyQnJlYWtwb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgICAgYnJlYWtwb2ludCA9IHNtYWxsZXJCcmVha3BvaW50cy5zaGlmdCgpO1xyXG4gICAgICAgIHdpZHRoID0gZ2V0V2lkdGgoYnJlYWtwb2ludCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB3aWR0aDtcclxuICB9XHJcblxyXG4gIG1ha2VGdWxsV2lkdGgobWFrZUZ1bGxXaWR0aDogKHN0cmluZywgbnVtYmVyKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICBjb25zdCBicmVha3BvaW50ID0gdGhpcy5nZXRDdXJyZW50QnJlYWtwb2ludCgpO1xyXG4gICAgLy8gTWFrZSBlYWNoIGJyZWFrcG9pbnQgYXQgdGhlIGN1cnJlbnQgc2l6ZSBhbmQgc21hbGxlciB0aGUgZnVsbCB3aWR0aCBvZiBhIHJvdy5cclxuICAgIHRoaXMuZ2V0U21hbGxlckJyZWFrcG9pbnRzKGJyZWFrcG9pbnQpXHJcbiAgICAgIC5jb25jYXQoW2JyZWFrcG9pbnRdKVxyXG4gICAgICAuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICBtYWtlRnVsbFdpZHRoKHgsIHRoaXMubWF4Q29sdW1ucyk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVzaXplKHdpZGdldDogV2lkZ2V0LCB0YXJnZXRXaWR0aE9mV2lkZ2V0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGxldCBicmVha3BvaW50ID0gdGhpcy5nZXRDdXJyZW50QnJlYWtwb2ludCgpO1xyXG4gICAgbGV0IHdpZHRoID0gd2lkZ2V0LmdldEN1cnJlbnRXaWR0aChicmVha3BvaW50KTtcclxuICAgIGlmICghd2lkdGgpIHtcclxuICAgICAgLy8gTG9vayBmb3IgdGhlIGxhcmdlc3QgYnJlYWtwb2ludCB3aXRoIGEgd2lkdGggdGhhdCBpcyBzbWFsbGVyIHRoYW4gdGhlIGN1cnJlbnQgYnJlYWtwb2ludC5cclxuICAgICAgY29uc3Qgc21hbGxlckJyZWFrcG9pbnRzID0gdGhpcy5nZXRTbWFsbGVyQnJlYWtwb2ludHMoYnJlYWtwb2ludCk7XHJcbiAgICAgIHdoaWxlICghd2lkdGggJiYgc21hbGxlckJyZWFrcG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGJyZWFrcG9pbnQgPSBzbWFsbGVyQnJlYWtwb2ludHMuc2hpZnQoKTtcclxuICAgICAgICB3aWR0aCA9IHdpZGdldC5nZXRDdXJyZW50V2lkdGgoYnJlYWtwb2ludCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdpZGdldC5yZXNpemUoYnJlYWtwb2ludCwgdGFyZ2V0V2lkdGhPZldpZGdldCk7XHJcbiAgfVxyXG5cclxuICBnZXRDbGFzc2VzKHdpZGdldDogV2lkZ2V0KTogc3RyaW5nW10ge1xyXG4gICAgY29uc3Qgd2lkdGhzID0gd2lkZ2V0LmdldEN1cnJlbnRXaWR0aHMoKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyh3aWR0aHMpXHJcbiAgICAgIC5tYXAoeCA9PiB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSB3aWR0aHNbeF07XHJcbiAgICAgICAgaWYgKHggPT09ICd4cycpIHtcclxuICAgICAgICAgIHJldHVybiAnY29sLScgKyB3aWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICdjb2wtJyArIHggKyAnLScgKyB3aWR0aDtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFNtYWxsZXJCcmVha3BvaW50cyhicmVha3BvaW50KTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgYWxsQnJlYWtwb2ludHMgPSBPYmplY3Qua2V5cyh0aGlzLmJyZWFrcG9pbnRzKTtcclxuICAgIGNvbnN0IHNtYWxsZXJCcmVha3BvaW50cyA9IGFsbEJyZWFrcG9pbnRzLnNsaWNlKFxyXG4gICAgICBhbGxCcmVha3BvaW50cy5pbmRleE9mKGJyZWFrcG9pbnQpICsgMSxcclxuICAgICAgYWxsQnJlYWtwb2ludHMubGVuZ3RoKTtcclxuICAgIHJldHVybiBzbWFsbGVyQnJlYWtwb2ludHM7XHJcbiAgfVxyXG59XHJcbiJdfQ==