/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, ElementRef, EventEmitter, Inject, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Widget } from '../widget.model';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromEvent';
import { BootstrapService } from '../bootstrap.service';
/**
 * @record
 */
function ICoordinates() { }
function ICoordinates_tsickle_Closure_declarations() {
    /** @type {?} */
    ICoordinates.prototype.x;
    /** @type {?} */
    ICoordinates.prototype.y;
}
var WidgetComponent = /** @class */ (function () {
    function WidgetComponent(document, elementRef, zone, bootstrapService) {
        this.document = document;
        this.elementRef = elementRef;
        this.zone = zone;
        this.bootstrapService = bootstrapService;
        this.widgetMoving = new EventEmitter();
        this.widgetDropped = new EventEmitter();
        this.widgetHovered = new EventEmitter();
        this.widgetUnhovered = new EventEmitter();
        this.resizeStarted = new EventEmitter();
        this.close = new EventEmitter();
        this.fullscreen = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.getUserPosition = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return e.changedTouches ?
            {
                x: e.changedTouches[0].pageX,
                y: e.changedTouches[0].pageY
            } : {
            x: e.pageX,
            y: e.pageY
        };
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.notModifiable = /**
     * @return {?}
     */
    function () {
        if (this.widget.isFullScreen) {
            return true;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.notGrabbable = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.notModifiable()) {
            return true;
        }
        if (!e) {
            return true;
        }
        var /** @type {?} */ target = e.target || e.srcElement;
        if (!target) {
            return true;
        }
        if (target.classList.contains('not-grabbable')) {
            return true;
        }
        if (target.closest('.not-grabbable')) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.startMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.widgetMoving.emit(this);
        var /** @type {?} */ thisElement = this.elementRef.nativeElement;
        // We'll reset the style when we call endMove.
        this.initialPosition = {
            y: thisElement.style.top,
            x: thisElement.style.left
        };
        // Make the dragging widget follow the user's movement.
        var /** @type {?} */ userPosition = this.getUserPosition(e);
        this.moveStartPosition = {
            x: e.touches ?
                e.touches[0].pageX - thisElement.offsetLeft :
                e.pageX - thisElement.offsetLeft,
            y: e.touches ?
                e.touches[0].pageY - thisElement.offsetTop :
                e.pageY - thisElement.offsetTop
        };
        thisElement.style.left = (userPosition.x - this.moveStartPosition.x) + 'px';
        thisElement.style.top = (userPosition.y - this.moveStartPosition.y) + 'px';
        thisElement.classList.add('moving-widget');
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.move = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Make the widget follow the user's movement.
        var /** @type {?} */ userPosition = this.getUserPosition(e);
        this.elementRef.nativeElement.style.left = (userPosition.x - this.moveStartPosition.x) + 'px';
        this.elementRef.nativeElement.style.top = (userPosition.y - this.moveStartPosition.y) + 'px';
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.endMove = /**
     * @return {?}
     */
    function () {
        this.widgetDropped.emit();
        this.elementRef.nativeElement.classList.remove('moving-widget');
        this.elementRef.nativeElement.style.top = this.initialPosition.y;
        this.elementRef.nativeElement.style.left = this.initialPosition.x;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.getHeightInformation = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ rect = this.elementRef.nativeElement
            .getBoundingClientRect();
        return {
            height: rect.height,
            top: rect.top
        };
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (this.notGrabbable(e)) {
            return;
        }
        this.startMove(e);
        // Make sure these observers are removed in endMove.
        this.mouseMoveSubscription =
            Observable.fromEvent(this.document, 'mousemove')
                .subscribe(function (event) {
                _this.zone.runOutsideAngular(function () {
                    _this.move(event);
                });
            });
        this.mouseUpSubscription =
            Observable.fromEvent(this.document, 'mouseup')
                .subscribe(function () {
                _this.endMove();
                if (_this.mouseMoveSubscription) {
                    _this.mouseMoveSubscription.unsubscribe();
                }
                if (_this.mouseUpSubscription) {
                    _this.mouseUpSubscription.unsubscribe();
                }
            });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetTouchStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (this.notGrabbable(e)) {
            return;
        }
        e.preventDefault();
        this.startMove(e);
        // Make sure these observers are removed in endMove.
        this.touchMoveSubscription =
            Observable.fromEvent(this.document, 'touchmove')
                .subscribe(function (event) {
                _this.zone.runOutsideAngular(function () {
                    _this.move(event);
                });
            });
        this.touchEndSubscription =
            Observable.fromEvent(this.document, 'touchend')
                .subscribe(function () {
                _this.endMove();
                if (_this.touchMoveSubscription) {
                    _this.touchMoveSubscription.unsubscribe();
                }
                if (_this.touchEndSubscription) {
                    _this.touchEndSubscription.unsubscribe();
                }
            });
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetMouseEnter = /**
     * @return {?}
     */
    function () {
        this.widgetHovered.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetTouchEnter = /**
     * @return {?}
     */
    function () {
        this.widgetHovered.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetMouseLeave = /**
     * @return {?}
     */
    function () {
        this.widgetUnhovered.emit();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onWidgetTouchLeave = /**
     * @return {?}
     */
    function () {
        this.widgetUnhovered.emit();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onResizerMouseDown = /**
     * @return {?}
     */
    function () {
        if (this.notModifiable()) {
            return true;
        }
        this.resizeStarted.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onResizerTouchStart = /**
     * @return {?}
     */
    function () {
        if (this.notModifiable()) {
            return true;
        }
        this.resizeStarted.emit(this);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.close.emit(this.widget);
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.onToggleFullScreenClick = /**
     * @return {?}
     */
    function () {
        this.widget.toggleFullScreen();
        var /** @type {?} */ thisElement = this.elementRef.nativeElement;
        if (this.widget.isFullScreen) {
            thisElement.classList.add('fullscreen');
            // I would prefer to use document.body.scrollTop, but it is broken on
            // chome/webkit and always returns 0.
            // https://bugs.chromium.org/p/chromium/issues/detail?id=157855
            thisElement.style.top = (15 + window.scrollY) + 'px';
            thisElement.style.bottom = (15 - window.scrollY) + 'px';
            thisElement.style.left = (0 + window.scrollX) + 'px';
            thisElement.style.right = (0 - window.scrollX) + 'px';
        }
        else {
            thisElement.classList.remove('fullscreen');
            thisElement.style.top = null;
            thisElement.style.bottom = null;
            thisElement.style.left = null;
            thisElement.style.right = null;
        }
        this.fullscreen.emit();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('widget');
        var /** @type {?} */ classes = this.bootstrapService.getClasses(this.widget);
        (_a = this.elementRef.nativeElement.classList).add.apply(_a, tslib_1.__spread(classes));
        if (this.widget.isHidden) {
            this.elementRef.nativeElement.style.visibility = 'hidden';
        }
        var _a;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // If the widget is also Angular 2+, it's bootstrapping will cause Zone errors
        // in the console because Zone is loaded as a singleton. Fun. Run outside Angular.
        this.zone.runOutsideAngular(function () {
            var /** @type {?} */ container = _this.elementRef.nativeElement.querySelector('.container');
            _this.widget.render(container)
                .then(function () {
                // Remove the spinner.
                container.children[0].remove();
            })
                .catch(function (error) { return console.log(error); });
        });
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mouseMoveSubscription) {
            this.mouseMoveSubscription.unsubscribe();
        }
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchMoveSubscription) {
            this.touchMoveSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    };
    WidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widget',
                    template: "<div class='card card-row' (mouseenter)='onWidgetMouseEnter()' (touchenter)='onWidgetTouchEnter()' (mouseleave)='onWidgetMouseLeave()' (touchleave)='onWidgetTouchLeave()'>\n  <app-widget-controls [widget]='widget' (mousedown)='onWidgetMouseDown($event)' (touchstart)='onWidgetTouchStart($event)' (close)='onCloseClick()' (fullscreen)='onToggleFullScreenClick()'></app-widget-controls>\n  <div [ngClass]='widget.isExpanded || widget.isFullScreen ? \"maximized\" : \"minimized\"'>\n    <div class='container'>\n      <div [style.height]='widget.initialHeight'>\n        <div class='loader'>Loading...</div>\n      </div>\n    </div>\n    <div class='resizer d-none d-sm-inline' (mousedown)='onResizerMouseDown()' (touchstart)='onResizerTouchStart()'></div>\n  </div>\n</div>",
                    styles: [":host{display:block}:host>div{height:100%;margin:0}.resizer{position:absolute;width:5px;height:98%;top:2px;right:2px;cursor:ew-resize}.maximized{opacity:1;transition-property:height,opacity;transition-duration:.2s,.5s}.minimized{opacity:0;transition-property:height,opacity;transition-duration:.5s,0;height:0!important}:host.fullscreen .resizer{cursor:default}:host.fullscreen{z-index:100;max-width:100%;position:absolute}.loader{color:gray;margin:auto;font-size:45px;top:calc(50% - 45px);text-indent:-9999em;overflow:hidden;width:1em;height:1em;border-radius:50%;position:relative;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:1.7s infinite load6,1.7s infinite round;animation:1.7s infinite load6,1.7s infinite round}@-webkit-keyframes load6{0%,100%,5%,95%{box-shadow:0 -.83em 0 -.4em,0 -.83em 0 -.42em,0 -.83em 0 -.44em,0 -.83em 0 -.46em,0 -.83em 0 -.477em}10%,59%{box-shadow:0 -.83em 0 -.4em,-.087em -.825em 0 -.42em,-.173em -.812em 0 -.44em,-.256em -.789em 0 -.46em,-.297em -.775em 0 -.477em}20%{box-shadow:0 -.83em 0 -.4em,-.338em -.758em 0 -.42em,-.555em -.617em 0 -.44em,-.671em -.488em 0 -.46em,-.749em -.34em 0 -.477em}38%{box-shadow:0 -.83em 0 -.4em,-.377em -.74em 0 -.42em,-.645em -.522em 0 -.44em,-.775em -.297em 0 -.46em,-.82em -.09em 0 -.477em}}@keyframes load6{0%,100%,5%,95%{box-shadow:0 -.83em 0 -.4em,0 -.83em 0 -.42em,0 -.83em 0 -.44em,0 -.83em 0 -.46em,0 -.83em 0 -.477em}10%,59%{box-shadow:0 -.83em 0 -.4em,-.087em -.825em 0 -.42em,-.173em -.812em 0 -.44em,-.256em -.789em 0 -.46em,-.297em -.775em 0 -.477em}20%{box-shadow:0 -.83em 0 -.4em,-.338em -.758em 0 -.42em,-.555em -.617em 0 -.44em,-.671em -.488em 0 -.46em,-.749em -.34em 0 -.477em}38%{box-shadow:0 -.83em 0 -.4em,-.377em -.74em 0 -.42em,-.645em -.522em 0 -.44em,-.775em -.297em 0 -.46em,-.82em -.09em 0 -.477em}}@-webkit-keyframes round{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes round{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"]
                },] },
    ];
    /** @nocollapse */
    WidgetComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: ElementRef, },
        { type: NgZone, },
        { type: BootstrapService, },
    ]; };
    WidgetComponent.propDecorators = {
        "widget": [{ type: Input },],
        "widgetMoving": [{ type: Output },],
        "widgetDropped": [{ type: Output },],
        "widgetHovered": [{ type: Output },],
        "widgetUnhovered": [{ type: Output },],
        "resizeStarted": [{ type: Output },],
        "close": [{ type: Output },],
        "fullscreen": [{ type: Output },],
    };
    return WidgetComponent;
}());
export { WidgetComponent };
function WidgetComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    WidgetComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    WidgetComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    WidgetComponent.propDecorators;
    /** @type {?} */
    WidgetComponent.prototype.widget;
    /** @type {?} */
    WidgetComponent.prototype.widgetMoving;
    /** @type {?} */
    WidgetComponent.prototype.widgetDropped;
    /** @type {?} */
    WidgetComponent.prototype.widgetHovered;
    /** @type {?} */
    WidgetComponent.prototype.widgetUnhovered;
    /** @type {?} */
    WidgetComponent.prototype.resizeStarted;
    /** @type {?} */
    WidgetComponent.prototype.close;
    /** @type {?} */
    WidgetComponent.prototype.fullscreen;
    /** @type {?} */
    WidgetComponent.prototype.mouseMoveSubscription;
    /** @type {?} */
    WidgetComponent.prototype.mouseUpSubscription;
    /** @type {?} */
    WidgetComponent.prototype.touchMoveSubscription;
    /** @type {?} */
    WidgetComponent.prototype.touchEndSubscription;
    /** @type {?} */
    WidgetComponent.prototype.moveStartPosition;
    /** @type {?} */
    WidgetComponent.prototype.initialPosition;
    /** @type {?} */
    WidgetComponent.prototype.document;
    /** @type {?} */
    WidgetComponent.prototype.elementRef;
    /** @type {?} */
    WidgetComponent.prototype.zone;
    /** @type {?} */
    WidgetComponent.prototype.bootstrapService;
}

//# sourceMappingURL=data:application/json;base64,