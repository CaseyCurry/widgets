/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ElementRef, EventEmitter } from '@angular/core';
import { Library } from '../library.model';
var LibraryComponent = /** @class */ (function () {
    function LibraryComponent(elementRef) {
        this.elementRef = elementRef;
        this.done = new EventEmitter();
        this.renderWidget = new EventEmitter();
        this.derenderWidget = new EventEmitter();
    }
    /**
     * @return {?}
     */
    LibraryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    LibraryComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('card', 'card-row', 'popup');
    };
    /**
     * @return {?}
     */
    LibraryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ width = this.elementRef.nativeElement
            .getBoundingClientRect()
            .width;
        this.elementRef.nativeElement.style.top = (this.library.yPosition - 20) + 'px';
        this.elementRef.nativeElement.style.left = (this.library.xPosition - width + 20) + 'px';
    };
    /**
     * @return {?}
     */
    LibraryComponent.prototype.onDoneClick = /**
     * @return {?}
     */
    function () {
        this.done.emit();
    };
    /**
     * @param {?} libraryWidget
     * @return {?}
     */
    LibraryComponent.prototype.onCheckboxChange = /**
     * @param {?} libraryWidget
     * @return {?}
     */
    function (libraryWidget) {
        if (libraryWidget.isRendered) {
            this.library.derenderWidget(libraryWidget.widget);
            this.derenderWidget.emit(libraryWidget.widget);
        }
        else {
            this.library.renderWidget(libraryWidget.widget);
            this.renderWidget.emit(libraryWidget.widget);
        }
    };
    LibraryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-library',
                    template: "<div class='title'>Library</div>\n<ul class='list-group'>\n  <li *ngFor='let libraryWidget of library.widgets' class='list-group-item'>\n    <span>{{libraryWidget.widget.title}}</span>\n    <!-- <span *ngIf='libraryWidget.isRendered; else not' class='material-icons' (click)='onRemoveWidget(libraryWidget.widget)'>remove_circle_outline</span>\n    <ng-template #not>\n      <span class='material-icons' (click)='onAddWidget(libraryWidget.widget)'>add_circle_outline</span>\n    </ng-template> -->\n    <!-- <div class='pretty p-switch p-fill'>\n      <input id='libraryWidget.widget.id' type='checkbox' [checked]='libraryWidget.isRendered' (change)='onCheckboxChange(libraryWidget)' />\n    </div> -->\n    <span class='pretty p-switch p-fill'>\n      <input type='checkbox' [checked]='libraryWidget.isRendered' (change)='onCheckboxChange(libraryWidget)' />\n      <div class='state p-success'>\n        <label></label>\n      </div>\n    </span>\n  </li>\n</ul>\n<div class='button-container'>\n  <button class='btn btn-primary' (click)='onDoneClick()'>Done</button>\n</div>",
                    styles: [":host{position:absolute;z-index:100;background:#fff}ul{list-style:none;padding:0;margin-bottom:20px}ul>li{overflow:hidden;text-overflow:ellipsis}ul>li>span:first-of-type{float:left;margin-right:30px}ul>li>span:last-of-type{float:right;margin-top:5px}label:after{margin-top:-1px}.pretty input{width:200%}"]
                },] },
    ];
    /** @nocollapse */
    LibraryComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    LibraryComponent.propDecorators = {
        "library": [{ type: Input },],
        "done": [{ type: Output },],
        "renderWidget": [{ type: Output },],
        "derenderWidget": [{ type: Output },],
    };
    return LibraryComponent;
}());
export { LibraryComponent };
function LibraryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    LibraryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    LibraryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    LibraryComponent.propDecorators;
    /** @type {?} */
    LibraryComponent.prototype.library;
    /** @type {?} */
    LibraryComponent.prototype.done;
    /** @type {?} */
    LibraryComponent.prototype.renderWidget;
    /** @type {?} */
    LibraryComponent.prototype.derenderWidget;
    /** @type {?} */
    LibraryComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmF2aWhlYWx0aC93aWRnZXQtZGFzaGJvYXJkLW5nNS8iLCJzb3VyY2VzIjpbInNyYy9kYXNoYm9hcmQvd2lkZ2V0cy9saWJyYXJ5L2xpYnJhcnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBbUMsTUFBTSxlQUFlLENBQUM7QUFDNUgsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDOztJQW1DekMsMEJBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7b0JBSnpCLElBQUksWUFBWSxFQUFROzRCQUNoQixJQUFJLFlBQVksRUFBVTs4QkFDeEIsSUFBSSxZQUFZLEVBQVU7S0FFTjs7OztJQUUvQyxtQ0FBUTs7O0lBQVIsZUFBYzs7OztJQUVkLDZDQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzFFOzs7O0lBRUQsMENBQWU7OztJQUFmO1FBQ0UscUJBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYTthQUN4QyxxQkFBcUIsRUFBRTthQUN2QixLQUFLLENBQUM7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQy9FLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0tBQ3pGOzs7O0lBRUQsc0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNsQjs7Ozs7SUFFRCwyQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsYUFBa0I7UUFDakMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRDtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM5QztLQUNGOztnQkE1REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSxxakNBcUJMO29CQUNMLE1BQU0sRUFBRSxDQUFDLGlUQUFpVCxDQUFDO2lCQUM1VDs7OztnQkE3QjBDLFVBQVU7Ozs0QkErQmxELEtBQUs7eUJBQ0wsTUFBTTtpQ0FDTixNQUFNO21DQUNOLE1BQU07OzJCQWxDVDs7U0E4QmEsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMaWJyYXJ5IH0gZnJvbSAnLi4vbGlicmFyeS5tb2RlbCc7XHJcbmltcG9ydCB7IFdpZGdldCB9IGZyb20gJy4uL3dpZGdldC5tb2RlbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC13aWRnZXRzLWxpYnJhcnknLFxyXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz0ndGl0bGUnPkxpYnJhcnk8L2Rpdj5cclxuPHVsIGNsYXNzPSdsaXN0LWdyb3VwJz5cclxuICA8bGkgKm5nRm9yPSdsZXQgbGlicmFyeVdpZGdldCBvZiBsaWJyYXJ5LndpZGdldHMnIGNsYXNzPSdsaXN0LWdyb3VwLWl0ZW0nPlxyXG4gICAgPHNwYW4+e3tsaWJyYXJ5V2lkZ2V0LndpZGdldC50aXRsZX19PC9zcGFuPlxyXG4gICAgPCEtLSA8c3BhbiAqbmdJZj0nbGlicmFyeVdpZGdldC5pc1JlbmRlcmVkOyBlbHNlIG5vdCcgY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvblJlbW92ZVdpZGdldChsaWJyYXJ5V2lkZ2V0LndpZGdldCknPnJlbW92ZV9jaXJjbGVfb3V0bGluZTwvc3Bhbj5cclxuICAgIDxuZy10ZW1wbGF0ZSAjbm90PlxyXG4gICAgICA8c3BhbiBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnIChjbGljayk9J29uQWRkV2lkZ2V0KGxpYnJhcnlXaWRnZXQud2lkZ2V0KSc+YWRkX2NpcmNsZV9vdXRsaW5lPC9zcGFuPlxyXG4gICAgPC9uZy10ZW1wbGF0ZT4gLS0+XHJcbiAgICA8IS0tIDxkaXYgY2xhc3M9J3ByZXR0eSBwLXN3aXRjaCBwLWZpbGwnPlxyXG4gICAgICA8aW5wdXQgaWQ9J2xpYnJhcnlXaWRnZXQud2lkZ2V0LmlkJyB0eXBlPSdjaGVja2JveCcgW2NoZWNrZWRdPSdsaWJyYXJ5V2lkZ2V0LmlzUmVuZGVyZWQnIChjaGFuZ2UpPSdvbkNoZWNrYm94Q2hhbmdlKGxpYnJhcnlXaWRnZXQpJyAvPlxyXG4gICAgPC9kaXY+IC0tPlxyXG4gICAgPHNwYW4gY2xhc3M9J3ByZXR0eSBwLXN3aXRjaCBwLWZpbGwnPlxyXG4gICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIFtjaGVja2VkXT0nbGlicmFyeVdpZGdldC5pc1JlbmRlcmVkJyAoY2hhbmdlKT0nb25DaGVja2JveENoYW5nZShsaWJyYXJ5V2lkZ2V0KScgLz5cclxuICAgICAgPGRpdiBjbGFzcz0nc3RhdGUgcC1zdWNjZXNzJz5cclxuICAgICAgICA8bGFiZWw+PC9sYWJlbD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L3NwYW4+XHJcbiAgPC9saT5cclxuPC91bD5cclxuPGRpdiBjbGFzcz0nYnV0dG9uLWNvbnRhaW5lcic+XHJcbiAgPGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1wcmltYXJ5JyAoY2xpY2spPSdvbkRvbmVDbGljaygpJz5Eb25lPC9idXR0b24+XHJcbjwvZGl2PmAsXHJcbiAgc3R5bGVzOiBbYDpob3N0e3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTAwO2JhY2tncm91bmQ6I2ZmZn11bHtsaXN0LXN0eWxlOm5vbmU7cGFkZGluZzowO21hcmdpbi1ib3R0b206MjBweH11bD5saXtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc311bD5saT5zcGFuOmZpcnN0LW9mLXR5cGV7ZmxvYXQ6bGVmdDttYXJnaW4tcmlnaHQ6MzBweH11bD5saT5zcGFuOmxhc3Qtb2YtdHlwZXtmbG9hdDpyaWdodDttYXJnaW4tdG9wOjVweH1sYWJlbDphZnRlcnttYXJnaW4tdG9wOi0xcHh9LnByZXR0eSBpbnB1dHt3aWR0aDoyMDAlfWBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMaWJyYXJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0IHtcclxuICBASW5wdXQoKSBsaWJyYXJ5OiBMaWJyYXJ5O1xyXG4gIEBPdXRwdXQoKSBkb25lID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xyXG4gIEBPdXRwdXQoKSByZW5kZXJXaWRnZXQgPSBuZXcgRXZlbnRFbWl0dGVyPFdpZGdldD4oKTtcclxuICBAT3V0cHV0KCkgZGVyZW5kZXJXaWRnZXQgPSBuZXcgRXZlbnRFbWl0dGVyPFdpZGdldD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7IH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY2FyZCcsICdjYXJkLXJvdycsICdwb3B1cCcpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudFxyXG4gICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgLndpZHRoO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gKHRoaXMubGlicmFyeS55UG9zaXRpb24gLSAyMCkgKyAncHgnO1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUubGVmdCA9ICh0aGlzLmxpYnJhcnkueFBvc2l0aW9uIC0gd2lkdGggKyAyMCkgKyAncHgnO1xyXG4gIH1cclxuXHJcbiAgb25Eb25lQ2xpY2soKTogdm9pZCB7XHJcbiAgICB0aGlzLmRvbmUuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgb25DaGVja2JveENoYW5nZShsaWJyYXJ5V2lkZ2V0OiBhbnkpIHtcclxuICAgIGlmIChsaWJyYXJ5V2lkZ2V0LmlzUmVuZGVyZWQpIHtcclxuICAgICAgdGhpcy5saWJyYXJ5LmRlcmVuZGVyV2lkZ2V0KGxpYnJhcnlXaWRnZXQud2lkZ2V0KTtcclxuICAgICAgdGhpcy5kZXJlbmRlcldpZGdldC5lbWl0KGxpYnJhcnlXaWRnZXQud2lkZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMubGlicmFyeS5yZW5kZXJXaWRnZXQobGlicmFyeVdpZGdldC53aWRnZXQpO1xyXG4gICAgICB0aGlzLnJlbmRlcldpZGdldC5lbWl0KGxpYnJhcnlXaWRnZXQud2lkZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19