/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Inject, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/delay';
import { SpacerComponent } from '../spacer/spacer.component';
import { Library } from '../library.model';
import { LayoutEditor } from '../layout-editor.model';
import { BootstrapService } from '../bootstrap.service';
var PanelComponent = /** @class */ (function () {
    function PanelComponent(document, widgetsService, bootstrapService) {
        this.document = document;
        this.widgetsService = widgetsService;
        this.bootstrapService = bootstrapService;
        this.layoutEditor = new LayoutEditor();
        this.resizeGuidelines = [];
        this.isOverlayDisplayed = false;
    }
    /**
     * @return {?}
     */
    PanelComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.bootstrapService.hasBreakpointChanged()) {
            this.addHorizontalSpacers();
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.preventHighlightingWhileMoving = /**
     * @return {?}
     */
    function () {
        this.document.body.classList.add('no-highlighting');
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.allowHighlighting = /**
     * @return {?}
     */
    function () {
        this.document.body.classList.remove('no-highlighting');
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.createSpacer = /**
     * @return {?}
     */
    function () {
        return {
            spacer: {}
        };
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.clearSpacers = /**
     * @return {?}
     */
    function () {
        for (var /** @type {?} */ i = this.items.length - 1; i >= 0; i--) {
            if (this.items[i].spacer) {
                this.items.splice(i, 1);
            }
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.addHorizontalSpacers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.clearSpacers();
        var /** @type {?} */ usedWidthOnRow = 0;
        var /** @type {?} */ indexesToInsertSpacer = [0];
        for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
            var /** @type {?} */ widget = this.items[i].widget || this.items[i].dropTarget;
            if (this.movingWidgetComponent && widget === this.movingWidgetComponent.widget) {
                continue;
            }
            var /** @type {?} */ widgetWidth = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget));
            usedWidthOnRow += widgetWidth;
            if (usedWidthOnRow === this.bootstrapService.maxColumns) {
                indexesToInsertSpacer.push(i + 1);
                usedWidthOnRow = 0;
            }
            else if (usedWidthOnRow > this.bootstrapService.maxColumns) {
                indexesToInsertSpacer.push(i);
                usedWidthOnRow = widgetWidth;
            }
        }
        indexesToInsertSpacer
            .reverse()
            .forEach(function (x) {
            _this.items.splice(x, 0, _this.createSpacer());
        });
        if (!this.items[this.items.length - 1].spacer) {
            this.items.push(this.createSpacer());
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.toggleOverlay = /**
     * @return {?}
     */
    function () {
        this.isOverlayDisplayed = !this.isOverlayDisplayed;
        if (this.isOverlayDisplayed) {
            document.getElementById('overlay').style.display = 'block';
        }
        else {
            document.getElementById('overlay').style.display = 'none';
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ renderedWidgets = this.widgetsService.getRenderedWidgets();
        this.items = renderedWidgets.map(function (x) {
            return { widget: x };
        });
        this.addHorizontalSpacers();
        var /** @type {?} */ availableWidgets = this.widgetsService.getAvailableWidgets();
        this.library = new Library(renderedWidgets, availableWidgets);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelComponent.prototype.onEditLibrary = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.library.edit(event.pageX, event.pageY);
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onHideLibrary = /**
     * @return {?}
     */
    function () {
        this.library.hide();
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.clearExistingDropTarget = /**
     * @return {?}
     */
    function () {
        for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
            if (this.items[i].dropTarget) {
                this.items.splice(i, 1);
            }
        }
    };
    /**
     * @param {?} movingWidget
     * @param {?} indexOfDrop
     * @return {?}
     */
    PanelComponent.prototype.isWidgetMovingDown = /**
     * @param {?} movingWidget
     * @param {?} indexOfDrop
     * @return {?}
     */
    function (movingWidget, indexOfDrop) {
        var /** @type {?} */ indexOfWidgetBeforeMove = this.items
            .map(function (x) { return x.widget; })
            .indexOf(movingWidget);
        return indexOfDrop > indexOfWidgetBeforeMove;
    };
    /**
     * @param {?} currentResident
     * @param {?} newResident
     * @return {?}
     */
    PanelComponent.prototype.insertDropTarget = /**
     * @param {?} currentResident
     * @param {?} newResident
     * @return {?}
     */
    function (currentResident, newResident) {
        if (!newResident) {
            newResident = currentResident;
        }
        this.clearExistingDropTarget();
        var /** @type {?} */ dropTarget = newResident.widget.clone();
        var /** @type {?} */ indexOfDrop;
        if (currentResident instanceof SpacerComponent) {
            this.bootstrapService.makeFullWidth(dropTarget.makeFullWidth.bind(dropTarget));
            indexOfDrop = this.items
                .map(function (x) { return x.spacer; })
                .indexOf(currentResident.spacer);
        }
        else {
            indexOfDrop = this.items
                .map(function (x) { return x.widget; })
                .indexOf(currentResident.widget);
            if (this.isWidgetMovingDown(newResident.widget, indexOfDrop)) {
                indexOfDrop++;
            }
        }
        var /** @type {?} */ height = newResident.getHeightInformation().height;
        this.items.splice(indexOfDrop, 0, { dropTarget: dropTarget, height: height });
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.onWidgetMove = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        this.movingWidgetComponent = widgetComponent;
        this.preventHighlightingWhileMoving();
        this.insertDropTarget(widgetComponent, null);
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onWidgetDropped = /**
     * @return {?}
     */
    function () {
        this.items.splice(this.items.map(function (x) { return x.widget; }).indexOf(this.movingWidgetComponent.widget), 1);
        for (var /** @type {?} */ i = 0; i < this.items.length; i++) {
            if (this.items[i].dropTarget) {
                this.items.splice(i, 1, { widget: this.movingWidgetComponent.widget });
                break;
            }
        }
        this.allowHighlighting();
        this.movingWidgetComponent = null;
        this.addHorizontalSpacers();
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.onWidgetHovered = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        var _this = this;
        if (!this.movingWidgetComponent) {
            return;
        }
        console.log('test 0', new Date());
        this.moveHoverSubscription = Observable.of({})
            .delay(30)
            .subscribe(function () {
            console.log('test', new Date());
            if (!_this.movingWidgetComponent) {
                return;
            }
            _this.insertDropTarget(widgetComponent, _this.movingWidgetComponent);
            _this.addHorizontalSpacers();
        });
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onWidgetUnhovered = /**
     * @return {?}
     */
    function () {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
            this.moveHoverSubscription = null;
        }
    };
    /**
     * @param {?} spacerComponent
     * @return {?}
     */
    PanelComponent.prototype.onSpacerHovered = /**
     * @param {?} spacerComponent
     * @return {?}
     */
    function (spacerComponent) {
        var _this = this;
        if (!this.movingWidgetComponent) {
            return;
        }
        this.moveHoverSubscription = Observable.of({})
            .delay(300)
            .subscribe(function () {
            if (!_this.movingWidgetComponent) {
                return;
            }
            _this.insertDropTarget(spacerComponent, _this.movingWidgetComponent);
            _this.addHorizontalSpacers();
        });
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onSpacerUnhovered = /**
     * @return {?}
     */
    function () {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
            this.moveHoverSubscription = null;
        }
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.makeGrid = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ grid = [];
        grid.push([]);
        var /** @type {?} */ currentRowWidth = 0;
        var /** @type {?} */ widgets = this.items
            .filter(function (x) { return x.widget; })
            .map(function (x) { return x.widget; });
        for (var /** @type {?} */ i = 0; i < widgets.length; i++) {
            var /** @type {?} */ widget = widgets[i];
            var /** @type {?} */ width = this.bootstrapService
                .getWidth(widget.getCurrentWidth.bind(widget));
            grid[grid.length - 1].push(widget);
            currentRowWidth += width;
            var /** @type {?} */ isLastWidget = i === widgets.length - 1;
            if (isLastWidget) {
                break;
            }
            if (currentRowWidth === this.bootstrapService.maxColumns) {
                grid.push([]);
                currentRowWidth = 0;
            }
            else {
                // Preview the next widget and see if a new row is needed due to lack of space.
                var /** @type {?} */ nextWidget = widgets[i + 1];
                var /** @type {?} */ nextWidgetWidth = this.bootstrapService
                    .getWidth(nextWidget.getCurrentWidth.bind(nextWidget));
                var /** @type {?} */ spaceLeftOnCurrentRow = this.bootstrapService.maxColumns - currentRowWidth;
                if (nextWidgetWidth > spaceLeftOnCurrentRow) {
                    grid.push([]);
                    currentRowWidth = 0;
                }
            }
        }
        return grid;
    };
    ;
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.findRowContainingWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        // I'm making a multi-dimensional array of the entire grid before trying to
        // find which row the widget is in. This is less efficient than building the
        // grid and simultaneously checking if the row has the widget, but it makes
        // the logic much more reasonable.
        var /** @type {?} */ grid = this.makeGrid();
        for (var /** @type {?} */ i = 0; i < grid.length; i++) {
            var /** @type {?} */ widgetIndex = grid[i].indexOf(widget);
            if (widgetIndex >= 0) {
                return grid[i];
            }
        }
    };
    ;
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.calculateBoundaries = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        var /** @type {?} */ row = this.findRowContainingWidget(widget);
        console.log("row", row);
        var /** @type {?} */ currentPosition = row
            .slice(0, row.indexOf(widget) + 1)
            .map(function (x) { return _this.bootstrapService.getWidth(x.getCurrentWidth.bind(x)); })
            .reduce(function (x, y) { return x + y; });
        var /** @type {?} */ minimumWidth = this.bootstrapService.getWidth(widget.getMinimumWidth.bind(widget));
        var /** @type {?} */ spaceToMinimize = this.bootstrapService.getWidth(widget.getCurrentWidth.bind(widget)) - minimumWidth;
        // Don't go left far enough to exceed the minimum of the widget.
        var /** @type {?} */ left = currentPosition - spaceToMinimize;
        // Don't go right far enough to exceed the width of the row.
        var /** @type {?} */ right = this.bootstrapService.maxColumns;
        // This is used to determine at which column to start drawing guidelines.
        var /** @type {?} */ offset = minimumWidth - left;
        return { left: left, right: right, offset: offset };
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.drawResizeGuidelines = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        var /** @type {?} */ heightInformation = widgetComponent.getHeightInformation();
        var /** @type {?} */ boundaries = this.calculateBoundaries(widgetComponent.widget);
        for (var /** @type {?} */ i = boundaries.left; i <= boundaries.right; i++) {
            // unshift() which inserts at the beginning of the array instead of push()
            // because we want to display the longest guideline first so that the shorter
            // one is on top of the longer one. This will help when we hover over each one.
            // If the longer one was on top it would be the only guideline raising events.
            this.resizeGuidelines.unshift({
                widthOfGuideline: i,
                targetWidthOfWidget: i + boundaries.offset,
                top: heightInformation.top,
                height: heightInformation.height,
                widget: widgetComponent.widget
            });
        }
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onWidgetResized = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var /** @type {?} */ indexOfWidget = this.items
            .map(function (x) { return x.widget; })
            .indexOf(widget);
        this.items.splice(indexOfWidget, 1, { widget: widget });
        this.addHorizontalSpacers();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.endWidgetResize = /**
     * @return {?}
     */
    function () {
        this.resizeGuidelines = [];
        this.allowHighlighting();
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} widgetComponent
     * @return {?}
     */
    PanelComponent.prototype.onWidgetResizeStarted = /**
     * @param {?} widgetComponent
     * @return {?}
     */
    function (widgetComponent) {
        var _this = this;
        this.drawResizeGuidelines(widgetComponent);
        this.preventHighlightingWhileMoving();
        this.mouseUpSubscription =
            Observable.fromEvent(this.document, 'mouseup')
                .subscribe(function () {
                _this.endWidgetResize();
                if (_this.mouseUpSubscription) {
                    _this.mouseUpSubscription.unsubscribe();
                }
            });
        this.touchEndSubscription =
            Observable.fromEvent(this.document, 'touchend')
                .subscribe(function () {
                _this.endWidgetResize();
                if (_this.touchEndSubscription) {
                    _this.touchEndSubscription.unsubscribe();
                }
            });
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onRenderWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        this.items.unshift({ widget: widget });
        this.addHorizontalSpacers();
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onDerenderWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        this.items
            .filter(function (x) { return x.widget && x.widget.id === widget.id; })
            .forEach(function (x) {
            _this.items.splice(_this.items.indexOf(x), 1);
        });
        this.addHorizontalSpacers();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelComponent.prototype.onEditLayout = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.layoutEditor.edit(event.pageX, event.pageY);
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onHideLayoutEditor = /**
     * @return {?}
     */
    function () {
        this.layoutEditor.hide();
        this.toggleOverlay();
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    PanelComponent.prototype.onWidgetCloseClick = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        var _this = this;
        this.items
            .filter(function (x) { return x.widget && x.widget === widget; })
            .forEach(function (x) {
            _this.items.splice(_this.items.indexOf(x), 1);
        });
        this.addHorizontalSpacers();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.onWidgetToggleFullScreenClick = /**
     * @return {?}
     */
    function () {
        this.toggleOverlay();
    };
    /**
     * @return {?}
     */
    PanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.moveHoverSubscription) {
            this.moveHoverSubscription.unsubscribe();
        }
        if (this.mouseUpSubscription) {
            this.mouseUpSubscription.unsubscribe();
        }
        if (this.touchEndSubscription) {
            this.touchEndSubscription.unsubscribe();
        }
    };
    PanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widgets-panel',
                    template: "<app-widgets-panel-controls (editLibrary)='onEditLibrary($event)' (editLayout)='onEditLayout($event)'></app-widgets-panel-controls>\n<app-widgets-library *ngIf='library.isDisplayed' [library]='library' (done)='onHideLibrary()' (renderWidget)='onRenderWidget($event)' (derenderWidget)='onDerenderWidget($event)'></app-widgets-library>\n<app-widgets-layout-editor *ngIf='layoutEditor.isDisplayed' [layoutEditor]='layoutEditor' (done)='onHideLayoutEditor()'></app-widgets-layout-editor>\n<ng-container *ngFor='let item of items'>\n  <app-widget *ngIf='item.widget; else drop' [widget]='item.widget' (widgetMoving)='onWidgetMove($event)' (widgetDropped)='onWidgetDropped()' (widgetHovered)='onWidgetHovered($event)' (widgetUnhovered)='onWidgetUnhovered()' (resizeStarted)='onWidgetResizeStarted($event)'\n    (close)='onWidgetCloseClick($event)' (fullscreen)='onWidgetToggleFullScreenClick()'></app-widget>\n  <ng-template #drop>\n    <app-widget-drop-target *ngIf='item.dropTarget; else spacer' [dropTarget]='item.dropTarget' [height]='item.height'></app-widget-drop-target>\n    <ng-template #spacer>\n      <app-widgets-panel-spacer [spacer]='item.spacer' (spacerHovered)='onSpacerHovered($event)' (spacerUnhovered)='onSpacerUnhovered()'></app-widgets-panel-spacer>\n    </ng-template>\n  </ng-template>\n</ng-container>\n<app-widget-resize-guideline *ngFor='let guideline of resizeGuidelines' [guideline]='guideline' (resized)='onWidgetResized($event)'></app-widget-resize-guideline>",
                    styles: [".moving-widget{position:absolute;pointer-events:none;z-index:100}"]
                },] },
    ];
    /** @nocollapse */
    PanelComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: undefined, decorators: [{ type: Inject, args: ['widgetsService',] },] },
        { type: BootstrapService, },
    ]; };
    PanelComponent.propDecorators = {
        "onResize": [{ type: HostListener, args: ['window:resize',] },],
    };
    return PanelComponent;
}());
export { PanelComponent };
function PanelComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PanelComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PanelComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    PanelComponent.propDecorators;
    /** @type {?} */
    PanelComponent.prototype.library;
    /** @type {?} */
    PanelComponent.prototype.layoutEditor;
    /** @type {?} */
    PanelComponent.prototype.items;
    /** @type {?} */
    PanelComponent.prototype.resizeGuidelines;
    /** @type {?} */
    PanelComponent.prototype.moveHoverSubscription;
    /** @type {?} */
    PanelComponent.prototype.mouseUpSubscription;
    /** @type {?} */
    PanelComponent.prototype.touchEndSubscription;
    /** @type {?} */
    PanelComponent.prototype.isOverlayDisplayed;
    /** @type {?} */
    PanelComponent.prototype.movingWidgetComponent;
    /** @type {?} */
    PanelComponent.prototype.document;
    /** @type {?} */
    PanelComponent.prototype.widgetsService;
    /** @type {?} */
    PanelComponent.prototype.bootstrapService;
}

//# sourceMappingURL=data:application/json;base64,