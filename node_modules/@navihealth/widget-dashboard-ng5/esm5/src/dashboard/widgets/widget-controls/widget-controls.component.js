/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';
import { Widget } from '../widget.model';
var WidgetControlsComponent = /** @class */ (function () {
    function WidgetControlsComponent(elementRef) {
        this.elementRef = elementRef;
        this.close = new EventEmitter();
        this.fullscreen = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.classList.add('col-12');
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // We'll set the width of the title based on the width left by the buttons.
        // This will make the overflow on the title work properly. But we won't
        // do this until the stack is empty. Without the setTime, the first page load
        // after a Hard Reload does not calculate the offsetWidths correctly.
        setTimeout(function () {
            var /** @type {?} */ containerElement = _this.elementRef.nativeElement.children[0];
            var /** @type {?} */ controlsWidth = containerElement.offsetWidth;
            var /** @type {?} */ buttonsElement = containerElement.querySelector('.buttons');
            var /** @type {?} */ buttonsWidth = buttonsElement.offsetWidth;
            var /** @type {?} */ padding = 8;
            var /** @type {?} */ titleElement = containerElement.querySelector('.title');
            titleElement.style.width = (100 - padding - (buttonsWidth / controlsWidth * 100)) + '%';
        }, 0);
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onCollapseClick = /**
     * @return {?}
     */
    function () {
        this.widget.collapse();
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onExpandClick = /**
     * @return {?}
     */
    function () {
        this.widget.expand();
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.close.emit();
    };
    /**
     * @return {?}
     */
    WidgetControlsComponent.prototype.onToggleFullScreenClick = /**
     * @return {?}
     */
    function () {
        this.fullscreen.emit();
    };
    WidgetControlsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-widget-controls',
                    template: "<div>\n  <div class='title'>{{widget.title}}</div>\n  <div *ngIf='!widget.isFullScreen; else fullscreen' class='buttons no-highlighting not-grabbable'>\n    <span *ngIf='widget.isExpanded; else expand' class='material-icons' (click)='onCollapseClick()'>expand_less</span>\n    <ng-template #expand>\n      <span class='material-icons' (click)='onExpandClick()'>expand_more</span>\n    </ng-template>\n    <span class='material-icons d-none d-sm-inline' (click)='onToggleFullScreenClick()'>fullscreen</span>\n    <span class='material-icons' (click)='onCloseClick()'>close</span>\n  </div>\n  <ng-template #fullscreen>\n    <div class='material-icons buttons no-highlighting not-grabbable' (click)='onToggleFullScreenClick()'>fullscreen_exit</div>\n  </ng-template>\n</div>",
                    styles: [":host{display:block;cursor:-webkit-grab;cursor:grab;overflow:hidden;margin-bottom:15px}:host>div>.title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host>div>div:first-of-type{float:left}:host>div>div:last-of-type{float:right;cursor:default}.fullscreen :host{cursor:default}"]
                },] },
    ];
    /** @nocollapse */
    WidgetControlsComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    WidgetControlsComponent.propDecorators = {
        "widget": [{ type: Input },],
        "close": [{ type: Output },],
        "fullscreen": [{ type: Output },],
    };
    return WidgetControlsComponent;
}());
export { WidgetControlsComponent };
function WidgetControlsComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    WidgetControlsComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    WidgetControlsComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    WidgetControlsComponent.propDecorators;
    /** @type {?} */
    WidgetControlsComponent.prototype.widget;
    /** @type {?} */
    WidgetControlsComponent.prototype.close;
    /** @type {?} */
    WidgetControlsComponent.prototype.fullscreen;
    /** @type {?} */
    WidgetControlsComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LWNvbnRyb2xzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuYXZpaGVhbHRoL3dpZGdldC1kYXNoYm9hcmQtbmc1LyIsInNvdXJjZXMiOlsic3JjL2Rhc2hib2FyZC93aWRnZXRzL3dpZGdldC1jb250cm9scy93aWRnZXQtY29udHJvbHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBbUMsTUFBTSxlQUFlLENBQUM7QUFDNUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDOztJQXlCdkMsaUNBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7cUJBSHhCLElBQUksWUFBWSxFQUFROzBCQUNuQixJQUFJLFlBQVksRUFBUTtLQUVBOzs7O0lBRS9DLDBDQUFROzs7SUFBUjtLQUNDOzs7O0lBRUQsb0RBQWtCOzs7SUFBbEI7UUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3ZEOzs7O0lBRUQsaURBQWU7OztJQUFmO1FBQUEsaUJBY0M7Ozs7O1FBVEMsVUFBVSxDQUFDO1lBQ1QscUJBQU0sZ0JBQWdCLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25FLHFCQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7WUFDbkQscUJBQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsRSxxQkFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztZQUNoRCxxQkFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLHFCQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUQsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLENBQUMsWUFBWSxHQUFHLGFBQWEsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUN6RixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ1A7Ozs7SUFFRCxpREFBZTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3hCOzs7O0lBRUQsK0NBQWE7OztJQUFiO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUN0Qjs7OztJQUVELDhDQUFZOzs7SUFBWjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDbkI7Ozs7SUFFRCx5REFBdUI7OztJQUF2QjtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDeEI7O2dCQTlERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsUUFBUSxFQUFFLHN3QkFhTDtvQkFDTCxNQUFNLEVBQUUsQ0FBQyxrU0FBa1MsQ0FBQztpQkFDN1M7Ozs7Z0JBcEJ3RCxVQUFVOzs7MkJBc0JoRSxLQUFLOzBCQUNMLE1BQU07K0JBQ04sTUFBTTs7a0NBeEJUOztTQXFCYSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFdpZGdldCB9IGZyb20gJy4uL3dpZGdldC5tb2RlbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC13aWRnZXQtY29udHJvbHMnLFxyXG4gIHRlbXBsYXRlOiBgPGRpdj5cclxuICA8ZGl2IGNsYXNzPSd0aXRsZSc+e3t3aWRnZXQudGl0bGV9fTwvZGl2PlxyXG4gIDxkaXYgKm5nSWY9JyF3aWRnZXQuaXNGdWxsU2NyZWVuOyBlbHNlIGZ1bGxzY3JlZW4nIGNsYXNzPSdidXR0b25zIG5vLWhpZ2hsaWdodGluZyBub3QtZ3JhYmJhYmxlJz5cclxuICAgIDxzcGFuICpuZ0lmPSd3aWRnZXQuaXNFeHBhbmRlZDsgZWxzZSBleHBhbmQnIGNsYXNzPSdtYXRlcmlhbC1pY29ucycgKGNsaWNrKT0nb25Db2xsYXBzZUNsaWNrKCknPmV4cGFuZF9sZXNzPC9zcGFuPlxyXG4gICAgPG5nLXRlbXBsYXRlICNleHBhbmQ+XHJcbiAgICAgIDxzcGFuIGNsYXNzPSdtYXRlcmlhbC1pY29ucycgKGNsaWNrKT0nb25FeHBhbmRDbGljaygpJz5leHBhbmRfbW9yZTwvc3Bhbj5cclxuICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICA8c3BhbiBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgZC1ub25lIGQtc20taW5saW5lJyAoY2xpY2spPSdvblRvZ2dsZUZ1bGxTY3JlZW5DbGljaygpJz5mdWxsc2NyZWVuPC9zcGFuPlxyXG4gICAgPHNwYW4gY2xhc3M9J21hdGVyaWFsLWljb25zJyAoY2xpY2spPSdvbkNsb3NlQ2xpY2soKSc+Y2xvc2U8L3NwYW4+XHJcbiAgPC9kaXY+XHJcbiAgPG5nLXRlbXBsYXRlICNmdWxsc2NyZWVuPlxyXG4gICAgPGRpdiBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgYnV0dG9ucyBuby1oaWdobGlnaHRpbmcgbm90LWdyYWJiYWJsZScgKGNsaWNrKT0nb25Ub2dnbGVGdWxsU2NyZWVuQ2xpY2soKSc+ZnVsbHNjcmVlbl9leGl0PC9kaXY+XHJcbiAgPC9uZy10ZW1wbGF0ZT5cclxuPC9kaXY+YCxcclxuICBzdHlsZXM6IFtgOmhvc3R7ZGlzcGxheTpibG9jaztjdXJzb3I6LXdlYmtpdC1ncmFiO2N1cnNvcjpncmFiO292ZXJmbG93OmhpZGRlbjttYXJnaW4tYm90dG9tOjE1cHh9Omhvc3Q+ZGl2Pi50aXRsZXt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW59Omhvc3Q+ZGl2PmRpdjpmaXJzdC1vZi10eXBle2Zsb2F0OmxlZnR9Omhvc3Q+ZGl2PmRpdjpsYXN0LW9mLXR5cGV7ZmxvYXQ6cmlnaHQ7Y3Vyc29yOmRlZmF1bHR9LmZ1bGxzY3JlZW4gOmhvc3R7Y3Vyc29yOmRlZmF1bHR9YF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFdpZGdldENvbnRyb2xzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0IHtcclxuICBASW5wdXQoKSB3aWRnZXQ6IFdpZGdldDtcclxuICBAT3V0cHV0KCkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcbiAgQE91dHB1dCgpIGZ1bGxzY3JlZW4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY29sLTEyJyk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAvLyBXZSdsbCBzZXQgdGhlIHdpZHRoIG9mIHRoZSB0aXRsZSBiYXNlZCBvbiB0aGUgd2lkdGggbGVmdCBieSB0aGUgYnV0dG9ucy5cclxuICAgIC8vIFRoaXMgd2lsbCBtYWtlIHRoZSBvdmVyZmxvdyBvbiB0aGUgdGl0bGUgd29yayBwcm9wZXJseS4gQnV0IHdlIHdvbid0XHJcbiAgICAvLyBkbyB0aGlzIHVudGlsIHRoZSBzdGFjayBpcyBlbXB0eS4gV2l0aG91dCB0aGUgc2V0VGltZSwgdGhlIGZpcnN0IHBhZ2UgbG9hZFxyXG4gICAgLy8gYWZ0ZXIgYSBIYXJkIFJlbG9hZCBkb2VzIG5vdCBjYWxjdWxhdGUgdGhlIG9mZnNldFdpZHRocyBjb3JyZWN0bHkuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdO1xyXG4gICAgICBjb25zdCBjb250cm9sc1dpZHRoID0gY29udGFpbmVyRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgY29uc3QgYnV0dG9uc0VsZW1lbnQgPSBjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b25zJyk7XHJcbiAgICAgIGNvbnN0IGJ1dHRvbnNXaWR0aCA9IGJ1dHRvbnNFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICBjb25zdCBwYWRkaW5nID0gODtcclxuICAgICAgY29uc3QgdGl0bGVFbGVtZW50ID0gY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudGl0bGUnKTtcclxuICAgICAgdGl0bGVFbGVtZW50LnN0eWxlLndpZHRoID0gKDEwMCAtIHBhZGRpbmcgLSAoYnV0dG9uc1dpZHRoIC8gY29udHJvbHNXaWR0aCAqIDEwMCkpICsgJyUnOyAgXHJcbiAgICB9LCAwKTtcclxuICB9XHJcblxyXG4gIG9uQ29sbGFwc2VDbGljaygpIHtcclxuICAgIHRoaXMud2lkZ2V0LmNvbGxhcHNlKCk7XHJcbiAgfVxyXG5cclxuICBvbkV4cGFuZENsaWNrKCkge1xyXG4gICAgdGhpcy53aWRnZXQuZXhwYW5kKCk7XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlQ2xpY2soKSB7XHJcbiAgICB0aGlzLmNsb3NlLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIG9uVG9nZ2xlRnVsbFNjcmVlbkNsaWNrKCkge1xyXG4gICAgdGhpcy5mdWxsc2NyZWVuLmVtaXQoKTtcclxuICB9XHJcbn1cclxuIl19