/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
export function IWidth() { }
function IWidth_tsickle_Closure_declarations() {
    /** @type {?} */
    IWidth.prototype.xs;
    /** @type {?|undefined} */
    IWidth.prototype.sm;
    /** @type {?|undefined} */
    IWidth.prototype.md;
    /** @type {?|undefined} */
    IWidth.prototype.lg;
    /** @type {?|undefined} */
    IWidth.prototype.xl;
}
var Widget = /** @class */ (function () {
    function Widget(id, title, currentWidth, minimumWidth, initialHeight, render, isHidden) {
        this.currentWidth = currentWidth;
        this.minimumWidth = minimumWidth;
        this.isExpanded = true;
        this.isFullScreen = false;
        this.id = id;
        this.title = title;
        this.initialHeight = initialHeight;
        this.render = (/** @type {?} */ (render)).bind(this);
        this.isHidden = isHidden;
        this.currentWidth = currentWidth;
        // This uses Object.assign to create a new object from the one passed in.
        // This is to prevent the instantiator from passing in one object to both
        // currentWidth and minimumWidth and then having that object ref assigned
        // to both properties. If that were to happen, then updating the
        // currentWidth would also update the minimumWidth. The minimumWidth
        // should never be changed once set.
        this.minimumWidth = Object.assign({}, minimumWidth);
        Object.freeze(this.minimumWidth);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    Widget.createAvailableWidget = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var id = _a.id, title = _a.title, width = _a.width, initialHeight = _a.initialHeight, render = _a.render;
        return new Widget(id, title, width, width, initialHeight, render, false);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    Widget.createRenderedWidget = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var id = _a.id, title = _a.title, currentWidth = _a.currentWidth, minimumWidth = _a.minimumWidth, initialHeight = _a.initialHeight, render = _a.render;
        return new Widget(id, title, currentWidth, minimumWidth, initialHeight, render, false);
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    Widget.prototype.getCurrentWidth = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        return this.currentWidth[breakpoint];
    };
    /**
     * @return {?}
     */
    Widget.prototype.getCurrentWidths = /**
     * @return {?}
     */
    function () {
        return this.currentWidth;
    };
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    Widget.prototype.getMinimumWidth = /**
     * @param {?} breakpoint
     * @return {?}
     */
    function (breakpoint) {
        return this.minimumWidth[breakpoint];
    };
    /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    Widget.prototype.makeFullWidth = /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    function (breakpoint, width) {
        if (this.currentWidth[breakpoint]) {
            this.currentWidth[breakpoint] = width;
        }
    };
    /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    Widget.prototype.resize = /**
     * @param {?} breakpoint
     * @param {?} width
     * @return {?}
     */
    function (breakpoint, width) {
        this.currentWidth[breakpoint] = width;
    };
    /**
     * @return {?}
     */
    Widget.prototype.expand = /**
     * @return {?}
     */
    function () {
        this.isExpanded = true;
    };
    /**
     * @return {?}
     */
    Widget.prototype.collapse = /**
     * @return {?}
     */
    function () {
        this.isExpanded = false;
    };
    /**
     * @return {?}
     */
    Widget.prototype.toggleFullScreen = /**
     * @return {?}
     */
    function () {
        this.isFullScreen = !this.isFullScreen;
    };
    /**
     * @return {?}
     */
    Widget.prototype.clone = /**
     * @return {?}
     */
    function () {
        return new Widget(this.id, this.title, this.currentWidth, this.minimumWidth, this.initialHeight, this.render, this.isHidden);
    };
    return Widget;
}());
export { Widget };
function Widget_tsickle_Closure_declarations() {
    /** @type {?} */
    Widget.prototype.id;
    /** @type {?} */
    Widget.prototype.title;
    /** @type {?} */
    Widget.prototype.initialHeight;
    /** @type {?} */
    Widget.prototype.render;
    /** @type {?} */
    Widget.prototype.isHidden;
    /** @type {?} */
    Widget.prototype.isExpanded;
    /** @type {?} */
    Widget.prototype.isFullScreen;
    /** @type {?} */
    Widget.prototype.currentWidth;
    /** @type {?} */
    Widget.prototype.minimumWidth;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5hdmloZWFsdGgvd2lkZ2V0LWRhc2hib2FyZC1uZzUvIiwic291cmNlcyI6WyJzcmMvZGFzaGJvYXJkL3dpZGdldHMvd2lkZ2V0Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVUEsSUFBQTtvQkFVSSxFQUFVLEVBQ1YsS0FBYSxFQUNMLGNBQ1MsY0FDakIsYUFBcUIsRUFDckIsTUFBa0IsRUFDbEIsUUFBaUI7UUFKVCxpQkFBWSxHQUFaLFlBQVk7UUFDSCxpQkFBWSxHQUFaLFlBQVk7MEJBUGxCLElBQUk7NEJBQ0YsS0FBSztRQVVsQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsbUJBQUMsTUFBYSxFQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDOzs7Ozs7O1FBUWpDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7OztJQUc1Qiw0QkFBcUI7Ozs7SUFBNUIsVUFBNkIsRUFBMkM7WUFBekMsVUFBRSxFQUFFLGdCQUFLLEVBQUUsZ0JBQUssRUFBRSxnQ0FBYSxFQUFFLGtCQUFNO1FBQ3BFLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxRTs7Ozs7SUFFTSwyQkFBb0I7Ozs7SUFBM0IsVUFBNEIsRUFBZ0U7WUFBOUQsVUFBRSxFQUFFLGdCQUFLLEVBQUUsOEJBQVksRUFBRSw4QkFBWSxFQUFFLGdDQUFhLEVBQUUsa0JBQU07UUFDeEYsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3hGOzs7OztJQUVELGdDQUFlOzs7O0lBQWYsVUFBZ0IsVUFBa0I7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdEM7Ozs7SUFFRCxpQ0FBZ0I7OztJQUFoQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQzFCOzs7OztJQUVELGdDQUFlOzs7O0lBQWYsVUFBZ0IsVUFBa0I7UUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdEM7Ozs7OztJQUVELDhCQUFhOzs7OztJQUFiLFVBQWMsVUFBa0IsRUFBRSxLQUFhO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ3ZDO0tBQ0Y7Ozs7OztJQUVELHVCQUFNOzs7OztJQUFOLFVBQU8sVUFBa0IsRUFBRSxLQUFhO1FBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ3ZDOzs7O0lBRUQsdUJBQU07OztJQUFOO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDeEI7Ozs7SUFFRCx5QkFBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztLQUN6Qjs7OztJQUVELGlDQUFnQjs7O0lBQWhCO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7S0FDeEM7Ozs7SUFFRCxzQkFBSzs7O0lBQUw7UUFDRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQ2YsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2xCO2lCQS9GSDtJQWdHQyxDQUFBO0FBdEZELGtCQXNGQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIFJlbmRlckZ1bmMgPSAoSHRtbEVsZW1lbnQpID0+IFByb21pc2U8dm9pZD47XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElXaWR0aCB7XHJcbiAgeHM6IG51bWJlcjtcclxuICBzbT86IG51bWJlcjtcclxuICBtZD86IG51bWJlcjtcclxuICBsZz86IG51bWJlcjtcclxuICB4bD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdpZGdldCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGluaXRpYWxIZWlnaHQ6IHN0cmluZztcclxuICByZW5kZXI6IFJlbmRlckZ1bmM7XHJcbiAgaXNIaWRkZW46IGJvb2xlYW47XHJcbiAgaXNFeHBhbmRlZCA9IHRydWU7XHJcbiAgaXNGdWxsU2NyZWVuID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICAgdGl0bGU6IHN0cmluZyxcclxuICAgIHByaXZhdGUgY3VycmVudFdpZHRoOiBJV2lkdGgsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1pbmltdW1XaWR0aDogSVdpZHRoLFxyXG4gICAgaW5pdGlhbEhlaWdodDogc3RyaW5nLFxyXG4gICAgcmVuZGVyOiBSZW5kZXJGdW5jLFxyXG4gICAgaXNIaWRkZW46IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcclxuICAgIHRoaXMuaW5pdGlhbEhlaWdodCA9IGluaXRpYWxIZWlnaHQ7XHJcbiAgICB0aGlzLnJlbmRlciA9IChyZW5kZXIgYXMgYW55KS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5pc0hpZGRlbiA9IGlzSGlkZGVuO1xyXG4gICAgdGhpcy5jdXJyZW50V2lkdGggPSBjdXJyZW50V2lkdGg7XHJcblxyXG4gICAgLy8gVGhpcyB1c2VzIE9iamVjdC5hc3NpZ24gdG8gY3JlYXRlIGEgbmV3IG9iamVjdCBmcm9tIHRoZSBvbmUgcGFzc2VkIGluLlxyXG4gICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IHRoZSBpbnN0YW50aWF0b3IgZnJvbSBwYXNzaW5nIGluIG9uZSBvYmplY3QgdG8gYm90aFxyXG4gICAgLy8gY3VycmVudFdpZHRoIGFuZCBtaW5pbXVtV2lkdGggYW5kIHRoZW4gaGF2aW5nIHRoYXQgb2JqZWN0IHJlZiBhc3NpZ25lZFxyXG4gICAgLy8gdG8gYm90aCBwcm9wZXJ0aWVzLiBJZiB0aGF0IHdlcmUgdG8gaGFwcGVuLCB0aGVuIHVwZGF0aW5nIHRoZVxyXG4gICAgLy8gY3VycmVudFdpZHRoIHdvdWxkIGFsc28gdXBkYXRlIHRoZSBtaW5pbXVtV2lkdGguIFRoZSBtaW5pbXVtV2lkdGhcclxuICAgIC8vIHNob3VsZCBuZXZlciBiZSBjaGFuZ2VkIG9uY2Ugc2V0LlxyXG4gICAgdGhpcy5taW5pbXVtV2lkdGggPSBPYmplY3QuYXNzaWduKHt9LCBtaW5pbXVtV2lkdGgpO1xyXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzLm1pbmltdW1XaWR0aCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlQXZhaWxhYmxlV2lkZ2V0KHsgaWQsIHRpdGxlLCB3aWR0aCwgaW5pdGlhbEhlaWdodCwgcmVuZGVyIH0pIHtcclxuICAgIHJldHVybiBuZXcgV2lkZ2V0KGlkLCB0aXRsZSwgd2lkdGgsIHdpZHRoLCBpbml0aWFsSGVpZ2h0LCByZW5kZXIsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVSZW5kZXJlZFdpZGdldCh7IGlkLCB0aXRsZSwgY3VycmVudFdpZHRoLCBtaW5pbXVtV2lkdGgsIGluaXRpYWxIZWlnaHQsIHJlbmRlciB9KSB7XHJcbiAgICByZXR1cm4gbmV3IFdpZGdldChpZCwgdGl0bGUsIGN1cnJlbnRXaWR0aCwgbWluaW11bVdpZHRoLCBpbml0aWFsSGVpZ2h0LCByZW5kZXIsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGdldEN1cnJlbnRXaWR0aChicmVha3BvaW50OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRXaWR0aFticmVha3BvaW50XTtcclxuICB9XHJcblxyXG4gIGdldEN1cnJlbnRXaWR0aHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50V2lkdGg7XHJcbiAgfVxyXG5cclxuICBnZXRNaW5pbXVtV2lkdGgoYnJlYWtwb2ludDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5taW5pbXVtV2lkdGhbYnJlYWtwb2ludF07XHJcbiAgfVxyXG5cclxuICBtYWtlRnVsbFdpZHRoKGJyZWFrcG9pbnQ6IHN0cmluZywgd2lkdGg6IG51bWJlcikge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudFdpZHRoW2JyZWFrcG9pbnRdKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFdpZHRoW2JyZWFrcG9pbnRdID0gd2lkdGg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXNpemUoYnJlYWtwb2ludDogc3RyaW5nLCB3aWR0aDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmN1cnJlbnRXaWR0aFticmVha3BvaW50XSA9IHdpZHRoO1xyXG4gIH1cclxuXHJcbiAgZXhwYW5kKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0V4cGFuZGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNvbGxhcHNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVGdWxsU2NyZWVuKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0Z1bGxTY3JlZW4gPSAhdGhpcy5pc0Z1bGxTY3JlZW47XHJcbiAgfVxyXG5cclxuICBjbG9uZSgpOiBXaWRnZXQge1xyXG4gICAgcmV0dXJuIG5ldyBXaWRnZXQoXHJcbiAgICAgIHRoaXMuaWQsXHJcbiAgICAgIHRoaXMudGl0bGUsXHJcbiAgICAgIHRoaXMuY3VycmVudFdpZHRoLFxyXG4gICAgICB0aGlzLm1pbmltdW1XaWR0aCxcclxuICAgICAgdGhpcy5pbml0aWFsSGVpZ2h0LFxyXG4gICAgICB0aGlzLnJlbmRlcixcclxuICAgICAgdGhpcy5pc0hpZGRlbik7XHJcbiAgfVxyXG59XHJcbiJdfQ==